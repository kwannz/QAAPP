/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace Treasury {
  export type ProductInfoStruct = {
    name: string;
    minInvestment: BigNumberish;
    maxInvestment: BigNumberish;
    apr: BigNumberish;
    duration: BigNumberish;
    isActive: boolean;
  };

  export type ProductInfoStructOutput = [
    name: string,
    minInvestment: bigint,
    maxInvestment: bigint,
    apr: bigint,
    duration: bigint,
    isActive: boolean
  ] & {
    name: string;
    minInvestment: bigint;
    maxInvestment: bigint;
    apr: bigint;
    duration: bigint;
    isActive: boolean;
  };
}

export interface TreasuryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "OPERATOR_ROLE"
      | "PAUSER_ROLE"
      | "UPGRADE_INTERFACE_VERSION"
      | "WITHDRAWER_ROLE"
      | "batchDeposit"
      | "claimPeriodReward"
      | "claimReferralCommission"
      | "currentRewardPeriod"
      | "dailyWithdrawLimit"
      | "dailyWithdrawn"
      | "deposit"
      | "emergencyWithdraw(address,uint256)"
      | "emergencyWithdraw()"
      | "ethToUsdtRate"
      | "getBalance"
      | "getCurrentPriceInfo"
      | "getETHBalance"
      | "getPeriodRewardInfo"
      | "getProductInfo"
      | "getRoleAdmin"
      | "getTodayWithdrawn"
      | "getTotalETHDeposits"
      | "getUserDeposits"
      | "getUserETHDeposits"
      | "getUserInvestments"
      | "getUserReferralInfo"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "lastPriceUpdate"
      | "lastRewardTime"
      | "pause"
      | "paused"
      | "periodRewards"
      | "priceValidityPeriod"
      | "products"
      | "proxiableUUID"
      | "purchaseProduct"
      | "purchaseProductWithETH"
      | "purchaseProductWithReferral"
      | "qaCard"
      | "referralCommissionRate"
      | "referralCommissions"
      | "renounceRole"
      | "revokeRole"
      | "rewardPeriodDuration"
      | "setQACard"
      | "setReferralCommissionRate"
      | "setReferrer"
      | "setWithdrawLimits"
      | "singleWithdrawLimit"
      | "startRewardPeriod"
      | "supportsInterface"
      | "totalDeposits"
      | "totalEthDeposits"
      | "totalReferrals"
      | "totalRewardPool"
      | "totalWithdrawals"
      | "unpause"
      | "updateDailyWithdrawalLimit"
      | "updateETHPrice"
      | "updateProduct"
      | "upgradeToAndCall"
      | "usdtToken"
      | "userDeposits"
      | "userEthDeposits"
      | "userReferrers"
      | "userRewardsClaimed"
      | "withdraw(address,uint256,bytes32)"
      | "withdraw(uint256)"
      | "withdrawETH"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BatchDeposit"
      | "Deposited"
      | "ETHDeposited"
      | "EmergencyWithdraw"
      | "Initialized"
      | "LimitsUpdated"
      | "Paused"
      | "PriceUpdated"
      | "ProductPurchased"
      | "ProductPurchasedWithETH"
      | "ProductUpdated"
      | "ReferralCommissionPaid"
      | "ReferralSet"
      | "RewardClaimed"
      | "RewardPeriodStarted"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "Unpaused"
      | "Upgraded"
      | "Withdrawal"
      | "Withdrawn"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WITHDRAWER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batchDeposit",
    values: [BigNumberish[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimPeriodReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReferralCommission",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentRewardPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dailyWithdrawLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dailyWithdrawn",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ethToUsdtRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPriceInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getETHBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPeriodRewardInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProductInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTodayWithdrawn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalETHDeposits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserDeposits",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserETHDeposits",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserInvestments",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserReferralInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "lastPriceUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastRewardTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "periodRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "priceValidityPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "products",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseProduct",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseProductWithETH",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseProductWithReferral",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "qaCard", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "referralCommissionRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "referralCommissions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPeriodDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setQACard",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setReferralCommissionRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReferrer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawLimits",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "singleWithdrawLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startRewardPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalDeposits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalEthDeposits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalReferrals",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalRewardPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalWithdrawals",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateDailyWithdrawalLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateETHPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProduct",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "usdtToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userDeposits",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userEthDeposits",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userReferrers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userRewardsClaimed",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw(address,uint256,bytes32)",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawETH",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAUSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WITHDRAWER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimPeriodReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReferralCommission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRewardPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dailyWithdrawLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dailyWithdrawn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ethToUsdtRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPriceInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getETHBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPeriodRewardInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProductInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTodayWithdrawn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalETHDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserETHDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserInvestments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserReferralInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastPriceUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastRewardTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "periodRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceValidityPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "products", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchaseProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchaseProductWithETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchaseProductWithReferral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "qaCard", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "referralCommissionRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referralCommissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardPeriodDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setQACard", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setReferralCommissionRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReferrer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "singleWithdrawLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startRewardPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalEthDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalReferrals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRewardPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateDailyWithdrawalLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateETHPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdtToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userEthDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userReferrers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userRewardsClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdraw(address,uint256,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdraw(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH",
    data: BytesLike
  ): Result;
}

export namespace BatchDepositEvent {
  export type InputTuple = [
    user: AddressLike,
    totalAmount: BigNumberish,
    count: BigNumberish
  ];
  export type OutputTuple = [user: string, totalAmount: bigint, count: bigint];
  export interface OutputObject {
    user: string;
    totalAmount: bigint;
    count: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositedEvent {
  export type InputTuple = [
    user: AddressLike,
    amount: BigNumberish,
    orderId: BytesLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    amount: bigint,
    orderId: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    user: string;
    amount: bigint;
    orderId: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ETHDepositedEvent {
  export type InputTuple = [
    user: AddressLike,
    amount: BigNumberish,
    orderId: BytesLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    amount: bigint,
    orderId: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    user: string;
    amount: bigint;
    orderId: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyWithdrawEvent {
  export type InputTuple = [
    to: AddressLike,
    amount: BigNumberish,
    operator: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    to: string,
    amount: bigint,
    operator: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    to: string;
    amount: bigint;
    operator: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LimitsUpdatedEvent {
  export type InputTuple = [
    dailyLimit: BigNumberish,
    singleLimit: BigNumberish,
    operator: AddressLike
  ];
  export type OutputTuple = [
    dailyLimit: bigint,
    singleLimit: bigint,
    operator: string
  ];
  export interface OutputObject {
    dailyLimit: bigint;
    singleLimit: bigint;
    operator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceUpdatedEvent {
  export type InputTuple = [
    newRate: BigNumberish,
    timestamp: BigNumberish,
    operator: AddressLike
  ];
  export type OutputTuple = [
    newRate: bigint,
    timestamp: bigint,
    operator: string
  ];
  export interface OutputObject {
    newRate: bigint;
    timestamp: bigint;
    operator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProductPurchasedEvent {
  export type InputTuple = [
    user: AddressLike,
    productType: BigNumberish,
    amount: BigNumberish,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    productType: bigint,
    amount: bigint,
    tokenId: bigint
  ];
  export interface OutputObject {
    user: string;
    productType: bigint;
    amount: bigint;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProductPurchasedWithETHEvent {
  export type InputTuple = [
    user: AddressLike,
    productType: BigNumberish,
    ethAmount: BigNumberish,
    tokenId: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    productType: bigint,
    ethAmount: bigint,
    tokenId: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    user: string;
    productType: bigint;
    ethAmount: bigint;
    tokenId: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProductUpdatedEvent {
  export type InputTuple = [
    productType: BigNumberish,
    name: string,
    minInvestment: BigNumberish,
    maxInvestment: BigNumberish,
    apr: BigNumberish,
    duration: BigNumberish,
    isActive: boolean
  ];
  export type OutputTuple = [
    productType: bigint,
    name: string,
    minInvestment: bigint,
    maxInvestment: bigint,
    apr: bigint,
    duration: bigint,
    isActive: boolean
  ];
  export interface OutputObject {
    productType: bigint;
    name: string;
    minInvestment: bigint;
    maxInvestment: bigint;
    apr: bigint;
    duration: bigint;
    isActive: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReferralCommissionPaidEvent {
  export type InputTuple = [
    referrer: AddressLike,
    user: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    referrer: string,
    user: string,
    amount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    referrer: string;
    user: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReferralSetEvent {
  export type InputTuple = [
    user: AddressLike,
    referrer: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [user: string, referrer: string, timestamp: bigint];
  export interface OutputObject {
    user: string;
    referrer: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardClaimedEvent {
  export type InputTuple = [
    user: AddressLike,
    period: BigNumberish,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    period: bigint,
    amount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    user: string;
    period: bigint;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardPeriodStartedEvent {
  export type InputTuple = [
    period: BigNumberish,
    totalReward: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    period: bigint,
    totalReward: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    period: bigint;
    totalReward: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalEvent {
  export type InputTuple = [
    to: AddressLike,
    amount: BigNumberish,
    operator: AddressLike,
    reason: BytesLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    to: string,
    amount: bigint,
    operator: string,
    reason: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    to: string;
    amount: bigint;
    operator: string;
    reason: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawnEvent {
  export type InputTuple = [
    to: AddressLike,
    amount: BigNumberish,
    operator: AddressLike,
    reason: BytesLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    to: string,
    amount: bigint,
    operator: string,
    reason: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    to: string;
    amount: bigint;
    operator: string;
    reason: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Treasury extends BaseContract {
  connect(runner?: ContractRunner | null): Treasury;
  waitForDeployment(): Promise<this>;

  interface: TreasuryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  OPERATOR_ROLE: TypedContractMethod<[], [string], "view">;

  PAUSER_ROLE: TypedContractMethod<[], [string], "view">;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  WITHDRAWER_ROLE: TypedContractMethod<[], [string], "view">;

  batchDeposit: TypedContractMethod<
    [amounts: BigNumberish[], orderIds: BytesLike[]],
    [void],
    "nonpayable"
  >;

  claimPeriodReward: TypedContractMethod<
    [period: BigNumberish],
    [void],
    "nonpayable"
  >;

  claimReferralCommission: TypedContractMethod<[], [void], "nonpayable">;

  currentRewardPeriod: TypedContractMethod<[], [bigint], "view">;

  dailyWithdrawLimit: TypedContractMethod<[], [bigint], "view">;

  dailyWithdrawn: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  deposit: TypedContractMethod<
    [amount: BigNumberish, orderId: BytesLike],
    [void],
    "nonpayable"
  >;

  "emergencyWithdraw(address,uint256)": TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  "emergencyWithdraw()": TypedContractMethod<[], [void], "nonpayable">;

  ethToUsdtRate: TypedContractMethod<[], [bigint], "view">;

  getBalance: TypedContractMethod<[], [bigint], "view">;

  getCurrentPriceInfo: TypedContractMethod<
    [],
    [
      [bigint, bigint, boolean] & {
        rate: bigint;
        lastUpdate: bigint;
        isValid: boolean;
      }
    ],
    "view"
  >;

  getETHBalance: TypedContractMethod<[], [bigint], "view">;

  getPeriodRewardInfo: TypedContractMethod<
    [period: BigNumberish],
    [[bigint, boolean] & { totalReward: bigint; claimed: boolean }],
    "view"
  >;

  getProductInfo: TypedContractMethod<
    [productType: BigNumberish],
    [Treasury.ProductInfoStructOutput],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getTodayWithdrawn: TypedContractMethod<[], [bigint], "view">;

  getTotalETHDeposits: TypedContractMethod<[], [bigint], "view">;

  getUserDeposits: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getUserETHDeposits: TypedContractMethod<
    [user: AddressLike],
    [bigint],
    "view"
  >;

  getUserInvestments: TypedContractMethod<
    [user: AddressLike],
    [bigint],
    "view"
  >;

  getUserReferralInfo: TypedContractMethod<
    [user: AddressLike],
    [
      [string, bigint, bigint] & {
        referrer: string;
        commissionEarned: bigint;
        totalReferredUsers: bigint;
      }
    ],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [_usdtToken: AddressLike, _admin: AddressLike, _operators: AddressLike[]],
    [void],
    "nonpayable"
  >;

  lastPriceUpdate: TypedContractMethod<[], [bigint], "view">;

  lastRewardTime: TypedContractMethod<[], [bigint], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  periodRewards: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  priceValidityPeriod: TypedContractMethod<[], [bigint], "view">;

  products: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, boolean] & {
        name: string;
        minInvestment: bigint;
        maxInvestment: bigint;
        apr: bigint;
        duration: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  purchaseProduct: TypedContractMethod<
    [productType: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  purchaseProductWithETH: TypedContractMethod<
    [productType: BigNumberish],
    [void],
    "payable"
  >;

  purchaseProductWithReferral: TypedContractMethod<
    [productType: BigNumberish, amount: BigNumberish, referrer: AddressLike],
    [void],
    "nonpayable"
  >;

  qaCard: TypedContractMethod<[], [string], "view">;

  referralCommissionRate: TypedContractMethod<[], [bigint], "view">;

  referralCommissions: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  rewardPeriodDuration: TypedContractMethod<[], [bigint], "view">;

  setQACard: TypedContractMethod<[_qaCard: AddressLike], [void], "nonpayable">;

  setReferralCommissionRate: TypedContractMethod<
    [rate: BigNumberish],
    [void],
    "nonpayable"
  >;

  setReferrer: TypedContractMethod<
    [referrer: AddressLike],
    [void],
    "nonpayable"
  >;

  setWithdrawLimits: TypedContractMethod<
    [_dailyLimit: BigNumberish, _singleLimit: BigNumberish],
    [void],
    "nonpayable"
  >;

  singleWithdrawLimit: TypedContractMethod<[], [bigint], "view">;

  startRewardPeriod: TypedContractMethod<
    [rewardAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  totalDeposits: TypedContractMethod<[], [bigint], "view">;

  totalEthDeposits: TypedContractMethod<[], [bigint], "view">;

  totalReferrals: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  totalRewardPool: TypedContractMethod<[], [bigint], "view">;

  totalWithdrawals: TypedContractMethod<[], [bigint], "view">;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateDailyWithdrawalLimit: TypedContractMethod<
    [_dailyLimit: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateETHPrice: TypedContractMethod<
    [newRate: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateProduct: TypedContractMethod<
    [
      productType: BigNumberish,
      name: string,
      minInvestment: BigNumberish,
      maxInvestment: BigNumberish,
      apr: BigNumberish,
      duration: BigNumberish,
      isActive: boolean
    ],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  usdtToken: TypedContractMethod<[], [string], "view">;

  userDeposits: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  userEthDeposits: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  userReferrers: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  userRewardsClaimed: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;

  "withdraw(address,uint256,bytes32)": TypedContractMethod<
    [to: AddressLike, amount: BigNumberish, reason: BytesLike],
    [void],
    "nonpayable"
  >;

  "withdraw(uint256)": TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawETH: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "OPERATOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PAUSER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "WITHDRAWER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "batchDeposit"
  ): TypedContractMethod<
    [amounts: BigNumberish[], orderIds: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimPeriodReward"
  ): TypedContractMethod<[period: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimReferralCommission"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "currentRewardPeriod"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "dailyWithdrawLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "dailyWithdrawn"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [amount: BigNumberish, orderId: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyWithdraw(address,uint256)"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyWithdraw()"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "ethToUsdtRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCurrentPriceInfo"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, boolean] & {
        rate: bigint;
        lastUpdate: bigint;
        isValid: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getETHBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPeriodRewardInfo"
  ): TypedContractMethod<
    [period: BigNumberish],
    [[bigint, boolean] & { totalReward: bigint; claimed: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProductInfo"
  ): TypedContractMethod<
    [productType: BigNumberish],
    [Treasury.ProductInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getTodayWithdrawn"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalETHDeposits"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserDeposits"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserETHDeposits"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserInvestments"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserReferralInfo"
  ): TypedContractMethod<
    [user: AddressLike],
    [
      [string, bigint, bigint] & {
        referrer: string;
        commissionEarned: bigint;
        totalReferredUsers: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_usdtToken: AddressLike, _admin: AddressLike, _operators: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lastPriceUpdate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastRewardTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "periodRewards"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "priceValidityPeriod"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "products"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, boolean] & {
        name: string;
        minInvestment: bigint;
        maxInvestment: bigint;
        apr: bigint;
        duration: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "purchaseProduct"
  ): TypedContractMethod<
    [productType: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "purchaseProductWithETH"
  ): TypedContractMethod<[productType: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "purchaseProductWithReferral"
  ): TypedContractMethod<
    [productType: BigNumberish, amount: BigNumberish, referrer: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "qaCard"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "referralCommissionRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "referralCommissions"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rewardPeriodDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setQACard"
  ): TypedContractMethod<[_qaCard: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setReferralCommissionRate"
  ): TypedContractMethod<[rate: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setReferrer"
  ): TypedContractMethod<[referrer: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setWithdrawLimits"
  ): TypedContractMethod<
    [_dailyLimit: BigNumberish, _singleLimit: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "singleWithdrawLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "startRewardPeriod"
  ): TypedContractMethod<[rewardAmount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "totalDeposits"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalEthDeposits"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalReferrals"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalRewardPool"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalWithdrawals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateDailyWithdrawalLimit"
  ): TypedContractMethod<[_dailyLimit: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateETHPrice"
  ): TypedContractMethod<[newRate: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateProduct"
  ): TypedContractMethod<
    [
      productType: BigNumberish,
      name: string,
      minInvestment: BigNumberish,
      maxInvestment: BigNumberish,
      apr: BigNumberish,
      duration: BigNumberish,
      isActive: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "usdtToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "userDeposits"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "userEthDeposits"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "userReferrers"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "userRewardsClaimed"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdraw(address,uint256,bytes32)"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish, reason: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw(uint256)"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawETH"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "BatchDeposit"
  ): TypedContractEvent<
    BatchDepositEvent.InputTuple,
    BatchDepositEvent.OutputTuple,
    BatchDepositEvent.OutputObject
  >;
  getEvent(
    key: "Deposited"
  ): TypedContractEvent<
    DepositedEvent.InputTuple,
    DepositedEvent.OutputTuple,
    DepositedEvent.OutputObject
  >;
  getEvent(
    key: "ETHDeposited"
  ): TypedContractEvent<
    ETHDepositedEvent.InputTuple,
    ETHDepositedEvent.OutputTuple,
    ETHDepositedEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyWithdraw"
  ): TypedContractEvent<
    EmergencyWithdrawEvent.InputTuple,
    EmergencyWithdrawEvent.OutputTuple,
    EmergencyWithdrawEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "LimitsUpdated"
  ): TypedContractEvent<
    LimitsUpdatedEvent.InputTuple,
    LimitsUpdatedEvent.OutputTuple,
    LimitsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PriceUpdated"
  ): TypedContractEvent<
    PriceUpdatedEvent.InputTuple,
    PriceUpdatedEvent.OutputTuple,
    PriceUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ProductPurchased"
  ): TypedContractEvent<
    ProductPurchasedEvent.InputTuple,
    ProductPurchasedEvent.OutputTuple,
    ProductPurchasedEvent.OutputObject
  >;
  getEvent(
    key: "ProductPurchasedWithETH"
  ): TypedContractEvent<
    ProductPurchasedWithETHEvent.InputTuple,
    ProductPurchasedWithETHEvent.OutputTuple,
    ProductPurchasedWithETHEvent.OutputObject
  >;
  getEvent(
    key: "ProductUpdated"
  ): TypedContractEvent<
    ProductUpdatedEvent.InputTuple,
    ProductUpdatedEvent.OutputTuple,
    ProductUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ReferralCommissionPaid"
  ): TypedContractEvent<
    ReferralCommissionPaidEvent.InputTuple,
    ReferralCommissionPaidEvent.OutputTuple,
    ReferralCommissionPaidEvent.OutputObject
  >;
  getEvent(
    key: "ReferralSet"
  ): TypedContractEvent<
    ReferralSetEvent.InputTuple,
    ReferralSetEvent.OutputTuple,
    ReferralSetEvent.OutputObject
  >;
  getEvent(
    key: "RewardClaimed"
  ): TypedContractEvent<
    RewardClaimedEvent.InputTuple,
    RewardClaimedEvent.OutputTuple,
    RewardClaimedEvent.OutputObject
  >;
  getEvent(
    key: "RewardPeriodStarted"
  ): TypedContractEvent<
    RewardPeriodStartedEvent.InputTuple,
    RewardPeriodStartedEvent.OutputTuple,
    RewardPeriodStartedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawal"
  ): TypedContractEvent<
    WithdrawalEvent.InputTuple,
    WithdrawalEvent.OutputTuple,
    WithdrawalEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawn"
  ): TypedContractEvent<
    WithdrawnEvent.InputTuple,
    WithdrawnEvent.OutputTuple,
    WithdrawnEvent.OutputObject
  >;

  filters: {
    "BatchDeposit(address,uint256,uint256)": TypedContractEvent<
      BatchDepositEvent.InputTuple,
      BatchDepositEvent.OutputTuple,
      BatchDepositEvent.OutputObject
    >;
    BatchDeposit: TypedContractEvent<
      BatchDepositEvent.InputTuple,
      BatchDepositEvent.OutputTuple,
      BatchDepositEvent.OutputObject
    >;

    "Deposited(address,uint256,bytes32,uint256)": TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;
    Deposited: TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;

    "ETHDeposited(address,uint256,bytes32,uint256)": TypedContractEvent<
      ETHDepositedEvent.InputTuple,
      ETHDepositedEvent.OutputTuple,
      ETHDepositedEvent.OutputObject
    >;
    ETHDeposited: TypedContractEvent<
      ETHDepositedEvent.InputTuple,
      ETHDepositedEvent.OutputTuple,
      ETHDepositedEvent.OutputObject
    >;

    "EmergencyWithdraw(address,uint256,address,uint256)": TypedContractEvent<
      EmergencyWithdrawEvent.InputTuple,
      EmergencyWithdrawEvent.OutputTuple,
      EmergencyWithdrawEvent.OutputObject
    >;
    EmergencyWithdraw: TypedContractEvent<
      EmergencyWithdrawEvent.InputTuple,
      EmergencyWithdrawEvent.OutputTuple,
      EmergencyWithdrawEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "LimitsUpdated(uint256,uint256,address)": TypedContractEvent<
      LimitsUpdatedEvent.InputTuple,
      LimitsUpdatedEvent.OutputTuple,
      LimitsUpdatedEvent.OutputObject
    >;
    LimitsUpdated: TypedContractEvent<
      LimitsUpdatedEvent.InputTuple,
      LimitsUpdatedEvent.OutputTuple,
      LimitsUpdatedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PriceUpdated(uint256,uint256,address)": TypedContractEvent<
      PriceUpdatedEvent.InputTuple,
      PriceUpdatedEvent.OutputTuple,
      PriceUpdatedEvent.OutputObject
    >;
    PriceUpdated: TypedContractEvent<
      PriceUpdatedEvent.InputTuple,
      PriceUpdatedEvent.OutputTuple,
      PriceUpdatedEvent.OutputObject
    >;

    "ProductPurchased(address,uint8,uint256,uint256)": TypedContractEvent<
      ProductPurchasedEvent.InputTuple,
      ProductPurchasedEvent.OutputTuple,
      ProductPurchasedEvent.OutputObject
    >;
    ProductPurchased: TypedContractEvent<
      ProductPurchasedEvent.InputTuple,
      ProductPurchasedEvent.OutputTuple,
      ProductPurchasedEvent.OutputObject
    >;

    "ProductPurchasedWithETH(address,uint8,uint256,uint256,uint256)": TypedContractEvent<
      ProductPurchasedWithETHEvent.InputTuple,
      ProductPurchasedWithETHEvent.OutputTuple,
      ProductPurchasedWithETHEvent.OutputObject
    >;
    ProductPurchasedWithETH: TypedContractEvent<
      ProductPurchasedWithETHEvent.InputTuple,
      ProductPurchasedWithETHEvent.OutputTuple,
      ProductPurchasedWithETHEvent.OutputObject
    >;

    "ProductUpdated(uint8,string,uint256,uint256,uint256,uint256,bool)": TypedContractEvent<
      ProductUpdatedEvent.InputTuple,
      ProductUpdatedEvent.OutputTuple,
      ProductUpdatedEvent.OutputObject
    >;
    ProductUpdated: TypedContractEvent<
      ProductUpdatedEvent.InputTuple,
      ProductUpdatedEvent.OutputTuple,
      ProductUpdatedEvent.OutputObject
    >;

    "ReferralCommissionPaid(address,address,uint256,uint256)": TypedContractEvent<
      ReferralCommissionPaidEvent.InputTuple,
      ReferralCommissionPaidEvent.OutputTuple,
      ReferralCommissionPaidEvent.OutputObject
    >;
    ReferralCommissionPaid: TypedContractEvent<
      ReferralCommissionPaidEvent.InputTuple,
      ReferralCommissionPaidEvent.OutputTuple,
      ReferralCommissionPaidEvent.OutputObject
    >;

    "ReferralSet(address,address,uint256)": TypedContractEvent<
      ReferralSetEvent.InputTuple,
      ReferralSetEvent.OutputTuple,
      ReferralSetEvent.OutputObject
    >;
    ReferralSet: TypedContractEvent<
      ReferralSetEvent.InputTuple,
      ReferralSetEvent.OutputTuple,
      ReferralSetEvent.OutputObject
    >;

    "RewardClaimed(address,uint256,uint256,uint256)": TypedContractEvent<
      RewardClaimedEvent.InputTuple,
      RewardClaimedEvent.OutputTuple,
      RewardClaimedEvent.OutputObject
    >;
    RewardClaimed: TypedContractEvent<
      RewardClaimedEvent.InputTuple,
      RewardClaimedEvent.OutputTuple,
      RewardClaimedEvent.OutputObject
    >;

    "RewardPeriodStarted(uint256,uint256,uint256)": TypedContractEvent<
      RewardPeriodStartedEvent.InputTuple,
      RewardPeriodStartedEvent.OutputTuple,
      RewardPeriodStartedEvent.OutputObject
    >;
    RewardPeriodStarted: TypedContractEvent<
      RewardPeriodStartedEvent.InputTuple,
      RewardPeriodStartedEvent.OutputTuple,
      RewardPeriodStartedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;

    "Withdrawal(address,uint256,address,bytes32,uint256)": TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
    Withdrawal: TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;

    "Withdrawn(address,uint256,address,bytes32,uint256)": TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
    Withdrawn: TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
  };
}
