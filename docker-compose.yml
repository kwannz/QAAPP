version: '3.8'

services:
  # PostgreSQL 数据库
  postgres:
    image: postgres:16-alpine
    container_name: qa-app-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: qa_app_dev
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis 缓存和队列
  redis:
    image: redis:7-alpine
    container_name: qa-app-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass redis
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "auth", "redis", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Hardhat 本地区块链网络 (开发环境)
  hardhat:
    build:
      context: ./packages/contracts
      dockerfile: Dockerfile.dev
    container_name: qa-app-hardhat
    restart: unless-stopped
    ports:
      - "8545:8545"
    volumes:
      - ./packages/contracts:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
    command: npx hardhat node --hostname 0.0.0.0

  # API 后端服务
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
      target: development
    container_name: qa-app-api
    restart: unless-stopped
    ports:
      - "3001:3001"
    volumes:
      - ./apps/api:/app/apps/api
      - ./packages:/app/packages
      - /app/node_modules
      - /app/apps/api/node_modules
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/qa_app_dev?schema=public
      - REDIS_URL=redis://redis:redis@redis:6379
      - JWT_SECRET=dev-jwt-secret-key
      - ENCRYPTION_KEY=dev-encryption-key-32-characters
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: pnpm run dev

  # Web 前端服务
  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
      target: development
    container_name: qa-app-web
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - ./apps/web:/app/apps/web
      - ./packages:/app/packages
      - /app/node_modules
      - /app/apps/web/node_modules
      - /app/apps/web/.next
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:3001
      - NEXT_PUBLIC_WS_URL=ws://localhost:3001
      - NEXT_PUBLIC_CHAIN_ID=31337
      - NEXT_PUBLIC_RPC_URL=http://localhost:8545
    depends_on:
      - api
      - hardhat
    command: pnpm run dev

  # 数据库管理界面 (可选)
  adminer:
    image: adminer:4.8.1
    container_name: qa-app-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres

  # Redis 管理界面 (可选)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: qa-app-redis-commander
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      REDIS_HOSTS: local:redis:6379:0:redis
    depends_on:
      - redis

  # 邮件服务器 (开发环境)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: qa-app-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    environment:
      MH_STORAGE: memory

  # Nginx 反向代理 (生产环境)
  nginx:
    image: nginx:alpine
    container_name: qa-app-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/ssl/certs:ro
    depends_on:
      - web
      - api
    profiles:
      - production

  # Prometheus 监控 (可选)
  prometheus:
    image: prom/prometheus:latest
    container_name: qa-app-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    profiles:
      - monitoring

  # Grafana 可视化 (可选)
  grafana:
    image: grafana/grafana:latest
    container_name: qa-app-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
    depends_on:
      - prometheus
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  default:
    name: qa-app-network
    driver: bridge