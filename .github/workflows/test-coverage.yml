name: Test Coverage

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-coverage:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
    
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
    
    - name: Get pnpm store directory
      id: pnpm-cache
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
    
    - name: Setup pnpm cache
      uses: actions/cache@v3
      with:
        path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Setup test environment
      run: |
        cp .env.test.example .env.test
        echo "DATABASE_URL=postgresql://testuser:testpass@localhost:5432/testdb" >> .env.test
        echo "REDIS_URL=redis://localhost:6379" >> .env.test
        echo "JWT_SECRET=test-secret-key" >> .env.test
        echo "NODE_ENV=test" >> .env.test
    
    - name: Run database migrations
      run: |
        cd packages/database
        npx prisma migrate deploy
        npx prisma generate
      env:
        DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
    
    - name: Run API tests with coverage
      run: |
        cd apps/api
        npm run test:cov
      env:
        DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-secret-key
        NODE_ENV: test
    
    - name: Run Web tests with coverage
      run: |
        cd apps/web
        npm test -- --coverage --watchAll=false
      env:
        NEXT_PUBLIC_API_URL: http://localhost:3001
        NODE_ENV: test
    
    - name: Run E2E tests
      run: |
        cd apps/api
        npm run test:e2e
      env:
        DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-secret-key
        NODE_ENV: test
    
    - name: Check coverage thresholds
      run: |
        cd apps/api
        npx nyc check-coverage --lines 100 --functions 100 --branches 100 --statements 100
    
    - name: Upload API coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./apps/api/coverage/lcov.info
        flags: api
        name: api-coverage
        fail_ci_if_error: true
    
    - name: Upload Web coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./apps/web/coverage/lcov.info
        flags: web
        name: web-coverage
        fail_ci_if_error: true
    
    - name: Generate coverage badge
      run: |
        COVERAGE=$(cat apps/api/coverage/coverage-summary.json | grep -o '"pct":[0-9.]*' | head -1 | cut -d: -f2)
        echo "Coverage: ${COVERAGE}%"
        if (( $(echo "$COVERAGE >= 100" | bc -l) )); then
          echo "✅ Coverage target met: 100%"
        else
          echo "❌ Coverage below target: ${COVERAGE}% < 100%"
          exit 1
        fi
    
    - name: Comment PR with coverage
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const coverage = JSON.parse(fs.readFileSync('apps/api/coverage/coverage-summary.json', 'utf8'));
          const total = coverage.total;
          
          const comment = `## 📊 测试覆盖率报告
          
          | 类型 | 覆盖率 | 目标 |
          |------|--------|------|
          | 语句 | ${total.statements.pct}% | 100% |
          | 分支 | ${total.branches.pct}% | 100% |
          | 函数 | ${total.functions.pct}% | 100% |
          | 行数 | ${total.lines.pct}% | 100% |
          
          ${total.statements.pct >= 100 ? '✅ 覆盖率已达到100%目标！' : '⚠️ 覆盖率未达到100%目标'}`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
    
    - name: Archive coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-reports
        path: |
          apps/api/coverage/
          apps/web/coverage/
        retention-days: 30