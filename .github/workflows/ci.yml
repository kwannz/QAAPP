name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # 代码质量检查
  lint-and-test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run ESLint
      run: npm run lint
      
    - name: Run TypeScript check
      run: npm run type-check
      
    - name: Run tests
      run: npm run test
      env:
        CI: true
        
    - name: Run build test
      run: npm run build

  # 安全扫描
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run npm audit
      run: npm audit --audit-level=moderate
      continue-on-error: true
      
    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: javascript,typescript
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  # 智能合约测试
  contract-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      working-directory: ./packages/contracts
      run: npm ci
      
    - name: Run Hardhat tests
      working-directory: ./packages/contracts
      run: npx hardhat test
      
    - name: Run coverage
      working-directory: ./packages/contracts
      run: npx hardhat coverage
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        directory: ./packages/contracts/coverage

  # 前端构建和部署测试
  frontend-build:
    runs-on: ubuntu-latest
    needs: [lint-and-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build frontend
      run: npm run build:web
      env:
        NEXT_PUBLIC_APP_URL: ${{ secrets.NEXT_PUBLIC_APP_URL }}
        NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: apps/web/.next/
        
  # 后端构建和测试
  backend-build:
    runs-on: ubuntu-latest
    needs: [lint-and-test]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: qaapp_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Generate Prisma client
      working-directory: ./apps/api
      run: npx prisma generate
      
    - name: Run database migrations
      working-directory: ./apps/api
      run: npx prisma db push
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/qaapp_test
        
    - name: Build backend
      run: npm run build:api
      
    - name: Run backend tests
      run: npm run test:api
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/qaapp_test
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-secret
        
    - name: Upload backend artifacts
      uses: actions/upload-artifact@v4
      with:
        name: backend-build
        path: apps/api/dist/

  # Docker构建
  docker-build:
    runs-on: ubuntu-latest
    needs: [frontend-build, backend-build]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./apps/web/Dockerfile
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/qa-app-frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./apps/api/Dockerfile
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/qa-app-backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 部署到预览环境
  deploy-preview:
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Deploy to preview environment
      run: |
        echo "Deploying to preview environment..."
        # 这里可以添加部署到预览环境的脚本
        
  # 部署到生产环境
  deploy-production:
    runs-on: ubuntu-latest
    needs: [docker-build, security-scan, contract-tests]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # 这里可以添加部署到生产环境的脚本
        
    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()