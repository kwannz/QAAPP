name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  release:
    types: [published]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8.15.6'
  REGISTRY: ghcr.io
  IMAGE_NAME_API: ${{ github.repository }}/api
  IMAGE_NAME_WEB: ${{ github.repository }}/web

jobs:
  # 代码质量检查
  lint-and-test:
    name: 代码质量检查
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 安装 pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 获取 pnpm store 目录
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: 缓存 pnpm store
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 安装依赖
        run: pnpm install --frozen-lockfile

      - name: 代码格式检查
        run: pnpm run lint

      - name: 类型检查
        run: pnpm run type-check

      - name: 单元测试
        run: pnpm run test
        env:
          CI: true

      - name: 上传测试覆盖率
        uses: codecov/codecov-action@v3
        if: always()
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # 安全扫描
  security-scan:
    name: 安全扫描
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 运行 Trivy 漏洞扫描
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 上传 Trivy 扫描结果
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: npm 审计
        run: npm audit --audit-level=high

  # 构建镜像
  build-images:
    name: 构建 Docker 镜像
    runs-on: ubuntu-latest
    needs: [lint-and-test, security-scan]
    timeout-minutes: 45
    
    strategy:
      matrix:
        service: [api, web]
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 登录 Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 提取元数据
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 构建并推送镜像
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/${{ matrix.service }}/Dockerfile
          target: production
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD_VERSION=${{ github.ref_name }}
            BUILD_TIME=${{ github.event.head_commit.timestamp }}
            COMMIT_SHA=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # E2E 测试
  e2e-test:
    name: 端到端测试
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.event_name != 'release'
    timeout-minutes: 30

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: qa_app_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 安装 pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 安装依赖
        run: pnpm install --frozen-lockfile

      - name: 运行数据库迁移
        run: pnpm --filter @qa-app/database run db:migrate:deploy
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/qa_app_test

      - name: 启动服务
        run: |
          pnpm --filter @qa-app/api run start:prod &
          pnpm --filter @qa-app/web run start &
          sleep 30
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/qa_app_test
          REDIS_URL: redis://localhost:6379

      - name: 运行 E2E 测试
        run: pnpm run test:e2e
        env:
          BASE_URL: http://localhost:3000

      - name: 上传 E2E 测试结果
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results
          path: test-results/

  # 部署到测试环境
  deploy-staging:
    name: 部署到测试环境
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    timeout-minutes: 15

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 部署到 Kubernetes
        uses: azure/k8s-deploy@v1
        with:
          namespace: 'qa-app-staging'
          manifests: |
            k8s/staging/
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_API }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_WEB }}:${{ github.sha }}
          kubectl-version: 'latest'

      - name: 健康检查
        run: |
          echo "等待部署完成..."
          sleep 60
          curl -f ${{ secrets.STAGING_API_URL }}/health
          curl -f ${{ secrets.STAGING_WEB_URL }}/

  # 部署到生产环境
  deploy-production:
    name: 部署到生产环境
    runs-on: ubuntu-latest
    needs: [build-images, e2e-test]
    if: github.event_name == 'release'
    environment: production
    timeout-minutes: 20

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 部署到 Kubernetes
        uses: azure/k8s-deploy@v1
        with:
          namespace: 'qa-app-production'
          manifests: |
            k8s/production/
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_API }}:${{ github.event.release.tag_name }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_WEB }}:${{ github.event.release.tag_name }}
          kubectl-version: 'latest'

      - name: 健康检查
        run: |
          echo "等待部署完成..."
          sleep 60
          curl -f ${{ secrets.PRODUCTION_API_URL }}/health
          curl -f ${{ secrets.PRODUCTION_WEB_URL }}/

      - name: 发送部署通知
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()

  # 性能测试
  performance-test:
    name: 性能测试
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.event_name == 'release'
    timeout-minutes: 30

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 运行 Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            ${{ secrets.PRODUCTION_WEB_URL }}
            ${{ secrets.PRODUCTION_WEB_URL }}/products
            ${{ secrets.PRODUCTION_WEB_URL }}/dashboard
          configPath: '.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: 运行压力测试
        run: |
          npm install -g artillery
          artillery run performance/load-test.yml
        env:
          TARGET_URL: ${{ secrets.PRODUCTION_API_URL }}

  # 安全合规检查
  compliance-check:
    name: 安全合规检查
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.event_name == 'release'
    timeout-minutes: 20

    steps:
      - name: SSL/TLS 检查
        run: |
          echo "检查 SSL 证书..."
          echo | openssl s_client -connect ${{ secrets.PRODUCTION_DOMAIN }}:443 -servername ${{ secrets.PRODUCTION_DOMAIN }} 2>/dev/null | openssl x509 -noout -dates

      - name: 安全头部检查
        run: |
          echo "检查安全头部..."
          curl -I ${{ secrets.PRODUCTION_WEB_URL }} | grep -E "(X-Frame-Options|X-Content-Type-Options|Strict-Transport-Security)"

      - name: API 端点检查
        run: |
          echo "检查 API 端点安全性..."
          curl -f ${{ secrets.PRODUCTION_API_URL }}/health
          # 确保未授权访问返回 401
          curl -o /dev/null -s -w "%{http_code}\n" ${{ secrets.PRODUCTION_API_URL }}/users/me | grep -q "401"