# QA投资平台 - Nginx优化配置
# 针对高性能和安全性的生产级配置

user nginx;
worker_processes auto;  # 自动检测CPU核心数
worker_rlimit_nofile 65535;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# 事件处理优化
events {
    worker_connections 4096;  # 每个worker进程的最大连接数
    use epoll;               # 使用epoll事件模型 (Linux)
    multi_accept on;         # 一次接受多个连接
    accept_mutex off;        # 关闭accept锁，提高性能
}

http {
    # 基本设置
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # 字符集
    charset utf-8;
    
    # 日志格式优化
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                   '$status $body_bytes_sent "$http_referer" '
                   '"$http_user_agent" "$http_x_forwarded_for" '
                   'rt=$request_time uct="$upstream_connect_time" '
                   'uht="$upstream_header_time" urt="$upstream_response_time"';
    
    log_format json escape=json '{'
        '"time": "$time_iso8601",'
        '"remote_addr": "$remote_addr",'
        '"remote_user": "$remote_user",'
        '"request": "$request",'
        '"status": $status,'
        '"body_bytes_sent": $body_bytes_sent,'
        '"request_time": $request_time,'
        '"http_referrer": "$http_referer",'
        '"http_user_agent": "$http_user_agent",'
        '"http_x_forwarded_for": "$http_x_forwarded_for",'
        '"upstream_response_time": "$upstream_response_time",'
        '"upstream_connect_time": "$upstream_connect_time",'
        '"upstream_header_time": "$upstream_header_time"'
    '}';
    
    access_log /var/log/nginx/access.log json;
    
    # 性能优化
    sendfile on;                    # 启用零拷贝文件传输
    tcp_nopush on;                 # 在sendfile开启时使用
    tcp_nodelay on;                # 小包立即发送
    keepalive_timeout 30;          # 保持连接超时时间
    keepalive_requests 1000;       # 单个连接的最大请求数
    
    # 文件传输优化
    client_max_body_size 50m;      # 允许上传的最大文件大小
    client_body_buffer_size 128k;  # 客户端请求体缓冲区大小
    client_header_buffer_size 32k; # 客户端请求头缓冲区大小
    large_client_header_buffers 4 32k; # 大请求头缓冲区
    
    # 超时设置
    client_body_timeout 60s;       # 客户端请求体超时
    client_header_timeout 60s;     # 客户端请求头超时
    send_timeout 60s;              # 发送响应超时
    
    # 压缩设置
    gzip on;
    gzip_vary on;
    gzip_min_length 1k;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types
        text/plain
        text/css
        text/js
        text/xml
        text/javascript
        application/javascript
        application/json
        application/xml+rss
        application/atom+xml
        application/rdf+xml
        application/rss+xml
        application/x-javascript
        application/x-font-ttf
        application/vnd.ms-fontobject
        font/opentype
        image/svg+xml
        image/x-icon;
    
    # 缓存设置
    open_file_cache max=10000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;
    
    # 安全设置
    server_tokens off;             # 隐藏Nginx版本
    
    # 安全头设置
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
    
    # Rate Limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/s;
    limit_req_zone $binary_remote_addr zone=general:10m rate=30r/s;
    
    # 连接限制
    limit_conn_zone $binary_remote_addr zone=perip:10m;
    limit_conn_zone $server_name zone=perserver:10m;
    
    # SSL配置 (仅在HTTPS环境中启用)
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;
    
    # 上游服务器配置
    upstream api_backend {
        least_conn;                # 最少连接负载均衡
        server api:3001 max_fails=3 fail_timeout=30s;
        # 如果有多个API实例，可以添加更多server
        keepalive 32;              # 保持连接池
    }
    
    upstream web_backend {
        least_conn;
        server web:3000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    
    # 缓存区域定义
    proxy_cache_path /var/cache/nginx/api levels=1:2 keys_zone=api_cache:10m max_size=100m inactive=60m use_temp_path=off;
    proxy_cache_path /var/cache/nginx/static levels=1:2 keys_zone=static_cache:10m max_size=1g inactive=24h use_temp_path=off;
    
    # 主服务器配置
    server {
        listen 80;
        listen [::]:80;
        server_name _;
        
        # 连接限制
        limit_conn perip 20;
        limit_conn perserver 1000;
        
        # 根目录访问
        location / {
            limit_req zone=general burst=50 nodelay;
            
            proxy_pass http://web_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 代理超时设置
            proxy_connect_timeout 30s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # 缓存绕过
            proxy_cache_bypass $http_upgrade;
            
            # 错误页面处理
            proxy_intercept_errors on;
        }
        
        # API路由
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            
            # 移除/api前缀 (如果API不需要这个前缀)
            rewrite ^/api/(.*)$ /$1 break;
            
            proxy_pass http://api_backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # API代理超时设置
            proxy_connect_timeout 10s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # API缓存设置 (谨慎使用，大部分API不应该被缓存)
            proxy_cache api_cache;
            proxy_cache_valid 200 302 5m;
            proxy_cache_valid 404 1m;
            proxy_cache_key "$scheme$request_method$host$request_uri";
            proxy_cache_bypass $http_cache_control;
            add_header X-Proxy-Cache $upstream_cache_status;
            
            # CORS处理 (如果需要)
            add_header Access-Control-Allow-Origin * always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Accept, Authorization, Cache-Control, Content-Type, DNT, If-Modified-Since, Keep-Alive, Origin, User-Agent, X-Requested-With" always;
            
            if ($request_method = 'OPTIONS') {
                return 204;
            }
        }
        
        # 认证API特殊限制
        location /auth/ {
            limit_req zone=auth burst=10 nodelay;
            
            proxy_pass http://api_backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 认证接口不缓存
            proxy_no_cache 1;
            proxy_cache_bypass 1;
            
            # 超时设置
            proxy_connect_timeout 5s;
            proxy_send_timeout 15s;
            proxy_read_timeout 15s;
        }
        
        # 健康检查端点
        location /health {
            access_log off;
            proxy_pass http://api_backend/health;
            proxy_set_header Host $host;
            proxy_connect_timeout 1s;
            proxy_send_timeout 1s;
            proxy_read_timeout 1s;
        }
        
        # 静态文件缓存
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Vary Accept-Encoding;
            
            proxy_pass http://web_backend;
            proxy_cache static_cache;
            proxy_cache_valid 200 302 24h;
            proxy_cache_valid 404 1m;
            proxy_cache_key "$scheme$request_method$host$request_uri";
            add_header X-Cache-Status $upstream_cache_status;
        }
        
        # Next.js _next静态资源
        location /_next/static/ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            proxy_pass http://web_backend;
            proxy_cache static_cache;
            proxy_cache_valid 200 302 365d;
            proxy_cache_key "$scheme$request_method$host$request_uri";
        }
        
        # 文件上传处理
        location /upload {
            limit_req zone=general burst=5 nodelay;
            client_max_body_size 50m;
            
            proxy_pass http://api_backend/upload;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            
            # 上传超时设置
            proxy_connect_timeout 60s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
        }
        
        # 监控端点 (仅内部访问)
        location /monitoring {
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
            
            proxy_pass http://api_backend/monitoring;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }
        
        # WebSocket支持
        location /ws {
            proxy_pass http://api_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket特殊超时设置
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 600s;
        }
        
        # 安全文件保护
        location ~ /\. {
            deny all;
        }
        
        location ~ ^/(\.user.ini|\.htaccess|\.git|\.svn|\.project|LICENSE|README.md)$ {
            deny all;
        }
        
        # 错误页面
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /50x.html {
            root /usr/share/nginx/html;
        }
        
        location = /404.html {
            root /usr/share/nginx/html;
        }
    }
    
    # 状态监控页面 (可选)
    server {
        listen 8080;
        server_name _;
        
        # 仅允许内部访问
        allow 127.0.0.1;
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        deny all;
        
        location /nginx_status {
            stub_status on;
            access_log off;
        }
        
        location /api_status {
            proxy_pass http://api_backend/health;
        }
    }
}

# TCP/UDP 负载均衡 (如果需要)
# stream {
#     upstream backend {
#         server api:3001;
#     }
#     
#     server {
#         listen 1234;
#         proxy_pass backend;
#     }
# }