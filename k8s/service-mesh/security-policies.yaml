# 认证策略 - 全局mTLS
apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: default
  namespace: qa-app
spec:
  mtls:
    mode: STRICT

---
# 认证策略 - API服务JWT验证
apiVersion: security.istio.io/v1beta1
kind: RequestAuthentication
metadata:
  name: qa-app-api-jwt
  namespace: qa-app
spec:
  selector:
    matchLabels:
      app: qa-app-api
  jwtRules:
    - issuer: "https://auth.qa-app.com"
      jwksUri: "https://auth.qa-app.com/.well-known/jwks.json"
      audiences:
        - "qa-app-api"
      forwardOriginalToken: true
      fromHeaders:
        - name: "Authorization"
          prefix: "Bearer "
      fromParams:
        - "token"
      outputPayloadToHeader: "x-jwt-payload"

---
# 授权策略 - API访问控制
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: qa-app-api-authz
  namespace: qa-app
spec:
  selector:
    matchLabels:
      app: qa-app-api
  rules:
    # 允许健康检查
    - to:
        - operation:
            paths: ["/health", "/ready"]
    
    # 公开API访问
    - to:
        - operation:
            paths: ["/api/v1/public/*"]
    
    # 认证用户API访问
    - from:
        - source:
            requestPrincipals: ["https://auth.qa-app.com/*"]
      to:
        - operation:
            paths: ["/api/v1/users/*", "/api/v1/positions/*", "/api/v1/orders/*"]
      when:
        - key: request.auth.claims[role]
          values: ["user", "trader", "admin"]
    
    # 管理员API访问
    - from:
        - source:
            requestPrincipals: ["https://auth.qa-app.com/*"]
      to:
        - operation:
            paths: ["/api/v1/admin/*"]
      when:
        - key: request.auth.claims[role]
          values: ["admin"]
        - key: request.auth.claims[permissions]
          values: ["admin:read", "admin:write"]

---
# 授权策略 - 服务间通信控制
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: service-to-service-authz
  namespace: qa-app
spec:
  rules:
    # API服务访问数据库代理
    - from:
        - source:
            principals: ["cluster.local/ns/qa-app/sa/qa-app-api"]
      to:
        - operation:
            ports: ["5432"]
      when:
        - key: source.labels[app]
          values: ["qa-app-api"]
    
    # API服务访问Redis
    - from:
        - source:
            principals: ["cluster.local/ns/qa-app/sa/qa-app-api"]
      to:
        - operation:
            ports: ["6379"]
    
    # Web应用访问API服务
    - from:
        - source:
            principals: ["cluster.local/ns/qa-app/sa/qa-app-web"]
      to:
        - operation:
            methods: ["GET", "POST", "PUT", "DELETE"]
            ports: ["3001"]
      when:
        - key: source.labels[app]
          values: ["qa-app-web"]

---
# 授权策略 - 命名空间级别访问控制
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: namespace-boundary
  namespace: qa-app
spec:
  action: ALLOW
  rules:
    # 允许同命名空间服务通信
    - from:
        - source:
            namespaces: ["qa-app"]
    
    # 允许来自istio-system的流量（监控、代理等）
    - from:
        - source:
            namespaces: ["istio-system"]
    
    # 允许来自kube-system的健康检查
    - from:
        - source:
            namespaces: ["kube-system"]
      to:
        - operation:
            paths: ["/health", "/ready", "/metrics"]

---
# 授权策略 - 拒绝策略（黑名单）
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: deny-suspicious
  namespace: qa-app
spec:
  action: DENY
  rules:
    # 拒绝恶意IP
    - from:
        - source:
            remoteIpBlocks: ["192.168.100.0/24", "10.0.0.0/8"]
    
    # 拒绝特定User-Agent
    - when:
        - key: request.headers[user-agent]
          values: ["*bot*", "*crawler*", "*spider*"]
          notValues: ["GoogleBot*", "BingBot*"] # 允许合法爬虫
    
    # 拒绝敏感路径访问
    - to:
        - operation:
            paths: ["*/admin/debug/*", "*/.env*", "*/config/*"]
    
    # 限制高频请求
    - when:
        - key: request.headers[x-forwarded-for]
          values: ["*"]
        - key: custom.rate_limit_exceeded
          values: ["true"]

---
# 网络策略 - Pod级别网络隔离
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: qa-app-network-policy
  namespace: qa-app
spec:
  podSelector: {}
  policyTypes:
    - Ingress
    - Egress
  
  ingress:
    # 允许来自Istio代理的流量
    - from:
        - namespaceSelector:
            matchLabels:
              name: istio-system
    
    # 允许同命名空间Pod间通信
    - from:
        - podSelector: {}
    
    # 允许来自监控命名空间
    - from:
        - namespaceSelector:
            matchLabels:
              name: monitoring
      ports:
        - protocol: TCP
          port: 15090 # Envoy admin port
        - protocol: TCP
          port: 9090  # Metrics port
  
  egress:
    # 允许DNS查询
    - to: []
      ports:
        - protocol: UDP
          port: 53
        - protocol: TCP
          port: 53
    
    # 允许访问Kubernetes API
    - to: []
      ports:
        - protocol: TCP
          port: 443
    
    # 允许访问外部数据库
    - to: []
      ports:
        - protocol: TCP
          port: 5432 # PostgreSQL
        - protocol: TCP
          port: 6379 # Redis
    
    # 允许HTTPS出站流量
    - to: []
      ports:
        - protocol: TCP
          port: 443

---
# ServiceAccount配置
apiVersion: v1
kind: ServiceAccount
metadata:
  name: qa-app-api
  namespace: qa-app
  annotations:
    # SPIFFE ID
    spiffe.io/spiffe-id: spiffe://cluster.local/ns/qa-app/sa/qa-app-api
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: qa-app-web
  namespace: qa-app
  annotations:
    spiffe.io/spiffe-id: spiffe://cluster.local/ns/qa-app/sa/qa-app-web
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: qa-app-worker
  namespace: qa-app
  annotations:
    spiffe.io/spiffe-id: spiffe://cluster.local/ns/qa-app/sa/qa-app-worker

---
# TLS证书配置
apiVersion: v1
kind: Secret
metadata:
  name: qa-app-tls-secret
  namespace: qa-app
type: kubernetes.io/tls
data:
  # 这里应该放置实际的证书内容，base64编码
  tls.crt: LS0tLS1CRUdJTi...  # Base64 encoded certificate
  tls.key: LS0tLS1CRUdJTi...  # Base64 encoded private key

---
# EnvoyFilter配置 - 自定义安全头
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: security-headers
  namespace: qa-app
spec:
  configPatches:
    - applyTo: HTTP_FILTER
      match:
        context: SIDECAR_INBOUND
        listener:
          filterChain:
            filter:
              name: "envoy.filters.network.http_connection_manager"
      patch:
        operation: INSERT_BEFORE
        value:
          name: envoy.filters.http.lua
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
            inline_code: |
              function envoy_on_response(response_handle)
                -- 添加安全响应头
                response_handle:headers():add("X-Frame-Options", "SAMEORIGIN")
                response_handle:headers():add("X-Content-Type-Options", "nosniff")
                response_handle:headers():add("X-XSS-Protection", "1; mode=block")
                response_handle:headers():add("Strict-Transport-Security", "max-age=31536000; includeSubDomains")
                response_handle:headers():add("Content-Security-Policy", "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'")
                response_handle:headers():add("Referrer-Policy", "strict-origin-when-cross-origin")
                
                -- 移除敏感信息泄露
                response_handle:headers():remove("server")
                response_handle:headers():remove("x-powered-by")
              end