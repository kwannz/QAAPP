# Jaeger分布式链路追踪
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jaeger
  namespace: istio-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jaeger
  template:
    metadata:
      labels:
        app: jaeger
    spec:
      containers:
        - name: jaeger
          image: jaegertracing/all-in-one:1.45
          env:
            - name: COLLECTOR_ZIPKIN_HOST_PORT
              value: ":9411"
            - name: MEMORY_MAX_TRACES
              value: "50000"
            - name: QUERY_BASE_PATH
              value: "/jaeger"
          ports:
            - containerPort: 14250
              protocol: TCP
            - containerPort: 14268
              protocol: TCP
            - containerPort: 9411
              protocol: TCP
            - containerPort: 16686
              protocol: TCP
          resources:
            requests:
              memory: "400Mi"
              cpu: "100m"
            limits:
              memory: "800Mi"
              cpu: "500m"
---
apiVersion: v1
kind: Service
metadata:
  name: jaeger-collector
  namespace: istio-system
spec:
  selector:
    app: jaeger
  ports:
    - name: grpc-http
      port: 14250
      targetPort: 14250
      protocol: TCP
    - name: http
      port: 14268
      targetPort: 14268
      protocol: TCP
    - name: zipkin
      port: 9411
      targetPort: 9411
      protocol: TCP
---
apiVersion: v1
kind: Service
metadata:
  name: jaeger-query
  namespace: istio-system
spec:
  selector:
    app: jaeger
  ports:
    - name: query-http
      port: 16686
      targetPort: 16686
      protocol: TCP

---
# Kiali服务网格可视化
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kiali
  namespace: istio-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kiali
  template:
    metadata:
      labels:
        app: kiali
    spec:
      serviceAccountName: kiali
      containers:
        - name: kiali
          image: quay.io/kiali/kiali:v1.73
          env:
            - name: ACTIVE_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: LOG_LEVEL
              value: "info"
            - name: LOG_FORMAT
              value: "text"
          volumeMounts:
            - name: kiali-configuration
              mountPath: "/kiali-configuration"
          resources:
            requests:
              memory: "64Mi"
              cpu: "10m"
            limits:
              memory: "1Gi"
              cpu: "500m"
      volumes:
        - name: kiali-configuration
          configMap:
            name: kiali
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kiali
  namespace: istio-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kiali
rules:
  - apiGroups: [""]
    resources: ["configmaps", "endpoints", "pods", "services"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["extensions", "apps"]
    resources: ["deployments", "replicasets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["networking.istio.io", "security.istio.io"]
    resources: ["*"]
    verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kiali
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kiali
subjects:
  - kind: ServiceAccount
    name: kiali
    namespace: istio-system
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kiali
  namespace: istio-system
data:
  config.yaml: |
    auth:
      strategy: anonymous
    server:
      port: 20001
      web_root: /kiali
    external_services:
      grafana:
        enabled: true
        in_cluster_url: 'http://grafana.istio-system:3000'
        url: 'http://grafana.qa-app.com'
      jaeger:
        enabled: true
        in_cluster_url: 'http://jaeger-query.istio-system:16686'
        url: 'http://jaeger.qa-app.com'
      prometheus:
        url: "http://prometheus.istio-system:9090"
---
apiVersion: v1
kind: Service
metadata:
  name: kiali
  namespace: istio-system
spec:
  selector:
    app: kiali
  ports:
    - name: http
      port: 20001
      targetPort: 20001

---
# Prometheus配置 - 服务网格指标收集
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus
  namespace: istio-system
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
    
    rule_files:
      - "/etc/prometheus/rules/*.yml"
    
    scrape_configs:
      # Istio mesh指标
      - job_name: 'istio-mesh'
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names:
                - istio-system
                - qa-app
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
            action: keep
            regex: istio-proxy;http-monitoring
      
      # Envoy统计信息
      - job_name: 'envoy-stats'
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names:
                - qa-app
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_container_name, __meta_kubernetes_pod_container_port_name]
            action: keep
            regex: istio-proxy;http-envoy-prom
      
      # 应用指标
      - job_name: 'qa-app-metrics'
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names:
                - qa-app
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name
      
      # Kubernetes组件指标
      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
          - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
            action: keep
            regex: default;kubernetes;https

---
# Grafana仪表板配置
apiVersion: v1
kind: ConfigMap
metadata:
  name: istio-dashboards
  namespace: istio-system
data:
  istio-mesh-dashboard.json: |
    {
      "dashboard": {
        "id": null,
        "title": "Istio Mesh Dashboard",
        "tags": ["istio", "service-mesh"],
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "Request Rate",
            "type": "graph",
            "targets": [
              {
                "expr": "sum(rate(istio_requests_total[5m])) by (destination_service_name)",
                "legendFormat": "{{destination_service_name}}"
              }
            ],
            "yAxes": [
              {
                "label": "Requests per second",
                "min": 0
              }
            ]
          },
          {
            "id": 2,
            "title": "Success Rate",
            "type": "singlestat",
            "targets": [
              {
                "expr": "sum(rate(istio_requests_total{response_code!~\"5.*\"}[5m])) / sum(rate(istio_requests_total[5m]))",
                "legendFormat": "Success Rate"
              }
            ],
            "valueName": "current",
            "format": "percentunit"
          },
          {
            "id": 3,
            "title": "P99 Latency",
            "type": "graph",
            "targets": [
              {
                "expr": "histogram_quantile(0.99, sum(rate(istio_request_duration_milliseconds_bucket[5m])) by (destination_service_name, le))",
                "legendFormat": "{{destination_service_name}}"
              }
            ]
          }
        ],
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "refresh": "5s"
      }
    }

---
# Telemetry v2配置 - 自定义指标
apiVersion: telemetry.istio.io/v1alpha1
kind: Telemetry
metadata:
  name: qa-app-metrics
  namespace: qa-app
spec:
  metrics:
    - providers:
        - name: prometheus
    - overrides:
        - match:
            metric: ALL_METRICS
          tagOverrides:
            request_protocol:
              value: "unknown"
        - match:
            metric: REQUEST_COUNT
          disabled: false
        - match:
            metric: REQUEST_DURATION
          disabled: false
        - match:
            metric: TCP_OPENED_CONNECTIONS
          disabled: false
    # 自定义指标
    - providers:
        - name: prometheus
      overrides:
        - match:
            metric: ALL_METRICS
          tagOverrides:
            # 添加业务标签
            user_id:
              operation: UPSERT
              value: "%{REQUEST_HEADER[x-user-id]}"
            api_version:
              operation: UPSERT
              value: "%{REQUEST_HEADER[api-version]}"
            tenant_id:
              operation: UPSERT
              value: "%{REQUEST_HEADER[x-tenant-id]}"

---
# AccessLogService配置 - 结构化访问日志
apiVersion: telemetry.istio.io/v1alpha1
kind: Telemetry
metadata:
  name: access-logging
  namespace: qa-app
spec:
  accessLogging:
    - providers:
        - name: envoy
      options:
        format: |
          {
            "timestamp": "%START_TIME%",
            "method": "%REQ(:METHOD)%",
            "url": "%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%",
            "protocol": "%PROTOCOL%",
            "response_code": %RESPONSE_CODE%,
            "response_flags": "%RESPONSE_FLAGS%",
            "response_code_details": "%RESPONSE_CODE_DETAILS%",
            "connection_termination_details": "%CONNECTION_TERMINATION_DETAILS%",
            "upstream_transport_failure_reason": "%UPSTREAM_TRANSPORT_FAILURE_REASON%",
            "bytes_received": %BYTES_RECEIVED%,
            "bytes_sent": %BYTES_SENT%,
            "duration": %DURATION%,
            "upstream_service_time": "%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)%",
            "x_forwarded_for": "%REQ(X-FORWARDED-FOR)%",
            "user_agent": "%REQ(USER-AGENT)%",
            "x_request_id": "%REQ(X-REQUEST-ID)%",
            "authority": "%REQ(:AUTHORITY)%",
            "upstream_host": "%UPSTREAM_HOST%",
            "upstream_cluster": "%UPSTREAM_CLUSTER%",
            "upstream_local_address": "%UPSTREAM_LOCAL_ADDRESS%",
            "downstream_local_address": "%DOWNSTREAM_LOCAL_ADDRESS%",
            "downstream_remote_address": "%DOWNSTREAM_REMOTE_ADDRESS%",
            "requested_server_name": "%REQUESTED_SERVER_NAME%",
            "route_name": "%ROUTE_NAME%",
            "user_id": "%REQ(X-USER-ID)%",
            "tenant_id": "%REQ(X-TENANT-ID)%",
            "api_version": "%REQ(API-VERSION)%",
            "trace_id": "%REQ(X-TRACE-ID)%",
            "span_id": "%REQ(X-SPAN-ID)%"
          }