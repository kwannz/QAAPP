"use strict";exports.id=2698,exports.ids=[2698],exports.modules={60756:(a,b,c)=>{c.d(b,{h:()=>f});var d=c(92027),e=c(13706);function f(a,b){if(!(0,e.P)(a,{strict:!1}))throw new d.M({address:a});if(!(0,e.P)(b,{strict:!1}))throw new d.M({address:b});return a.toLowerCase()===b.toLowerCase()}},82698:(a,b,c)=>{c.d(b,{offchainLookup:()=>t,offchainLookupSignature:()=>r});var d=c(32539),e=c(6420),f=c(61581),g=c(17794);class h extends f.C{constructor({callbackSelector:a,cause:b,data:c,extraData:d,sender:e,urls:f}){super(b.shortMessage||"An error occurred while fetching for an offchain result.",{cause:b,metaMessages:[...b.metaMessages||[],b.metaMessages?.length?"":[],"Offchain Gateway Call:",f&&["  Gateway URL(s):",...f.map(a=>`    ${(0,g.I)(a)}`)],`  Sender: ${e}`,`  Data: ${c}`,`  Callback selector: ${a}`,`  Extra data: ${d}`].flat(),name:"OffchainLookupError"})}}class i extends f.C{constructor({result:a,url:b}){super("Offchain gateway response is malformed. Response data must be a hex value.",{metaMessages:[`Gateway URL: ${(0,g.I)(b)}`,`Response: ${(0,e.A)(a)}`],name:"OffchainLookupResponseMalformedError"})}}class j extends f.C{constructor({sender:a,to:b}){super("Reverted sender address does not match target contract address (`to`).",{metaMessages:[`Contract address: ${b}`,`OffchainLookup sender address: ${a}`],name:"OffchainLookupSenderMismatchError"})}}var k=c(82078),l=c(17085),m=c(79596),n=c(60756),o=c(36224),p=c(82051),q=c(19163);let r="0x556f1830",s={name:"OffchainLookup",type:"error",inputs:[{name:"sender",type:"address"},{name:"urls",type:"string[]"},{name:"callData",type:"bytes"},{name:"callbackFunction",type:"bytes4"},{name:"extraData",type:"bytes"}]};async function t(a,{blockNumber:b,blockTag:c,data:e,to:f}){let{args:g}=(0,l.W)({data:e,abi:[s]}),[i,k,p,r,t]=g,{ccipRead:v}=a,w=v&&"function"==typeof v?.request?v.request:u;try{if(!(0,n.h)(f,i))throw new j({sender:i,to:f});let e=k.includes(q.J)?await (0,q.X)({data:p,ccipRequest:w}):await w({data:p,sender:i,urls:k}),{data:g}=await (0,d.T)(a,{blockNumber:b,blockTag:c,data:(0,o.xW)([r,(0,m.h)([{type:"bytes"},{type:"bytes"}],[e,t])]),to:f});return g}catch(a){throw new h({callbackSelector:r,cause:a,data:e,extraData:t,sender:i,urls:k})}}async function u({data:a,sender:b,urls:c}){let d=Error("An unknown error occurred.");for(let f=0;f<c.length;f++){let g=c[f],h=g.includes("{data}")?"GET":"POST",j="POST"===h?{data:a,sender:b}:void 0,l="POST"===h?{"Content-Type":"application/json"}:{};try{let c,f=await fetch(g.replace("{sender}",b.toLowerCase()).replace("{data}",a),{body:JSON.stringify(j),headers:l,method:h});if(c=f.headers.get("Content-Type")?.startsWith("application/json")?(await f.json()).data:await f.text(),!f.ok){d=new k.Ci({body:j,details:c?.error?(0,e.A)(c.error):f.statusText,headers:f.headers,status:f.status,url:g});continue}if(!(0,p.q)(c)){d=new i({result:c,url:g});continue}return c}catch(a){d=new k.Ci({body:j,details:a.message,url:g})}}throw d}}};