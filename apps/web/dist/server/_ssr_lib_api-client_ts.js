"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_ssr_lib_api-client_ts";
exports.ids = ["_ssr_lib_api-client_ts"];
exports.modules = {

/***/ "(ssr)/./lib/api-client.ts":
/*!***************************!*\
  !*** ./lib/api-client.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   adminApi: () => (/* binding */ adminApi),\n/* harmony export */   apiClient: () => (/* binding */ apiClient),\n/* harmony export */   auditApi: () => (/* binding */ auditApi),\n/* harmony export */   authApi: () => (/* binding */ authApi),\n/* harmony export */   commissionApi: () => (/* binding */ commissionApi),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   monitoringApi: () => (/* binding */ monitoringApi),\n/* harmony export */   notificationApi: () => (/* binding */ notificationApi),\n/* harmony export */   orderApi: () => (/* binding */ orderApi),\n/* harmony export */   payoutApi: () => (/* binding */ payoutApi),\n/* harmony export */   positionApi: () => (/* binding */ positionApi),\n/* harmony export */   productApi: () => (/* binding */ productApi),\n/* harmony export */   reportApi: () => (/* binding */ reportApi),\n/* harmony export */   userApi: () => (/* binding */ userApi)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! axios */ \"(ssr)/../../node_modules/.pnpm/axios@1.11.0_debug@4.4.1/node_modules/axios/lib/axios.js\");\n/* harmony import */ var _logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./logger */ \"(ssr)/./lib/logger.ts\");\n/* harmony import */ var _token_manager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./token-manager */ \"(ssr)/./lib/token-manager.ts\");\n\n// 动态导入 toast 以避免 SSR 问题\nconst getToast = ()=>{\n    if (false) {}\n    return null;\n};\n\n\n// API 基础配置\nconst API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3001/api';\nconst HTTP_STATUS_UNAUTHORIZED = 401;\nconst HTTP_STATUS_FORBIDDEN = 403;\n// 创建 axios 实例\nconst apiClient = axios__WEBPACK_IMPORTED_MODULE_2__[\"default\"].create({\n    baseURL: API_BASE_URL,\n    timeout: 10000,\n    headers: {\n        'Content-Type': 'application/json'\n    }\n});\n// 请求拦截器 - 添加认证token和日志\napiClient.interceptors.request.use((config)=>{\n    const accessToken = _token_manager__WEBPACK_IMPORTED_MODULE_1__.tokenManager.getAccessToken();\n    if (accessToken) {\n        config.headers.Authorization = `Bearer ${accessToken}`;\n    }\n    // 记录请求日志并生成请求ID\n    const requestId = _logger__WEBPACK_IMPORTED_MODULE_0__[\"default\"].logApiRequest(config.method?.toUpperCase() || 'GET', config.url || '', config.data, config.headers);\n    config.headers['X-Request-Id'] = requestId;\n    config.requestStartTime = Date.now();\n    config.requestId = requestId;\n    return config;\n}, async (error)=>{\n    _logger__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error('API', 'Request interceptor error', error);\n    throw error;\n});\n// 响应拦截器 - 处理错误、token刷新和日志\napiClient.interceptors.response.use((response)=>{\n    // 计算请求耗时\n    const config = response.config;\n    const duration = config.requestStartTime ? Date.now() - config.requestStartTime : undefined;\n    // 记录响应日志\n    _logger__WEBPACK_IMPORTED_MODULE_0__[\"default\"].logApiResponse(config.requestId || 'unknown', response.status, response.data, duration);\n    return response;\n}, async (error)=>{\n    const originalRequest = error.config;\n    // 处理401错误（token过期）\n    if (error.response?.status === HTTP_STATUS_UNAUTHORIZED && !originalRequest._retry) {\n        originalRequest._retry = true;\n        const refreshToken = _token_manager__WEBPACK_IMPORTED_MODULE_1__.tokenManager.getRefreshToken();\n        if (refreshToken) {\n            try {\n                const response = await axios__WEBPACK_IMPORTED_MODULE_2__[\"default\"].post(`${API_BASE_URL}/auth/refresh`, {\n                    refreshToken\n                });\n                const { accessToken: newAccessToken } = response.data;\n                _token_manager__WEBPACK_IMPORTED_MODULE_1__.tokenManager.setTokens(newAccessToken, refreshToken);\n                // 重试原始请求\n                originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;\n                return apiClient(originalRequest);\n            } catch (refreshError) {\n                // 刷新失败，清除认证信息\n                _token_manager__WEBPACK_IMPORTED_MODULE_1__.tokenManager.clearTokens();\n                const toast = await getToast();\n                if (toast) {\n                    toast.error('登录已过期，请重新登录');\n                }\n                window.location.href = '/auth/login';\n                return Promise.reject(refreshError);\n            }\n        } else {\n            // 没有refresh token，直接跳转登录\n            _token_manager__WEBPACK_IMPORTED_MODULE_1__.tokenManager.clearTokens();\n            window.location.href = '/auth/login';\n        }\n    }\n    // 处理其他错误\n    const errorMessage = error.response?.data?.message || error.message || '请求失败';\n    // 记录错误日志\n    const config = error.config;\n    if (config?.requestId) {\n        _logger__WEBPACK_IMPORTED_MODULE_0__[\"default\"].logApiError(config.requestId, error);\n    }\n    // 不显示某些错误的toast\n    const silentErrors = [\n        HTTP_STATUS_UNAUTHORIZED,\n        HTTP_STATUS_FORBIDDEN\n    ];\n    if (!silentErrors.includes(error.response?.status || 0)) {\n        const toast = await getToast();\n        if (toast) {\n            toast.error(errorMessage);\n        }\n    }\n    throw error;\n});\n// API 接口定义\nconst authApi = {\n    // 邮箱登录\n    login: async (data)=>apiClient.post('/auth/login', data),\n    // 邮箱注册\n    register: async (data)=>apiClient.post('/auth/register', data),\n    // 获取Web3挑战\n    getWeb3Challenge: async (address)=>apiClient.get(`/auth/web3/challenge/${address}`),\n    // Web3登录\n    web3Login: async (data)=>apiClient.post('/auth/web3/login', data),\n    // Web3注册\n    web3Register: async (data)=>apiClient.post('/auth/web3/register', data),\n    // 刷新token\n    refresh: async (refreshToken)=>apiClient.post('/auth/refresh', {\n            refreshToken\n        }),\n    // 登出\n    logout: async ()=>apiClient.post('/auth/logout'),\n    // 获取当前用户信息\n    me: async ()=>apiClient.get('/auth/me'),\n    // 修改密码\n    changePassword: async (data)=>apiClient.post('/auth/change-password', data)\n};\n// 监控中心 API\nconst monitoringApi = {\n    getMetrics: async (parameters)=>apiClient.get('/monitoring/metrics', {\n            params: parameters\n        }),\n    getDashboard: async (timeRange = '24h')=>apiClient.get('/monitoring/dashboard', {\n            params: {\n                timeRange\n            }\n        }),\n    getDeprecations: async ()=>apiClient.get('/monitoring/deprecations')\n};\nconst userApi = {\n    // 获取当前用户详细信息\n    getCurrentUser: async ()=>apiClient.get('/users/me'),\n    // 更新用户信息\n    updateProfile: async (data)=>apiClient.put('/users/me', data),\n    // 获取用户统计\n    getStats: async ()=>apiClient.get('/users/me/stats'),\n    // 获取推荐用户列表\n    getReferrals: async (parameters)=>apiClient.get('/users/me/referrals', {\n            params: parameters\n        }),\n    // 添加钱包\n    addWallet: async (data)=>apiClient.post('/users/me/wallets', data),\n    // 删除钱包\n    removeWallet: async (walletId)=>apiClient.delete(`/users/me/wallets/${walletId}`),\n    // 设置主钱包\n    setPrimaryWallet: async (walletId)=>apiClient.put(`/users/me/wallets/${walletId}/primary`)\n};\n// 产品API（占位符）\nconst productApi = {\n    getAll: async ()=>apiClient.get('/products'),\n    getById: async (id)=>apiClient.get(`/products/${id}`)\n};\n// 订单API（占位符）\nconst orderApi = {\n    create: async (data)=>apiClient.post('/orders', data),\n    getMyOrders: async (parameters)=>apiClient.get('/orders/me', {\n            params: parameters\n        })\n};\n// 仓位API（占位符）\nconst positionApi = {\n    getMyPositions: async (parameters)=>apiClient.get('/positions/me', {\n            params: parameters\n        }),\n    getById: async (id)=>apiClient.get(`/positions/${id}`)\n};\n// 分红API（占位符）\nconst payoutApi = {\n    getClaimable: async ()=>apiClient.get('/payouts/claimable'),\n    claim: async (ids)=>apiClient.post('/payouts/claim', {\n            payoutIds: ids\n        })\n};\n// 审计API\nconst auditApi = {\n    // 用户端\n    getMyLogs: async (parameters)=>apiClient.get('/audit/me', {\n            params: parameters\n        }),\n    getActivityStats: async (days)=>apiClient.get('/audit/me/activity-stats', {\n            params: {\n                days\n            }\n        }),\n    // 管理员端\n    getAdminLogs: async (parameters)=>apiClient.get('/audit/admin/logs', {\n            params: parameters\n        }),\n    getLogById: async (id)=>apiClient.get(`/audit/admin/logs/${id}`),\n    getAuditStats: async (parameters)=>apiClient.get('/audit/admin/stats', {\n            params: parameters\n        }),\n    exportAuditLogs: async (parameters)=>apiClient.get('/audit/admin/export', {\n            params: parameters,\n            responseType: 'blob'\n        }),\n    markAsAbnormal: async (logIds)=>apiClient.post('/audit/admin/mark-abnormal', {\n            logIds\n        }),\n    generateSummary: async (parameters)=>apiClient.post('/audit/admin/generate-summary', parameters),\n    // 系统审计\n    getSystemEvents: async (parameters)=>apiClient.get('/audit/system/events', {\n            params: parameters\n        }),\n    getSystemMetrics: async ()=>apiClient.get('/audit/system/metrics'),\n    // 用户审计\n    getUserAuditLogs: async (userId, parameters)=>apiClient.get(userId ? `/audit/users/${userId}` : '/audit/users', {\n            params: parameters\n        }),\n    getUserBehaviorAnalysis: async (userId)=>apiClient.get(`/audit/users/${userId}/behavior-analysis`),\n    getUserRiskScore: async (userId)=>apiClient.get(`/audit/users/${userId}/risk-score`)\n};\n// 佣金API\nconst commissionApi = {\n    // 用户端\n    getUserHistory: async (userId, parameters)=>apiClient.get(`/commissions/user/${userId}/history`, {\n            params: parameters\n        }),\n    getUserSummary: async (userId)=>apiClient.get(`/commissions/user/${userId}/summary`),\n    // 管理员端\n    getAdminList: async (parameters)=>apiClient.get('/commissions/admin/list', {\n            params: parameters\n        }),\n    getStats: async (period)=>apiClient.get('/commissions/admin/stats', {\n            params: {\n                period\n            }\n        }),\n    calculate: async (data)=>apiClient.post('/commissions/admin/calculate', data),\n    processPayments: async (data)=>apiClient.post('/commissions/admin/process-payments', data),\n    getBreakdown: async (period, groupBy)=>apiClient.get('/commissions/admin/breakdown', {\n            params: {\n                period,\n                groupBy\n            }\n        }),\n    getRules: async ()=>apiClient.get('/commissions/admin/rules'),\n    updateRules: async (data)=>apiClient.post('/commissions/admin/rules', data),\n    generateReport: async (data)=>apiClient.post('/commissions/admin/generate-report', data),\n    export: async (parameters)=>apiClient.get('/commissions/admin/export', {\n            params: parameters\n        })\n};\n// 通知API\nconst notificationApi = {\n    // 用户端\n    getUserNotifications: async (userId, parameters)=>apiClient.get(`/notifications/user/${userId}`, {\n            params: parameters\n        }),\n    markAsRead: async (userId, notificationId)=>apiClient.put(`/notifications/user/${userId}/read/${notificationId}`),\n    markAllAsRead: async (userId)=>apiClient.put(`/notifications/user/${userId}/read-all`),\n    getStats: async (userId)=>apiClient.get(`/notifications/user/${userId}/stats`),\n    getPreferences: async (userId)=>apiClient.get(`/notifications/user/${userId}/preferences`),\n    updatePreferences: async (userId, preferences)=>apiClient.put(`/notifications/user/${userId}/preferences`, preferences),\n    delete: async (userId, notificationId)=>apiClient.delete(`/notifications/user/${userId}/${notificationId}`),\n    // 管理员端\n    getAdminNotifications: async (parameters)=>apiClient.get('/notifications/admin/list', {\n            params: parameters\n        }),\n    send: async (data)=>apiClient.post('/notifications/admin/send', data),\n    sendBulk: async (data)=>apiClient.post('/notifications/admin/send-bulk', data),\n    getTemplates: async ()=>apiClient.get('/notifications/admin/templates'),\n    createTemplate: async (data)=>apiClient.post('/notifications/admin/templates', data),\n    updateTemplate: async (templateId, data)=>apiClient.put(`/notifications/admin/templates/${templateId}`, data),\n    deleteTemplate: async (templateId)=>apiClient.delete(`/notifications/admin/templates/${templateId}`),\n    getAdminStats: async (parameters)=>apiClient.get('/notifications/admin/stats', {\n            params: parameters\n        }),\n    scheduleCampaign: async (data)=>apiClient.post('/notifications/admin/campaigns', data),\n    getCampaigns: async (parameters)=>apiClient.get('/notifications/admin/campaigns', {\n            params: parameters\n        })\n};\n// 报表API\nconst reportApi = {\n    // 生成报表\n    generateFinancialOverview: async (data)=>apiClient.post('/reports/financial/overview', data),\n    generateCommissionReport: async (data)=>apiClient.post('/reports/commissions', data),\n    generateRevenueReport: async (data)=>apiClient.post('/reports/revenue', data),\n    generateInvestmentAnalysis: async (data)=>apiClient.post('/reports/investments/analysis', data),\n    generateAgentPerformanceReport: async (data)=>apiClient.post('/reports/agents/performance', data),\n    // 获取报表\n    getTemplates: async (category)=>apiClient.get('/reports/templates', {\n            params: {\n                category\n            }\n        }),\n    createTemplate: async (data)=>apiClient.post('/reports/templates', data),\n    getHistory: async (parameters)=>apiClient.get('/reports/history', {\n            params: parameters\n        }),\n    getReport: async (reportId)=>apiClient.get(`/reports/${reportId}`),\n    downloadReport: async (reportId)=>apiClient.get(`/reports/${reportId}/download`, {\n            responseType: 'blob'\n        }),\n    scheduleReport: async (data)=>apiClient.post('/reports/schedule', data),\n    getStats: async (period)=>apiClient.get('/reports/stats/overview', {\n            params: {\n                period\n            }\n        }),\n    getDashboardKPIs: async (period = '30d', comparison = 'previous_period')=>apiClient.get('/reports/dashboard/kpis', {\n            params: {\n                period,\n                comparison\n            }\n        }),\n    exportData: async (data)=>apiClient.post('/reports/export', data),\n    previewReport: async (data)=>apiClient.post('/reports/preview', data)\n};\n// 管理员API\nconst adminApi = {\n    // 用户管理\n    getUsers: async (parameters)=>apiClient.get('/users', {\n            params: parameters\n        }),\n    getUserById: async (id)=>apiClient.get(`/users/${id}`),\n    updateKycStatus: async (id, data)=>apiClient.put(`/users/${id}/kyc`, data),\n    updateUserRole: async (id, data)=>apiClient.put(`/users/${id}/role`, data),\n    toggleUserStatus: async (id)=>apiClient.post(`/users/${id}/toggle-status`),\n    getUserStats: async (parameters)=>apiClient.get('/users/admin/stats', {\n            params: parameters\n        }),\n    // 系统配置\n    getSystemConfig: async ()=>apiClient.get('/config'),\n    updateSystemConfig: async (data)=>apiClient.put('/config', data)\n};\n// 导出默认客户端\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (apiClient);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./lib/api-client.ts\n");

/***/ }),

/***/ "(ssr)/./lib/logger.ts":
/*!***********************!*\
  !*** ./lib/logger.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LogLevel: () => (/* binding */ LogLevel),\n/* harmony export */   Logger: () => (/* binding */ Logger),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* eslint-disable no-console, no-magic-numbers */ /**\n * 统一的前端日志管理系统\n * 支持多级别日志、性能监控、错误追踪等功能\n */ var LogLevel = /*#__PURE__*/ function(LogLevel) {\n    LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\n    LogLevel[LogLevel[\"INFO\"] = 1] = \"INFO\";\n    LogLevel[LogLevel[\"WARN\"] = 2] = \"WARN\";\n    LogLevel[LogLevel[\"ERROR\"] = 3] = \"ERROR\";\n    LogLevel[LogLevel[\"FATAL\"] = 4] = \"FATAL\";\n    return LogLevel;\n}({});\nclass Logger {\n    constructor(){\n        this.config = {\n            level: (()=>{\n                const env = \"development\";\n                switch(env){\n                    case 'development':\n                        return 0;\n                    case 'test':\n                        return 2;\n                    case 'production':\n                        return 3;\n                    default:\n                        return 1;\n                }\n            })(),\n            enableConsole: true,\n            enableRemote: \"development\" === 'production',\n            enableLocalStorage: \"development\" !== 'production',\n            maxLocalStorageLogs: 1000,\n            verbose: \"development\" === 'development',\n            performanceThreshold: 1000,\n            enableDeduplication: true,\n            environment: \"development\" || 0\n        };\n        this.logBuffer = [];\n        this.timers = new Map();\n        this.loggedMessages = new Set(); // 用于去重\n        this.sessionId = this.generateSessionId();\n        this.loadConfig();\n        this.setupGlobalErrorHandler();\n        this.setupPerformanceObserver();\n    }\n    // 根据环境获取默认日志级别\n    static getEnvironmentLogLevel() {\n        const env = \"development\";\n        switch(env){\n            case 'development':\n                return 0;\n            case 'test':\n                return 2;\n            case 'production':\n                return 3;\n            default:\n                return 1;\n        }\n    }\n    // 加载配置\n    loadConfig() {\n        // 检查是否在浏览器环境\n        if (true) {\n            return; // 服务端渲染时跳过localStorage操作\n        }\n        const savedConfig = localStorage.getItem('logger_config');\n        if (savedConfig) {\n            try {\n                this.config = {\n                    ...this.config,\n                    ...JSON.parse(savedConfig)\n                };\n            } catch (error) {\n                console.error('Failed to load logger config:', error);\n            }\n        }\n    }\n    // 保存配置\n    setConfig(config) {\n        this.config = {\n            ...this.config,\n            ...config\n        };\n        localStorage.setItem('logger_config', JSON.stringify(this.config));\n        this.log(1, 'Logger', 'Config updated', {\n            config: this.config\n        });\n    }\n    // 设置用户ID\n    setUserId(userId) {\n        this.userId = userId;\n        this.log(1, 'Logger', 'User ID set', {\n            userId\n        });\n    }\n    // 生成会话ID\n    generateSessionId() {\n        return `session_${Date.now()}_${Math.random().toString(36).slice(2, 11)}`;\n    }\n    // 生成请求ID\n    generateRequestId() {\n        return `req_${Date.now()}_${Math.random().toString(36).slice(2, 11)}`;\n    }\n    // 核心日志方法\n    log(level, module, message, metadata, error) {\n        if (level < this.config.level) return;\n        // 检查去重\n        if (this.config.enableDeduplication) {\n            const messageKey = `${level}-${module}-${message}`;\n            if (this.loggedMessages.has(messageKey)) {\n                return; // 跳过重复消息\n            }\n            this.loggedMessages.add(messageKey);\n            // 限制去重缓存大小\n            if (this.loggedMessages.size > 500) {\n                // 清空一半缓存\n                const messages = Array.from(this.loggedMessages);\n                this.loggedMessages.clear();\n                messages.slice(-250).forEach((msg)=>this.loggedMessages.add(msg));\n            }\n        }\n        const entry = {\n            timestamp: new Date().toISOString(),\n            level,\n            levelName: LogLevel[level],\n            message,\n            module,\n            userId: this.userId,\n            sessionId: this.sessionId,\n            metadata,\n            error,\n            stack: error?.stack,\n            url: window.location.href,\n            userAgent: navigator.userAgent\n        };\n        // 控制台输出\n        if (this.config.enableConsole) {\n            this.consoleLog(entry);\n        }\n        // 保存到本地存储\n        if (this.config.enableLocalStorage) {\n            this.saveToLocalStorage(entry);\n        }\n        // 发送到远程服务器\n        if (this.config.enableRemote) {\n            this.sendToRemote(entry);\n        }\n        // 添加到缓冲区\n        this.logBuffer.push(entry);\n        if (this.logBuffer.length > 100) {\n            this.logBuffer.shift();\n        }\n    }\n    // 控制台输出\n    consoleLog(entry) {\n        const style = this.getConsoleStyle(entry.level);\n        const prefix = `[${entry.levelName}] [${entry.module}]`;\n        if (this.config.verbose) {\n            console.groupCollapsed(`%c${prefix} ${entry.message}`, style);\n            console.log('Timestamp:', entry.timestamp);\n            console.log('Session:', entry.sessionId);\n            if (entry.userId) console.log('User:', entry.userId);\n            if (entry.metadata) console.log('Metadata:', entry.metadata);\n            if (entry.error) console.error('Error:', entry.error);\n            if (entry.stack) console.log('Stack:', entry.stack);\n            console.log('URL:', entry.url);\n            console.groupEnd();\n        } else {\n            const logFunction = this.getConsoleFunction(entry.level);\n            logFunction(`%c${prefix}`, style, entry.message, entry.metadata || '');\n        }\n    }\n    // 获取控制台样式\n    getConsoleStyle(level) {\n        switch(level){\n            case 0:\n                {\n                    return 'color: #6B7280; font-weight: normal;';\n                }\n            case 1:\n                {\n                    return 'color: #3B82F6; font-weight: normal;';\n                }\n            case 2:\n                {\n                    return 'color: #F59E0B; font-weight: bold;';\n                }\n            case 3:\n                {\n                    return 'color: #EF4444; font-weight: bold;';\n                }\n            case 4:\n                {\n                    return 'color: #FFFFFF; background-color: #DC2626; font-weight: bold; padding: 2px 4px;';\n                }\n            default:\n                {\n                    return '';\n                }\n        }\n    }\n    // 获取控制台函数\n    getConsoleFunction(level) {\n        switch(level){\n            case 0:\n                {\n                    return console.debug;\n                }\n            case 1:\n                {\n                    return console.info;\n                }\n            case 2:\n                {\n                    return console.warn;\n                }\n            case 3:\n            case 4:\n                {\n                    return console.error;\n                }\n            default:\n                {\n                    return console.log;\n                }\n        }\n    }\n    // 保存到本地存储\n    saveToLocalStorage(entry) {\n        try {\n            const logs = this.getLocalStorageLogs();\n            logs.push(entry);\n            // 限制日志数量\n            if (logs.length > this.config.maxLocalStorageLogs) {\n                logs.splice(0, logs.length - this.config.maxLocalStorageLogs);\n            }\n            localStorage.setItem('app_logs', JSON.stringify(logs));\n        } catch (error) {\n            console.error('Failed to save log to localStorage:', error);\n        }\n    }\n    // 获取本地存储的日志\n    getLocalStorageLogs() {\n        try {\n            const logs = localStorage.getItem('app_logs');\n            return logs ? JSON.parse(logs) : [];\n        } catch (error) {\n            console.error('Failed to get logs from localStorage:', error);\n            return [];\n        }\n    }\n    // 清除本地日志\n    clearLocalStorageLogs() {\n        localStorage.removeItem('app_logs');\n        this.info('Logger', 'Local storage logs cleared');\n    }\n    // 发送到远程服务器\n    async sendToRemote(entry) {\n        if (!this.config.remoteEndpoint) return;\n        try {\n            await fetch(this.config.remoteEndpoint, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(entry)\n            });\n        } catch (error) {\n            console.error('Failed to send log to remote:', error);\n        }\n    }\n    // 公共日志方法\n    debug(module, message, metadata) {\n        this.log(0, module, message, metadata);\n    }\n    info(module, message, metadata) {\n        this.log(1, module, message, metadata);\n    }\n    warn(module, message, metadata) {\n        this.log(2, module, message, metadata);\n    }\n    error(module, message, error, metadata) {\n        this.log(3, module, message, metadata, error);\n    }\n    fatal(module, message, error, metadata) {\n        this.log(4, module, message, metadata, error);\n    }\n    // 性能计时\n    time(label) {\n        this.timers.set(label, performance.now());\n        this.debug('Performance', `Timer started: ${label}`);\n    }\n    timeEnd(label, metadata) {\n        const start = this.timers.get(label);\n        if (!start) {\n            this.warn('Performance', `Timer not found: ${label}`);\n            return;\n        }\n        const duration = performance.now() - start;\n        this.timers.delete(label);\n        const level = duration > this.config.performanceThreshold ? 2 : 1;\n        this.log(level, 'Performance', `Timer ended: ${label}`, {\n            ...metadata,\n            duration: `${duration.toFixed(2)}ms`,\n            durationMs: duration\n        });\n        return duration;\n    }\n    // 分组日志\n    group(module, groupName) {\n        if (this.config.enableConsole && this.config.verbose) {\n            console.group(`[${module}] ${groupName}`);\n        }\n        this.debug(module, `Group started: ${groupName}`);\n    }\n    groupEnd(module, groupName) {\n        if (this.config.enableConsole && this.config.verbose) {\n            console.groupEnd();\n        }\n        this.debug(module, `Group ended: ${groupName}`);\n    }\n    // 表格输出\n    table(module, data, columns) {\n        if (this.config.enableConsole) {\n            console.table(data, columns);\n        }\n        this.info(module, 'Table data', {\n            data,\n            columns\n        });\n    }\n    // API日志\n    logApiRequest(method, url, data, headers) {\n        const requestId = this.generateRequestId();\n        this.info('API', `${method} ${url}`, {\n            requestId,\n            method,\n            url,\n            data,\n            headers\n        });\n        return requestId;\n    }\n    logApiResponse(requestId, status, data, duration) {\n        const level = status >= 400 ? 3 : 1;\n        this.log(level, 'API', `Response ${status}`, {\n            requestId,\n            status,\n            data,\n            duration: duration ? `${duration}ms` : undefined\n        });\n    }\n    logApiError(requestId, error) {\n        this.error('API', 'Request failed', error, {\n            requestId\n        });\n    }\n    // WebSocket日志\n    logWsConnect(url) {\n        this.info('WebSocket', `Connected to ${url}`);\n    }\n    logWsDisconnect(url, reason) {\n        this.warn('WebSocket', `Disconnected from ${url}`, {\n            reason\n        });\n    }\n    logWsMessage(direction, data) {\n        this.debug('WebSocket', `Message ${direction}`, {\n            data\n        });\n    }\n    logWsError(error) {\n        this.error('WebSocket', 'WebSocket error', error);\n    }\n    // 用户操作日志\n    logUserAction(action, target, metadata) {\n        this.info('UserAction', action, {\n            target,\n            ...metadata\n        });\n    }\n    // 页面性能日志\n    logPagePerformance() {\n        if (!window.performance) return;\n        const perfData = window.performance.timing;\n        const pageLoadTime = perfData.loadEventEnd - perfData.navigationStart;\n        const connectTime = perfData.responseEnd - perfData.requestStart;\n        const renderTime = perfData.domComplete - perfData.domLoading;\n        this.info('Performance', 'Page performance metrics', {\n            pageLoadTime: `${pageLoadTime}ms`,\n            connectTime: `${connectTime}ms`,\n            renderTime: `${renderTime}ms`,\n            domContentLoaded: `${perfData.domContentLoadedEventEnd - perfData.navigationStart}ms`\n        });\n    }\n    // 设置全局错误处理\n    setupGlobalErrorHandler() {\n        // 检查是否在浏览器环境\n        if (true) {\n            return; // 服务端渲染时跳过window操作\n        }\n        window.addEventListener('error', (event)=>{\n            this.error('Global', 'Uncaught error', event.error || new Error(event.message), {\n                filename: event.filename,\n                lineno: event.lineno,\n                colno: event.colno\n            });\n        });\n        window.addEventListener('unhandledrejection', (event)=>{\n            this.error('Global', 'Unhandled promise rejection', new Error(event.reason), {\n                reason: event.reason\n            });\n        });\n    }\n    // 设置性能观察器\n    setupPerformanceObserver() {\n        // 检查是否在浏览器环境\n        if (true) return;\n        try {\n            // 监控长任务\n            const longTaskObserver = new PerformanceObserver((list)=>{\n                for (const entry of list.getEntries()){\n                    if (entry.duration > 50) {\n                        this.warn('Performance', 'Long task detected', {\n                            duration: `${entry.duration.toFixed(2)}ms`,\n                            name: entry.name,\n                            startTime: entry.startTime\n                        });\n                    }\n                }\n            });\n            longTaskObserver.observe({\n                entryTypes: [\n                    'longtask'\n                ]\n            });\n            // 监控资源加载\n            const resourceObserver = new PerformanceObserver((list)=>{\n                for (const entry of list.getEntries()){\n                    const resourceEntry = entry;\n                    if (resourceEntry.duration > this.config.performanceThreshold) {\n                        this.warn('Performance', 'Slow resource loading', {\n                            name: resourceEntry.name,\n                            duration: `${resourceEntry.duration.toFixed(2)}ms`,\n                            type: resourceEntry.initiatorType\n                        });\n                    }\n                }\n            });\n            resourceObserver.observe({\n                entryTypes: [\n                    'resource'\n                ]\n            });\n        } catch (error) {\n            console.warn('Failed to setup performance observer:', error);\n        }\n    }\n    // 获取日志统计\n    getStats() {\n        const logs = this.getLocalStorageLogs();\n        const stats = {\n            total: logs.length,\n            debug: 0,\n            info: 0,\n            warn: 0,\n            error: 0,\n            fatal: 0,\n            modules: new Set(),\n            recentErrors: []\n        };\n        for (const log of logs){\n            switch(log.level){\n                case 0:\n                    {\n                        stats.debug++;\n                        break;\n                    }\n                case 1:\n                    {\n                        stats.info++;\n                        break;\n                    }\n                case 2:\n                    {\n                        stats.warn++;\n                        break;\n                    }\n                case 3:\n                    {\n                        stats.error++;\n                        break;\n                    }\n                case 4:\n                    {\n                        stats.fatal++;\n                        break;\n                    }\n            }\n            if (log.module) stats.modules.add(log.module);\n            if (log.level >= 3) {\n                stats.recentErrors.push(log);\n            }\n        }\n        stats.recentErrors = stats.recentErrors.slice(-10);\n        return stats;\n    }\n    // 导出日志\n    exportLogs(format = 'json') {\n        const logs = this.getLocalStorageLogs();\n        if (format === 'json') {\n            return JSON.stringify(logs, null, 2);\n        }\n        // CSV格式\n        const headers = [\n            'timestamp',\n            'level',\n            'module',\n            'message',\n            'userId',\n            'sessionId',\n            'url'\n        ];\n        const rows = logs.map((log)=>[\n                log.timestamp,\n                log.levelName,\n                log.module || '',\n                log.message,\n                log.userId || '',\n                log.sessionId,\n                log.url || ''\n            ]);\n        return [\n            headers.join(','),\n            ...rows.map((row)=>row.map((cell)=>`\"${cell}\"`).join(','))\n        ].join('\\n');\n    }\n    // Web3 专用日志方法\n    logWalletConnection(address, chainId) {\n        this.info('Wallet', `Connected: ${address}`, {\n            address,\n            chainId\n        });\n    }\n    logWalletDisconnection() {\n        this.info('Wallet', 'Disconnected');\n    }\n    logTransactionStart(hash, type) {\n        this.info('Transaction', `Started: ${type}`, {\n            hash,\n            type\n        });\n    }\n    logTransactionSuccess(hash, type) {\n        this.info('Transaction', `Success: ${type}`, {\n            hash,\n            type\n        });\n    }\n    logTransactionError(error, type) {\n        this.error('Transaction', `Failed: ${type}`, error, {\n            type\n        });\n    }\n    logContractCall(contractName, method, args) {\n        this.debug('Contract', `Call: ${contractName}.${method}`, {\n            contractName,\n            method,\n            args\n        });\n    }\n    // 清除去重缓存的方法\n    clearDeduplicationCache() {\n        this.loggedMessages.clear();\n        this.debug('Logger', 'Deduplication cache cleared');\n    }\n}\n// 创建单例实例\nconst logger = new Logger();\n// 导出实例和类型\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (logger);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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O0lBQzVEO0lBRU9xQixvQkFBb0JwSixLQUFVLEVBQUUrSCxJQUFZLEVBQUU7UUFDbkQsSUFBSSxDQUFDL0gsS0FBSyxDQUFDLGVBQWUsQ0FBQyxRQUFRLEVBQUUrSCxNQUFNLEVBQUUvSCxPQUFPO1lBQUUrSDtRQUFLO0lBQzdEO0lBRU9zQixnQkFBZ0JDLFlBQW9CLEVBQUV4RixNQUFjLEVBQUV5RixJQUFZLEVBQUU7UUFDekUsSUFBSSxDQUFDbkcsS0FBSyxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUVrRyxhQUFhLENBQUMsRUFBRXhGLFFBQVEsRUFBRTtZQUFFd0Y7WUFBY3hGO1lBQVF5RjtRQUFLO0lBQ3pGO0lBRUEsWUFBWTtJQUNMQywwQkFBMEI7UUFDL0IsSUFBSSxDQUFDckssY0FBYyxDQUFDc0MsS0FBSztRQUN6QixJQUFJLENBQUMyQixLQUFLLENBQUMsVUFBVTtJQUN2QjtBQUNGO0FBRUEsU0FBUztBQUNULE1BQU1xRyxTQUFTLElBQUl0TDtBQUVuQixVQUFVO0FBQ1YsaUVBQWVzTCxNQUFNQSxFQUFDO0FBQ0oiLCJzb3VyY2VzIjpbIi9Vc2Vycy96aGFvbGVvbi9EZXNrdG9wL1FBYXBwL2FwcHMvd2ViL2xpYi9sb2dnZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSwgbm8tbWFnaWMtbnVtYmVycyAqL1xuLyoqXG4gKiDnu5/kuIDnmoTliY3nq6/ml6Xlv5fnrqHnkIbns7vnu59cbiAqIOaUr+aMgeWkmue6p+WIq+aXpeW/l+OAgeaAp+iDveebkeaOp+OAgemUmeivr+i/vei4quetieWKn+iDvVxuICovXG5cbmV4cG9ydCBlbnVtIExvZ0xldmVsIHtcbiAgREVCVUcgPSAwLFxuICBJTkZPID0gMSxcbiAgV0FSTiA9IDIsXG4gIEVSUk9SID0gMyxcbiAgRkFUQUwgPSA0LFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIExvZ0VudHJ5IHtcbiAgdGltZXN0YW1wOiBzdHJpbmdcbiAgbGV2ZWw6IExvZ0xldmVsXG4gIGxldmVsTmFtZTogc3RyaW5nXG4gIG1lc3NhZ2U6IHN0cmluZ1xuICBtb2R1bGU/OiBzdHJpbmdcbiAgYWN0aW9uPzogc3RyaW5nXG4gIHVzZXJJZD86IHN0cmluZ1xuICBzZXNzaW9uSWQ/OiBzdHJpbmdcbiAgcmVxdWVzdElkPzogc3RyaW5nXG4gIGR1cmF0aW9uPzogbnVtYmVyXG4gIG1ldGFkYXRhPzogYW55XG4gIGVycm9yPzogRXJyb3JcbiAgc3RhY2s/OiBzdHJpbmdcbiAgdXJsPzogc3RyaW5nXG4gIHVzZXJBZ2VudD86IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIExvZ2dlckNvbmZpZyB7XG4gIGxldmVsOiBMb2dMZXZlbFxuICBlbmFibGVDb25zb2xlOiBib29sZWFuXG4gIGVuYWJsZVJlbW90ZTogYm9vbGVhblxuICBlbmFibGVMb2NhbFN0b3JhZ2U6IGJvb2xlYW5cbiAgbWF4TG9jYWxTdG9yYWdlTG9nczogbnVtYmVyXG4gIHJlbW90ZUVuZHBvaW50Pzogc3RyaW5nXG4gIHZlcmJvc2U6IGJvb2xlYW5cbiAgbW9kdWxlcz86IHN0cmluZ1tdXG4gIHBlcmZvcm1hbmNlVGhyZXNob2xkPzogbnVtYmVyXG4gIGVuYWJsZURlZHVwbGljYXRpb246IGJvb2xlYW4gLy8g5paw5aKe5Y676YeN5Yqf6IO9XG4gIGVudmlyb25tZW50OiAnZGV2ZWxvcG1lbnQnIHwgJ3Byb2R1Y3Rpb24nIHwgJ3Rlc3QnIC8vIOaWsOWinueOr+Wig+aEn+efpVxufVxuXG5jbGFzcyBMb2dnZXIge1xuICBwcml2YXRlIGNvbmZpZzogTG9nZ2VyQ29uZmlnID0ge1xuICAgIGxldmVsOiAoKCkgPT4ge1xuICAgICAgY29uc3QgZW52ID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlY7XG4gICAgICBzd2l0Y2ggKGVudikge1xuICAgICAgICBjYXNlICdkZXZlbG9wbWVudCc6IHJldHVybiBMb2dMZXZlbC5ERUJVRztcbiAgICAgICAgY2FzZSAndGVzdCc6IHJldHVybiBMb2dMZXZlbC5XQVJOO1xuICAgICAgICBjYXNlICdwcm9kdWN0aW9uJzogcmV0dXJuIExvZ0xldmVsLkVSUk9SO1xuICAgICAgICBkZWZhdWx0OiByZXR1cm4gTG9nTGV2ZWwuSU5GTztcbiAgICAgIH1cbiAgICB9KSgpLFxuICAgIGVuYWJsZUNvbnNvbGU6IHRydWUsXG4gICAgZW5hYmxlUmVtb3RlOiBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nLFxuICAgIGVuYWJsZUxvY2FsU3RvcmFnZTogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyxcbiAgICBtYXhMb2NhbFN0b3JhZ2VMb2dzOiAxMDAwLFxuICAgIHZlcmJvc2U6IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnLFxuICAgIHBlcmZvcm1hbmNlVGhyZXNob2xkOiAxMDAwLCAvLyBtc1xuICAgIGVuYWJsZURlZHVwbGljYXRpb246IHRydWUsXG4gICAgZW52aXJvbm1lbnQ6IChwcm9jZXNzLmVudi5OT0RFX0VOViBhcyBhbnkpIHx8ICdkZXZlbG9wbWVudCcsXG4gIH07XG5cbiAgcHJpdmF0ZSBsb2dCdWZmZXI6IExvZ0VudHJ5W10gPSBbXTtcbiAgcHJpdmF0ZSB0aW1lcnM6IE1hcDxzdHJpbmcsIG51bWJlcj4gPSBuZXcgTWFwKCk7XG4gIHByaXZhdGUgc2Vzc2lvbklkOiBzdHJpbmc7XG4gIHByaXZhdGUgdXNlcklkPzogc3RyaW5nO1xuICBwcml2YXRlIGxvZ2dlZE1lc3NhZ2VzOiBTZXQ8c3RyaW5nPiA9IG5ldyBTZXQoKTsgLy8g55So5LqO5Y676YeNXG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5zZXNzaW9uSWQgPSB0aGlzLmdlbmVyYXRlU2Vzc2lvbklkKCk7XG4gICAgdGhpcy5sb2FkQ29uZmlnKCk7XG4gICAgdGhpcy5zZXR1cEdsb2JhbEVycm9ySGFuZGxlcigpO1xuICAgIHRoaXMuc2V0dXBQZXJmb3JtYW5jZU9ic2VydmVyKCk7XG4gIH1cblxuICAvLyDmoLnmja7njq/looPojrflj5bpu5jorqTml6Xlv5fnuqfliKtcbiAgcHJpdmF0ZSBzdGF0aWMgZ2V0RW52aXJvbm1lbnRMb2dMZXZlbCgpOiBMb2dMZXZlbCB7XG4gICAgY29uc3QgZW52ID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlY7XG4gICAgc3dpdGNoIChlbnYpIHtcbiAgICAgIGNhc2UgJ2RldmVsb3BtZW50JzpcbiAgICAgICAgcmV0dXJuIExvZ0xldmVsLkRFQlVHO1xuICAgICAgY2FzZSAndGVzdCc6XG4gICAgICAgIHJldHVybiBMb2dMZXZlbC5XQVJOO1xuICAgICAgY2FzZSAncHJvZHVjdGlvbic6XG4gICAgICAgIHJldHVybiBMb2dMZXZlbC5FUlJPUjtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBMb2dMZXZlbC5JTkZPO1xuICAgIH1cbiAgfVxuXG4gIC8vIOWKoOi9vemFjee9rlxuICBwcml2YXRlIGxvYWRDb25maWcoKSB7XG4gICAgLy8g5qOA5p+l5piv5ZCm5Zyo5rWP6KeI5Zmo546v5aKDXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm47IC8vIOacjeWKoeerr+a4suafk+aXtui3s+i/h2xvY2FsU3RvcmFnZeaTjeS9nFxuICAgIH1cblxuICAgIGNvbnN0IHNhdmVkQ29uZmlnID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2xvZ2dlcl9jb25maWcnKTtcbiAgICBpZiAoc2F2ZWRDb25maWcpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHRoaXMuY29uZmlnID0geyAuLi50aGlzLmNvbmZpZywgLi4uSlNPTi5wYXJzZShzYXZlZENvbmZpZykgfTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBsb2FkIGxvZ2dlciBjb25maWc6JywgZXJyb3IpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIOS/neWtmOmFjee9rlxuICBwdWJsaWMgc2V0Q29uZmlnKGNvbmZpZzogUGFydGlhbDxMb2dnZXJDb25maWc+KSB7XG4gICAgdGhpcy5jb25maWcgPSB7IC4uLnRoaXMuY29uZmlnLCAuLi5jb25maWcgfTtcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnbG9nZ2VyX2NvbmZpZycsIEpTT04uc3RyaW5naWZ5KHRoaXMuY29uZmlnKSk7XG4gICAgdGhpcy5sb2coTG9nTGV2ZWwuSU5GTywgJ0xvZ2dlcicsICdDb25maWcgdXBkYXRlZCcsIHsgY29uZmlnOiB0aGlzLmNvbmZpZyB9KTtcbiAgfVxuXG4gIC8vIOiuvue9rueUqOaIt0lEXG4gIHB1YmxpYyBzZXRVc2VySWQodXNlcklkOiBzdHJpbmcpIHtcbiAgICB0aGlzLnVzZXJJZCA9IHVzZXJJZDtcbiAgICB0aGlzLmxvZyhMb2dMZXZlbC5JTkZPLCAnTG9nZ2VyJywgJ1VzZXIgSUQgc2V0JywgeyB1c2VySWQgfSk7XG4gIH1cblxuICAvLyDnlJ/miJDkvJror51JRFxuICBwcml2YXRlIGdlbmVyYXRlU2Vzc2lvbklkKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGBzZXNzaW9uXyR7RGF0ZS5ub3coKX1fJHtNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyLCAxMSl9YDtcbiAgfVxuXG4gIC8vIOeUn+aIkOivt+axgklEXG4gIHB1YmxpYyBnZW5lcmF0ZVJlcXVlc3RJZCgpOiBzdHJpbmcge1xuICAgIHJldHVybiBgcmVxXyR7RGF0ZS5ub3coKX1fJHtNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyLCAxMSl9YDtcbiAgfVxuXG4gIC8vIOaguOW/g+aXpeW/l+aWueazlVxuICBwcml2YXRlIGxvZyhcbiAgICBsZXZlbDogTG9nTGV2ZWwsXG4gICAgbW9kdWxlOiBzdHJpbmcsXG4gICAgbWVzc2FnZTogc3RyaW5nLFxuICAgIG1ldGFkYXRhPzogYW55LFxuICAgIGVycm9yPzogRXJyb3IsXG4gICkge1xuICAgIGlmIChsZXZlbCA8IHRoaXMuY29uZmlnLmxldmVsKSByZXR1cm47XG5cbiAgICAvLyDmo4Dmn6Xljrvph41cbiAgICBpZiAodGhpcy5jb25maWcuZW5hYmxlRGVkdXBsaWNhdGlvbikge1xuICAgICAgY29uc3QgbWVzc2FnZUtleSA9IGAke2xldmVsfS0ke21vZHVsZX0tJHttZXNzYWdlfWA7XG4gICAgICBpZiAodGhpcy5sb2dnZWRNZXNzYWdlcy5oYXMobWVzc2FnZUtleSkpIHtcbiAgICAgICAgcmV0dXJuOyAvLyDot7Pov4fph43lpI3mtojmga9cbiAgICAgIH1cbiAgICAgIHRoaXMubG9nZ2VkTWVzc2FnZXMuYWRkKG1lc3NhZ2VLZXkpO1xuICAgICAgXG4gICAgICAvLyDpmZDliLbljrvph43nvJPlrZjlpKflsI9cbiAgICAgIGlmICh0aGlzLmxvZ2dlZE1lc3NhZ2VzLnNpemUgPiA1MDApIHtcbiAgICAgICAgLy8g5riF56m65LiA5Y2K57yT5a2YXG4gICAgICAgIGNvbnN0IG1lc3NhZ2VzID0gQXJyYXkuZnJvbSh0aGlzLmxvZ2dlZE1lc3NhZ2VzKTtcbiAgICAgICAgdGhpcy5sb2dnZWRNZXNzYWdlcy5jbGVhcigpO1xuICAgICAgICBtZXNzYWdlcy5zbGljZSgtMjUwKS5mb3JFYWNoKG1zZyA9PiB0aGlzLmxvZ2dlZE1lc3NhZ2VzLmFkZChtc2cpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBlbnRyeTogTG9nRW50cnkgPSB7XG4gICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgIGxldmVsLFxuICAgICAgbGV2ZWxOYW1lOiBMb2dMZXZlbFtsZXZlbF0sXG4gICAgICBtZXNzYWdlLFxuICAgICAgbW9kdWxlLFxuICAgICAgdXNlcklkOiB0aGlzLnVzZXJJZCxcbiAgICAgIHNlc3Npb25JZDogdGhpcy5zZXNzaW9uSWQsXG4gICAgICBtZXRhZGF0YSxcbiAgICAgIGVycm9yLFxuICAgICAgc3RhY2s6IGVycm9yPy5zdGFjayxcbiAgICAgIHVybDogd2luZG93LmxvY2F0aW9uLmhyZWYsXG4gICAgICB1c2VyQWdlbnQ6IG5hdmlnYXRvci51c2VyQWdlbnQsXG4gICAgfTtcblxuICAgIC8vIOaOp+WItuWPsOi+k+WHulxuICAgIGlmICh0aGlzLmNvbmZpZy5lbmFibGVDb25zb2xlKSB7XG4gICAgICB0aGlzLmNvbnNvbGVMb2coZW50cnkpO1xuICAgIH1cblxuICAgIC8vIOS/neWtmOWIsOacrOWcsOWtmOWCqFxuICAgIGlmICh0aGlzLmNvbmZpZy5lbmFibGVMb2NhbFN0b3JhZ2UpIHtcbiAgICAgIHRoaXMuc2F2ZVRvTG9jYWxTdG9yYWdlKGVudHJ5KTtcbiAgICB9XG5cbiAgICAvLyDlj5HpgIHliLDov5znqIvmnI3liqHlmahcbiAgICBpZiAodGhpcy5jb25maWcuZW5hYmxlUmVtb3RlKSB7XG4gICAgICB0aGlzLnNlbmRUb1JlbW90ZShlbnRyeSk7XG4gICAgfVxuXG4gICAgLy8g5re75Yqg5Yiw57yT5Yay5Yy6XG4gICAgdGhpcy5sb2dCdWZmZXIucHVzaChlbnRyeSk7XG4gICAgaWYgKHRoaXMubG9nQnVmZmVyLmxlbmd0aCA+IDEwMCkge1xuICAgICAgdGhpcy5sb2dCdWZmZXIuc2hpZnQoKTtcbiAgICB9XG4gIH1cblxuICAvLyDmjqfliLblj7DovpPlh7pcbiAgcHJpdmF0ZSBjb25zb2xlTG9nKGVudHJ5OiBMb2dFbnRyeSkge1xuICAgIGNvbnN0IHN0eWxlID0gdGhpcy5nZXRDb25zb2xlU3R5bGUoZW50cnkubGV2ZWwpO1xuICAgIGNvbnN0IHByZWZpeCA9IGBbJHtlbnRyeS5sZXZlbE5hbWV9XSBbJHtlbnRyeS5tb2R1bGV9XWA7XG5cbiAgICBpZiAodGhpcy5jb25maWcudmVyYm9zZSkge1xuICAgICAgY29uc29sZS5ncm91cENvbGxhcHNlZChcbiAgICAgICAgYCVjJHtwcmVmaXh9ICR7ZW50cnkubWVzc2FnZX1gLFxuICAgICAgICBzdHlsZSxcbiAgICAgICk7XG4gICAgICBjb25zb2xlLmxvZygnVGltZXN0YW1wOicsIGVudHJ5LnRpbWVzdGFtcCk7XG4gICAgICBjb25zb2xlLmxvZygnU2Vzc2lvbjonLCBlbnRyeS5zZXNzaW9uSWQpO1xuICAgICAgaWYgKGVudHJ5LnVzZXJJZCkgY29uc29sZS5sb2coJ1VzZXI6JywgZW50cnkudXNlcklkKTtcbiAgICAgIGlmIChlbnRyeS5tZXRhZGF0YSkgY29uc29sZS5sb2coJ01ldGFkYXRhOicsIGVudHJ5Lm1ldGFkYXRhKTtcbiAgICAgIGlmIChlbnRyeS5lcnJvcikgY29uc29sZS5lcnJvcignRXJyb3I6JywgZW50cnkuZXJyb3IpO1xuICAgICAgaWYgKGVudHJ5LnN0YWNrKSBjb25zb2xlLmxvZygnU3RhY2s6JywgZW50cnkuc3RhY2spO1xuICAgICAgY29uc29sZS5sb2coJ1VSTDonLCBlbnRyeS51cmwpO1xuICAgICAgY29uc29sZS5ncm91cEVuZCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBsb2dGdW5jdGlvbiA9IHRoaXMuZ2V0Q29uc29sZUZ1bmN0aW9uKGVudHJ5LmxldmVsKTtcbiAgICAgIGxvZ0Z1bmN0aW9uKGAlYyR7cHJlZml4fWAsIHN0eWxlLCBlbnRyeS5tZXNzYWdlLCBlbnRyeS5tZXRhZGF0YSB8fCAnJyk7XG4gICAgfVxuICB9XG5cbiAgLy8g6I635Y+W5o6n5Yi25Y+w5qC35byPXG4gIHByaXZhdGUgZ2V0Q29uc29sZVN0eWxlKGxldmVsOiBMb2dMZXZlbCk6IHN0cmluZyB7XG4gICAgc3dpdGNoIChsZXZlbCkge1xuICAgICAgY2FzZSBMb2dMZXZlbC5ERUJVRzoge1xuICAgICAgICByZXR1cm4gJ2NvbG9yOiAjNkI3MjgwOyBmb250LXdlaWdodDogbm9ybWFsOyc7XG4gICAgICB9XG4gICAgICBjYXNlIExvZ0xldmVsLklORk86IHtcbiAgICAgICAgcmV0dXJuICdjb2xvcjogIzNCODJGNjsgZm9udC13ZWlnaHQ6IG5vcm1hbDsnO1xuICAgICAgfVxuICAgICAgY2FzZSBMb2dMZXZlbC5XQVJOOiB7XG4gICAgICAgIHJldHVybiAnY29sb3I6ICNGNTlFMEI7IGZvbnQtd2VpZ2h0OiBib2xkOyc7XG4gICAgICB9XG4gICAgICBjYXNlIExvZ0xldmVsLkVSUk9SOiB7XG4gICAgICAgIHJldHVybiAnY29sb3I6ICNFRjQ0NDQ7IGZvbnQtd2VpZ2h0OiBib2xkOyc7XG4gICAgICB9XG4gICAgICBjYXNlIExvZ0xldmVsLkZBVEFMOiB7XG4gICAgICAgIHJldHVybiAnY29sb3I6ICNGRkZGRkY7IGJhY2tncm91bmQtY29sb3I6ICNEQzI2MjY7IGZvbnQtd2VpZ2h0OiBib2xkOyBwYWRkaW5nOiAycHggNHB4Oyc7XG4gICAgICB9XG4gICAgICBkZWZhdWx0OiB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyDojrflj5bmjqfliLblj7Dlh73mlbBcbiAgcHJpdmF0ZSBnZXRDb25zb2xlRnVuY3Rpb24obGV2ZWw6IExvZ0xldmVsKTogKC4uLmFyZ3VtZW50c186IGFueVtdKSA9PiB2b2lkIHtcbiAgICBzd2l0Y2ggKGxldmVsKSB7XG4gICAgICBjYXNlIExvZ0xldmVsLkRFQlVHOiB7XG4gICAgICAgIHJldHVybiBjb25zb2xlLmRlYnVnO1xuICAgICAgfVxuICAgICAgY2FzZSBMb2dMZXZlbC5JTkZPOiB7XG4gICAgICAgIHJldHVybiBjb25zb2xlLmluZm87XG4gICAgICB9XG4gICAgICBjYXNlIExvZ0xldmVsLldBUk46IHtcbiAgICAgICAgcmV0dXJuIGNvbnNvbGUud2FybjtcbiAgICAgIH1cbiAgICAgIGNhc2UgTG9nTGV2ZWwuRVJST1I6XG4gICAgICBjYXNlIExvZ0xldmVsLkZBVEFMOiB7XG4gICAgICAgIHJldHVybiBjb25zb2xlLmVycm9yO1xuICAgICAgfVxuICAgICAgZGVmYXVsdDoge1xuICAgICAgICByZXR1cm4gY29uc29sZS5sb2c7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8g5L+d5a2Y5Yiw5pys5Zyw5a2Y5YKoXG4gIHByaXZhdGUgc2F2ZVRvTG9jYWxTdG9yYWdlKGVudHJ5OiBMb2dFbnRyeSkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBsb2dzID0gdGhpcy5nZXRMb2NhbFN0b3JhZ2VMb2dzKCk7XG4gICAgICBsb2dzLnB1c2goZW50cnkpO1xuXG4gICAgICAvLyDpmZDliLbml6Xlv5fmlbDph49cbiAgICAgIGlmIChsb2dzLmxlbmd0aCA+IHRoaXMuY29uZmlnLm1heExvY2FsU3RvcmFnZUxvZ3MpIHtcbiAgICAgICAgbG9ncy5zcGxpY2UoMCwgbG9ncy5sZW5ndGggLSB0aGlzLmNvbmZpZy5tYXhMb2NhbFN0b3JhZ2VMb2dzKTtcbiAgICAgIH1cblxuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2FwcF9sb2dzJywgSlNPTi5zdHJpbmdpZnkobG9ncykpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gc2F2ZSBsb2cgdG8gbG9jYWxTdG9yYWdlOicsIGVycm9yKTtcbiAgICB9XG4gIH1cblxuICAvLyDojrflj5bmnKzlnLDlrZjlgqjnmoTml6Xlv5dcbiAgcHVibGljIGdldExvY2FsU3RvcmFnZUxvZ3MoKTogTG9nRW50cnlbXSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGxvZ3MgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnYXBwX2xvZ3MnKTtcbiAgICAgIHJldHVybiBsb2dzID8gSlNPTi5wYXJzZShsb2dzKSA6IFtdO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gZ2V0IGxvZ3MgZnJvbSBsb2NhbFN0b3JhZ2U6JywgZXJyb3IpO1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgfVxuXG4gIC8vIOa4hemZpOacrOWcsOaXpeW/l1xuICBwdWJsaWMgY2xlYXJMb2NhbFN0b3JhZ2VMb2dzKCkge1xuICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdhcHBfbG9ncycpO1xuICAgIHRoaXMuaW5mbygnTG9nZ2VyJywgJ0xvY2FsIHN0b3JhZ2UgbG9ncyBjbGVhcmVkJyk7XG4gIH1cblxuICAvLyDlj5HpgIHliLDov5znqIvmnI3liqHlmahcbiAgcHJpdmF0ZSBhc3luYyBzZW5kVG9SZW1vdGUoZW50cnk6IExvZ0VudHJ5KSB7XG4gICAgaWYgKCF0aGlzLmNvbmZpZy5yZW1vdGVFbmRwb2ludCkgcmV0dXJuO1xuXG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IGZldGNoKHRoaXMuY29uZmlnLnJlbW90ZUVuZHBvaW50LCB7XG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfSxcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoZW50cnkpLFxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBzZW5kIGxvZyB0byByZW1vdGU6JywgZXJyb3IpO1xuICAgIH1cbiAgfVxuXG4gIC8vIOWFrOWFseaXpeW/l+aWueazlVxuICBwdWJsaWMgZGVidWcobW9kdWxlOiBzdHJpbmcsIG1lc3NhZ2U6IHN0cmluZywgbWV0YWRhdGE/OiBhbnkpIHtcbiAgICB0aGlzLmxvZyhMb2dMZXZlbC5ERUJVRywgbW9kdWxlLCBtZXNzYWdlLCBtZXRhZGF0YSk7XG4gIH1cblxuICBwdWJsaWMgaW5mbyhtb2R1bGU6IHN0cmluZywgbWVzc2FnZTogc3RyaW5nLCBtZXRhZGF0YT86IGFueSkge1xuICAgIHRoaXMubG9nKExvZ0xldmVsLklORk8sIG1vZHVsZSwgbWVzc2FnZSwgbWV0YWRhdGEpO1xuICB9XG5cbiAgcHVibGljIHdhcm4obW9kdWxlOiBzdHJpbmcsIG1lc3NhZ2U6IHN0cmluZywgbWV0YWRhdGE/OiBhbnkpIHtcbiAgICB0aGlzLmxvZyhMb2dMZXZlbC5XQVJOLCBtb2R1bGUsIG1lc3NhZ2UsIG1ldGFkYXRhKTtcbiAgfVxuXG4gIHB1YmxpYyBlcnJvcihtb2R1bGU6IHN0cmluZywgbWVzc2FnZTogc3RyaW5nLCBlcnJvcj86IEVycm9yIHwgYW55LCBtZXRhZGF0YT86IGFueSkge1xuICAgIHRoaXMubG9nKExvZ0xldmVsLkVSUk9SLCBtb2R1bGUsIG1lc3NhZ2UsIG1ldGFkYXRhLCBlcnJvcik7XG4gIH1cblxuICBwdWJsaWMgZmF0YWwobW9kdWxlOiBzdHJpbmcsIG1lc3NhZ2U6IHN0cmluZywgZXJyb3I/OiBFcnJvciB8IGFueSwgbWV0YWRhdGE/OiBhbnkpIHtcbiAgICB0aGlzLmxvZyhMb2dMZXZlbC5GQVRBTCwgbW9kdWxlLCBtZXNzYWdlLCBtZXRhZGF0YSwgZXJyb3IpO1xuICB9XG5cbiAgLy8g5oCn6IO96K6h5pe2XG4gIHB1YmxpYyB0aW1lKGxhYmVsOiBzdHJpbmcpIHtcbiAgICB0aGlzLnRpbWVycy5zZXQobGFiZWwsIHBlcmZvcm1hbmNlLm5vdygpKTtcbiAgICB0aGlzLmRlYnVnKCdQZXJmb3JtYW5jZScsIGBUaW1lciBzdGFydGVkOiAke2xhYmVsfWApO1xuICB9XG5cbiAgcHVibGljIHRpbWVFbmQobGFiZWw6IHN0cmluZywgbWV0YWRhdGE/OiBhbnkpIHtcbiAgICBjb25zdCBzdGFydCA9IHRoaXMudGltZXJzLmdldChsYWJlbCk7XG4gICAgaWYgKCFzdGFydCkge1xuICAgICAgdGhpcy53YXJuKCdQZXJmb3JtYW5jZScsIGBUaW1lciBub3QgZm91bmQ6ICR7bGFiZWx9YCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgZHVyYXRpb24gPSBwZXJmb3JtYW5jZS5ub3coKSAtIHN0YXJ0O1xuICAgIHRoaXMudGltZXJzLmRlbGV0ZShsYWJlbCk7XG5cbiAgICBjb25zdCBsZXZlbCA9IGR1cmF0aW9uID4gdGhpcy5jb25maWcucGVyZm9ybWFuY2VUaHJlc2hvbGQgPyBMb2dMZXZlbC5XQVJOIDogTG9nTGV2ZWwuSU5GTztcbiAgICB0aGlzLmxvZyhsZXZlbCwgJ1BlcmZvcm1hbmNlJywgYFRpbWVyIGVuZGVkOiAke2xhYmVsfWAsIHtcbiAgICAgIC4uLm1ldGFkYXRhLFxuICAgICAgZHVyYXRpb246IGAke2R1cmF0aW9uLnRvRml4ZWQoMil9bXNgLFxuICAgICAgZHVyYXRpb25NczogZHVyYXRpb24sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gZHVyYXRpb247XG4gIH1cblxuICAvLyDliIbnu4Tml6Xlv5dcbiAgcHVibGljIGdyb3VwKG1vZHVsZTogc3RyaW5nLCBncm91cE5hbWU6IHN0cmluZykge1xuICAgIGlmICh0aGlzLmNvbmZpZy5lbmFibGVDb25zb2xlICYmIHRoaXMuY29uZmlnLnZlcmJvc2UpIHtcbiAgICAgIGNvbnNvbGUuZ3JvdXAoYFske21vZHVsZX1dICR7Z3JvdXBOYW1lfWApO1xuICAgIH1cbiAgICB0aGlzLmRlYnVnKG1vZHVsZSwgYEdyb3VwIHN0YXJ0ZWQ6ICR7Z3JvdXBOYW1lfWApO1xuICB9XG5cbiAgcHVibGljIGdyb3VwRW5kKG1vZHVsZTogc3RyaW5nLCBncm91cE5hbWU6IHN0cmluZykge1xuICAgIGlmICh0aGlzLmNvbmZpZy5lbmFibGVDb25zb2xlICYmIHRoaXMuY29uZmlnLnZlcmJvc2UpIHtcbiAgICAgIGNvbnNvbGUuZ3JvdXBFbmQoKTtcbiAgICB9XG4gICAgdGhpcy5kZWJ1Zyhtb2R1bGUsIGBHcm91cCBlbmRlZDogJHtncm91cE5hbWV9YCk7XG4gIH1cblxuICAvLyDooajmoLzovpPlh7pcbiAgcHVibGljIHRhYmxlKG1vZHVsZTogc3RyaW5nLCBkYXRhOiBhbnlbXSwgY29sdW1ucz86IHN0cmluZ1tdKSB7XG4gICAgaWYgKHRoaXMuY29uZmlnLmVuYWJsZUNvbnNvbGUpIHtcbiAgICAgIGNvbnNvbGUudGFibGUoZGF0YSwgY29sdW1ucyk7XG4gICAgfVxuICAgIHRoaXMuaW5mbyhtb2R1bGUsICdUYWJsZSBkYXRhJywgeyBkYXRhLCBjb2x1bW5zIH0pO1xuICB9XG5cbiAgLy8gQVBJ5pel5b+XXG4gIHB1YmxpYyBsb2dBcGlSZXF1ZXN0KG1ldGhvZDogc3RyaW5nLCB1cmw6IHN0cmluZywgZGF0YT86IGFueSwgaGVhZGVycz86IGFueSkge1xuICAgIGNvbnN0IHJlcXVlc3RJZCA9IHRoaXMuZ2VuZXJhdGVSZXF1ZXN0SWQoKTtcbiAgICB0aGlzLmluZm8oJ0FQSScsIGAke21ldGhvZH0gJHt1cmx9YCwge1xuICAgICAgcmVxdWVzdElkLFxuICAgICAgbWV0aG9kLFxuICAgICAgdXJsLFxuICAgICAgZGF0YSxcbiAgICAgIGhlYWRlcnMsXG4gICAgfSk7XG4gICAgcmV0dXJuIHJlcXVlc3RJZDtcbiAgfVxuXG4gIHB1YmxpYyBsb2dBcGlSZXNwb25zZShyZXF1ZXN0SWQ6IHN0cmluZywgc3RhdHVzOiBudW1iZXIsIGRhdGE/OiBhbnksIGR1cmF0aW9uPzogbnVtYmVyKSB7XG4gICAgY29uc3QgbGV2ZWwgPSBzdGF0dXMgPj0gNDAwID8gTG9nTGV2ZWwuRVJST1IgOiBMb2dMZXZlbC5JTkZPO1xuICAgIHRoaXMubG9nKGxldmVsLCAnQVBJJywgYFJlc3BvbnNlICR7c3RhdHVzfWAsIHtcbiAgICAgIHJlcXVlc3RJZCxcbiAgICAgIHN0YXR1cyxcbiAgICAgIGRhdGEsXG4gICAgICBkdXJhdGlvbjogZHVyYXRpb24gPyBgJHtkdXJhdGlvbn1tc2AgOiB1bmRlZmluZWQsXG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgbG9nQXBpRXJyb3IocmVxdWVzdElkOiBzdHJpbmcsIGVycm9yOiBhbnkpIHtcbiAgICB0aGlzLmVycm9yKCdBUEknLCAnUmVxdWVzdCBmYWlsZWQnLCBlcnJvciwgeyByZXF1ZXN0SWQgfSk7XG4gIH1cblxuICAvLyBXZWJTb2NrZXTml6Xlv5dcbiAgcHVibGljIGxvZ1dzQ29ubmVjdCh1cmw6IHN0cmluZykge1xuICAgIHRoaXMuaW5mbygnV2ViU29ja2V0JywgYENvbm5lY3RlZCB0byAke3VybH1gKTtcbiAgfVxuXG4gIHB1YmxpYyBsb2dXc0Rpc2Nvbm5lY3QodXJsOiBzdHJpbmcsIHJlYXNvbj86IHN0cmluZykge1xuICAgIHRoaXMud2FybignV2ViU29ja2V0JywgYERpc2Nvbm5lY3RlZCBmcm9tICR7dXJsfWAsIHsgcmVhc29uIH0pO1xuICB9XG5cbiAgcHVibGljIGxvZ1dzTWVzc2FnZShkaXJlY3Rpb246ICdzZW5kJyB8ICdyZWNlaXZlJywgZGF0YTogYW55KSB7XG4gICAgdGhpcy5kZWJ1ZygnV2ViU29ja2V0JywgYE1lc3NhZ2UgJHtkaXJlY3Rpb259YCwgeyBkYXRhIH0pO1xuICB9XG5cbiAgcHVibGljIGxvZ1dzRXJyb3IoZXJyb3I6IGFueSkge1xuICAgIHRoaXMuZXJyb3IoJ1dlYlNvY2tldCcsICdXZWJTb2NrZXQgZXJyb3InLCBlcnJvcik7XG4gIH1cblxuICAvLyDnlKjmiLfmk43kvZzml6Xlv5dcbiAgcHVibGljIGxvZ1VzZXJBY3Rpb24oYWN0aW9uOiBzdHJpbmcsIHRhcmdldD86IHN0cmluZywgbWV0YWRhdGE/OiBhbnkpIHtcbiAgICB0aGlzLmluZm8oJ1VzZXJBY3Rpb24nLCBhY3Rpb24sIHtcbiAgICAgIHRhcmdldCxcbiAgICAgIC4uLm1ldGFkYXRhLFxuICAgIH0pO1xuICB9XG5cbiAgLy8g6aG16Z2i5oCn6IO95pel5b+XXG4gIHB1YmxpYyBsb2dQYWdlUGVyZm9ybWFuY2UoKSB7XG4gICAgaWYgKCF3aW5kb3cucGVyZm9ybWFuY2UpIHJldHVybjtcblxuICAgIGNvbnN0IHBlcmZEYXRhID0gd2luZG93LnBlcmZvcm1hbmNlLnRpbWluZztcbiAgICBjb25zdCBwYWdlTG9hZFRpbWUgPSBwZXJmRGF0YS5sb2FkRXZlbnRFbmQgLSBwZXJmRGF0YS5uYXZpZ2F0aW9uU3RhcnQ7XG4gICAgY29uc3QgY29ubmVjdFRpbWUgPSBwZXJmRGF0YS5yZXNwb25zZUVuZCAtIHBlcmZEYXRhLnJlcXVlc3RTdGFydDtcbiAgICBjb25zdCByZW5kZXJUaW1lID0gcGVyZkRhdGEuZG9tQ29tcGxldGUgLSBwZXJmRGF0YS5kb21Mb2FkaW5nO1xuXG4gICAgdGhpcy5pbmZvKCdQZXJmb3JtYW5jZScsICdQYWdlIHBlcmZvcm1hbmNlIG1ldHJpY3MnLCB7XG4gICAgICBwYWdlTG9hZFRpbWU6IGAke3BhZ2VMb2FkVGltZX1tc2AsXG4gICAgICBjb25uZWN0VGltZTogYCR7Y29ubmVjdFRpbWV9bXNgLFxuICAgICAgcmVuZGVyVGltZTogYCR7cmVuZGVyVGltZX1tc2AsXG4gICAgICBkb21Db250ZW50TG9hZGVkOiBgJHtwZXJmRGF0YS5kb21Db250ZW50TG9hZGVkRXZlbnRFbmQgLSBwZXJmRGF0YS5uYXZpZ2F0aW9uU3RhcnR9bXNgLFxuICAgIH0pO1xuICB9XG5cbiAgLy8g6K6+572u5YWo5bGA6ZSZ6K+v5aSE55CGXG4gIHByaXZhdGUgc2V0dXBHbG9iYWxFcnJvckhhbmRsZXIoKSB7XG4gICAgLy8g5qOA5p+l5piv5ZCm5Zyo5rWP6KeI5Zmo546v5aKDXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm47IC8vIOacjeWKoeerr+a4suafk+aXtui3s+i/h3dpbmRvd+aTjeS9nFxuICAgIH1cblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIChldmVudCkgPT4ge1xuICAgICAgdGhpcy5lcnJvcignR2xvYmFsJywgJ1VuY2F1Z2h0IGVycm9yJywgZXZlbnQuZXJyb3IgfHwgbmV3IEVycm9yKGV2ZW50Lm1lc3NhZ2UpLCB7XG4gICAgICAgIGZpbGVuYW1lOiBldmVudC5maWxlbmFtZSxcbiAgICAgICAgbGluZW5vOiBldmVudC5saW5lbm8sXG4gICAgICAgIGNvbG5vOiBldmVudC5jb2xubyxcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3VuaGFuZGxlZHJlamVjdGlvbicsIChldmVudCkgPT4ge1xuICAgICAgdGhpcy5lcnJvcignR2xvYmFsJywgJ1VuaGFuZGxlZCBwcm9taXNlIHJlamVjdGlvbicsIG5ldyBFcnJvcihldmVudC5yZWFzb24pLCB7XG4gICAgICAgIHJlYXNvbjogZXZlbnQucmVhc29uLFxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvLyDorr7nva7mgKfog73op4Llr5/lmahcbiAgcHJpdmF0ZSBzZXR1cFBlcmZvcm1hbmNlT2JzZXJ2ZXIoKSB7XG4gICAgLy8g5qOA5p+l5piv5ZCm5Zyo5rWP6KeI5Zmo546v5aKDXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnIHx8ICF3aW5kb3cuUGVyZm9ybWFuY2VPYnNlcnZlcikgcmV0dXJuO1xuXG4gICAgdHJ5IHtcbiAgICAgIC8vIOebkeaOp+mVv+S7u+WKoVxuICAgICAgY29uc3QgbG9uZ1Rhc2tPYnNlcnZlciA9IG5ldyBQZXJmb3JtYW5jZU9ic2VydmVyKChsaXN0KSA9PiB7XG4gICAgICAgIGZvciAoY29uc3QgZW50cnkgb2YgbGlzdC5nZXRFbnRyaWVzKCkpIHtcbiAgICAgICAgICBpZiAoZW50cnkuZHVyYXRpb24gPiA1MCkge1xuICAgICAgICAgICAgdGhpcy53YXJuKCdQZXJmb3JtYW5jZScsICdMb25nIHRhc2sgZGV0ZWN0ZWQnLCB7XG4gICAgICAgICAgICAgIGR1cmF0aW9uOiBgJHtlbnRyeS5kdXJhdGlvbi50b0ZpeGVkKDIpfW1zYCxcbiAgICAgICAgICAgICAgbmFtZTogZW50cnkubmFtZSxcbiAgICAgICAgICAgICAgc3RhcnRUaW1lOiBlbnRyeS5zdGFydFRpbWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgbG9uZ1Rhc2tPYnNlcnZlci5vYnNlcnZlKHsgZW50cnlUeXBlczogWydsb25ndGFzayddIH0pO1xuXG4gICAgICAvLyDnm5HmjqfotYTmupDliqDovb1cbiAgICAgIGNvbnN0IHJlc291cmNlT2JzZXJ2ZXIgPSBuZXcgUGVyZm9ybWFuY2VPYnNlcnZlcigobGlzdCkgPT4ge1xuICAgICAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGxpc3QuZ2V0RW50cmllcygpKSB7XG4gICAgICAgICAgY29uc3QgcmVzb3VyY2VFbnRyeSA9IGVudHJ5IGFzIFBlcmZvcm1hbmNlUmVzb3VyY2VUaW1pbmc7XG4gICAgICAgICAgaWYgKHJlc291cmNlRW50cnkuZHVyYXRpb24gPiB0aGlzLmNvbmZpZy5wZXJmb3JtYW5jZVRocmVzaG9sZCkge1xuICAgICAgICAgICAgdGhpcy53YXJuKCdQZXJmb3JtYW5jZScsICdTbG93IHJlc291cmNlIGxvYWRpbmcnLCB7XG4gICAgICAgICAgICAgIG5hbWU6IHJlc291cmNlRW50cnkubmFtZSxcbiAgICAgICAgICAgICAgZHVyYXRpb246IGAke3Jlc291cmNlRW50cnkuZHVyYXRpb24udG9GaXhlZCgyKX1tc2AsXG4gICAgICAgICAgICAgIHR5cGU6IHJlc291cmNlRW50cnkuaW5pdGlhdG9yVHlwZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXNvdXJjZU9ic2VydmVyLm9ic2VydmUoeyBlbnRyeVR5cGVzOiBbJ3Jlc291cmNlJ10gfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUud2FybignRmFpbGVkIHRvIHNldHVwIHBlcmZvcm1hbmNlIG9ic2VydmVyOicsIGVycm9yKTtcbiAgICB9XG4gIH1cblxuICAvLyDojrflj5bml6Xlv5fnu5/orqFcbiAgcHVibGljIGdldFN0YXRzKCk6IGFueSB7XG4gICAgY29uc3QgbG9ncyA9IHRoaXMuZ2V0TG9jYWxTdG9yYWdlTG9ncygpO1xuICAgIGNvbnN0IHN0YXRzID0ge1xuICAgICAgdG90YWw6IGxvZ3MubGVuZ3RoLFxuICAgICAgZGVidWc6IDAsXG4gICAgICBpbmZvOiAwLFxuICAgICAgd2FybjogMCxcbiAgICAgIGVycm9yOiAwLFxuICAgICAgZmF0YWw6IDAsXG4gICAgICBtb2R1bGVzOiBuZXcgU2V0PHN0cmluZz4oKSxcbiAgICAgIHJlY2VudEVycm9yczogW10gYXMgTG9nRW50cnlbXSxcbiAgICB9O1xuXG4gICAgZm9yIChjb25zdCBsb2cgb2YgbG9ncykge1xuICAgICAgc3dpdGNoIChsb2cubGV2ZWwpIHtcbiAgICAgICAgY2FzZSBMb2dMZXZlbC5ERUJVRzogeyBzdGF0cy5kZWJ1ZysrOyBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIExvZ0xldmVsLklORk86IHsgc3RhdHMuaW5mbysrOyBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIExvZ0xldmVsLldBUk46IHsgc3RhdHMud2FybisrOyBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIExvZ0xldmVsLkVSUk9SOiB7IHN0YXRzLmVycm9yKys7IGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgTG9nTGV2ZWwuRkFUQUw6IHsgc3RhdHMuZmF0YWwrKzsgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChsb2cubW9kdWxlKSBzdGF0cy5tb2R1bGVzLmFkZChsb2cubW9kdWxlKTtcbiAgICAgIGlmIChsb2cubGV2ZWwgPj0gTG9nTGV2ZWwuRVJST1IpIHtcbiAgICAgICAgc3RhdHMucmVjZW50RXJyb3JzLnB1c2gobG9nKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzdGF0cy5yZWNlbnRFcnJvcnMgPSBzdGF0cy5yZWNlbnRFcnJvcnMuc2xpY2UoLTEwKTtcbiAgICByZXR1cm4gc3RhdHM7XG4gIH1cblxuICAvLyDlr7zlh7rml6Xlv5dcbiAgcHVibGljIGV4cG9ydExvZ3MoZm9ybWF0OiAnanNvbicgfCAnY3N2JyA9ICdqc29uJyk6IHN0cmluZyB7XG4gICAgY29uc3QgbG9ncyA9IHRoaXMuZ2V0TG9jYWxTdG9yYWdlTG9ncygpO1xuXG4gICAgaWYgKGZvcm1hdCA9PT0gJ2pzb24nKSB7XG4gICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkobG9ncywgbnVsbCwgMik7XG4gICAgfVxuXG4gICAgICAvLyBDU1bmoLzlvI9cbiAgICAgIGNvbnN0IGhlYWRlcnMgPSBbJ3RpbWVzdGFtcCcsICdsZXZlbCcsICdtb2R1bGUnLCAnbWVzc2FnZScsICd1c2VySWQnLCAnc2Vzc2lvbklkJywgJ3VybCddO1xuICAgICAgY29uc3Qgcm93cyA9IGxvZ3MubWFwKGxvZyA9PiBbXG4gICAgICAgIGxvZy50aW1lc3RhbXAsXG4gICAgICAgIGxvZy5sZXZlbE5hbWUsXG4gICAgICAgIGxvZy5tb2R1bGUgfHwgJycsXG4gICAgICAgIGxvZy5tZXNzYWdlLFxuICAgICAgICBsb2cudXNlcklkIHx8ICcnLFxuICAgICAgICBsb2cuc2Vzc2lvbklkLFxuICAgICAgICBsb2cudXJsIHx8ICcnLFxuICAgICAgXSk7XG5cbiAgICAgIHJldHVybiBbXG4gICAgICAgIGhlYWRlcnMuam9pbignLCcpLFxuICAgICAgICAuLi5yb3dzLm1hcChyb3cgPT4gcm93Lm1hcChjZWxsID0+IGBcIiR7Y2VsbH1cImApLmpvaW4oJywnKSksXG4gICAgICBdLmpvaW4oJ1xcbicpO1xuICB9XG5cbiAgLy8gV2ViMyDkuJPnlKjml6Xlv5fmlrnms5VcbiAgcHVibGljIGxvZ1dhbGxldENvbm5lY3Rpb24oYWRkcmVzczogc3RyaW5nLCBjaGFpbklkOiBudW1iZXIpIHtcbiAgICB0aGlzLmluZm8oJ1dhbGxldCcsIGBDb25uZWN0ZWQ6ICR7YWRkcmVzc31gLCB7IGFkZHJlc3MsIGNoYWluSWQgfSk7XG4gIH1cblxuICBwdWJsaWMgbG9nV2FsbGV0RGlzY29ubmVjdGlvbigpIHtcbiAgICB0aGlzLmluZm8oJ1dhbGxldCcsICdEaXNjb25uZWN0ZWQnKTtcbiAgfVxuXG4gIHB1YmxpYyBsb2dUcmFuc2FjdGlvblN0YXJ0KGhhc2g6IHN0cmluZywgdHlwZTogc3RyaW5nKSB7XG4gICAgdGhpcy5pbmZvKCdUcmFuc2FjdGlvbicsIGBTdGFydGVkOiAke3R5cGV9YCwgeyBoYXNoLCB0eXBlIH0pO1xuICB9XG5cbiAgcHVibGljIGxvZ1RyYW5zYWN0aW9uU3VjY2VzcyhoYXNoOiBzdHJpbmcsIHR5cGU6IHN0cmluZykge1xuICAgIHRoaXMuaW5mbygnVHJhbnNhY3Rpb24nLCBgU3VjY2VzczogJHt0eXBlfWAsIHsgaGFzaCwgdHlwZSB9KTtcbiAgfVxuXG4gIHB1YmxpYyBsb2dUcmFuc2FjdGlvbkVycm9yKGVycm9yOiBhbnksIHR5cGU6IHN0cmluZykge1xuICAgIHRoaXMuZXJyb3IoJ1RyYW5zYWN0aW9uJywgYEZhaWxlZDogJHt0eXBlfWAsIGVycm9yLCB7IHR5cGUgfSk7XG4gIH1cblxuICBwdWJsaWMgbG9nQ29udHJhY3RDYWxsKGNvbnRyYWN0TmFtZTogc3RyaW5nLCBtZXRob2Q6IHN0cmluZywgYXJncz86IGFueVtdKSB7XG4gICAgdGhpcy5kZWJ1ZygnQ29udHJhY3QnLCBgQ2FsbDogJHtjb250cmFjdE5hbWV9LiR7bWV0aG9kfWAsIHsgY29udHJhY3ROYW1lLCBtZXRob2QsIGFyZ3MgfSk7XG4gIH1cblxuICAvLyDmuIXpmaTljrvph43nvJPlrZjnmoTmlrnms5VcbiAgcHVibGljIGNsZWFyRGVkdXBsaWNhdGlvbkNhY2hlKCkge1xuICAgIHRoaXMubG9nZ2VkTWVzc2FnZXMuY2xlYXIoKTtcbiAgICB0aGlzLmRlYnVnKCdMb2dnZXInLCAnRGVkdXBsaWNhdGlvbiBjYWNoZSBjbGVhcmVkJyk7XG4gIH1cbn1cblxuLy8g5Yib5bu65Y2V5L6L5a6e5L6LXG5jb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyKCk7XG5cbi8vIOWvvOWHuuWunuS+i+WSjOexu+Wei1xuZXhwb3J0IGRlZmF1bHQgbG9nZ2VyO1xuZXhwb3J0IHsgTG9nZ2VyIH07XG4iXSwibmFtZXMiOlsiTG9nTGV2ZWwiLCJMb2dnZXIiLCJjb25maWciLCJsZXZlbCIsImVudiIsImVuYWJsZUNvbnNvbGUiLCJlbmFibGVSZW1vdGUiLCJwcm9jZXNzIiwiZW5hYmxlTG9jYWxTdG9yYWdlIiwibWF4TG9jYWxTdG9yYWdlTG9ncyIsInZlcmJvc2UiLCJwZXJmb3JtYW5jZVRocmVzaG9sZCIsImVuYWJsZURlZHVwbGljYXRpb24iLCJlbnZpcm9ubWVudCIsImxvZ0J1ZmZlciIsInRpbWVycyIsIk1hcCIsImxvZ2dlZE1lc3NhZ2VzIiwiU2V0Iiwic2Vzc2lvbklkIiwiZ2VuZXJhdGVTZXNzaW9uSWQiLCJsb2FkQ29uZmlnIiwic2V0dXBHbG9iYWxFcnJvckhhbmRsZXIiLCJzZXR1cFBlcmZvcm1hbmNlT2JzZXJ2ZXIiLCJnZXRFbnZpcm9ubWVudExvZ0xldmVsIiwic2F2ZWRDb25maWciLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwiSlNPTiIsInBhcnNlIiwiZXJyb3IiLCJjb25zb2xlIiwic2V0Q29uZmlnIiwic2V0SXRlbSIsInN0cmluZ2lmeSIsImxvZyIsInNldFVzZXJJZCIsInVzZXJJZCIsIkRhdGUiLCJub3ciLCJNYXRoIiwicmFuZG9tIiwidG9TdHJpbmciLCJzbGljZSIsImdlbmVyYXRlUmVxdWVzdElkIiwibW9kdWxlIiwibWVzc2FnZSIsIm1ldGFkYXRhIiwibWVzc2FnZUtleSIsImhhcyIsImFkZCIsInNpemUiLCJtZXNzYWdlcyIsIkFycmF5IiwiZnJvbSIsImNsZWFyIiwiZm9yRWFjaCIsIm1zZyIsImVudHJ5IiwidGltZXN0YW1wIiwidG9JU09TdHJpbmciLCJsZXZlbE5hbWUiLCJzdGFjayIsInVybCIsIndpbmRvdyIsImxvY2F0aW9uIiwiaHJlZiIsInVzZXJBZ2VudCIsIm5hdmlnYXRvciIsImNvbnNvbGVMb2ciLCJzYXZlVG9Mb2NhbFN0b3JhZ2UiLCJzZW5kVG9SZW1vdGUiLCJwdXNoIiwibGVuZ3RoIiwic2hpZnQiLCJzdHlsZSIsImdldENvbnNvbGVTdHlsZSIsInByZWZpeCIsImdyb3VwQ29sbGFwc2VkIiwiZ3JvdXBFbmQiLCJsb2dGdW5jdGlvbiIsImdldENvbnNvbGVGdW5jdGlvbiIsImRlYnVnIiwiaW5mbyIsIndhcm4iLCJsb2dzIiwiZ2V0TG9jYWxTdG9yYWdlTG9ncyIsInNwbGljZSIsImNsZWFyTG9jYWxTdG9yYWdlTG9ncyIsInJlbW92ZUl0ZW0iLCJyZW1vdGVFbmRwb2ludCIsImZldGNoIiwibWV0aG9kIiwiaGVhZGVycyIsImJvZHkiLCJmYXRhbCIsInRpbWUiLCJsYWJlbCIsInNldCIsInBlcmZvcm1hbmNlIiwidGltZUVuZCIsInN0YXJ0IiwiZ2V0IiwiZHVyYXRpb24iLCJkZWxldGUiLCJ0b0ZpeGVkIiwiZHVyYXRpb25NcyIsImdyb3VwIiwiZ3JvdXBOYW1lIiwidGFibGUiLCJkYXRhIiwiY29sdW1ucyIsImxvZ0FwaVJlcXVlc3QiLCJyZXF1ZXN0SWQiLCJsb2dBcGlSZXNwb25zZSIsInN0YXR1cyIsInVuZGVmaW5lZCIsImxvZ0FwaUVycm9yIiwibG9nV3NDb25uZWN0IiwibG9nV3NEaXNjb25uZWN0IiwicmVhc29uIiwibG9nV3NNZXNzYWdlIiwiZGlyZWN0aW9uIiwibG9nV3NFcnJvciIsImxvZ1VzZXJBY3Rpb24iLCJhY3Rpb24iLCJ0YXJnZXQiLCJsb2dQYWdlUGVyZm9ybWFuY2UiLCJwZXJmRGF0YSIsInRpbWluZyIsInBhZ2VMb2FkVGltZSIsImxvYWRFdmVudEVuZCIsIm5hdmlnYXRpb25TdGFydCIsImNvbm5lY3RUaW1lIiwicmVzcG9uc2VFbmQiLCJyZXF1ZXN0U3RhcnQiLCJyZW5kZXJUaW1lIiwiZG9tQ29tcGxldGUiLCJkb21Mb2FkaW5nIiwiZG9tQ29udGVudExvYWRlZCIsImRvbUNvbnRlbnRMb2FkZWRFdmVudEVuZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudCIsIkVycm9yIiwiZmlsZW5hbWUiLCJsaW5lbm8iLCJjb2xubyIsIlBlcmZvcm1hbmNlT2JzZXJ2ZXIiLCJsb25nVGFza09ic2VydmVyIiwibGlzdCIsImdldEVudHJpZXMiLCJuYW1lIiwic3RhcnRUaW1lIiwib2JzZXJ2ZSIsImVudHJ5VHlwZXMiLCJyZXNvdXJjZU9ic2VydmVyIiwicmVzb3VyY2VFbnRyeSIsInR5cGUiLCJpbml0aWF0b3JUeXBlIiwiZ2V0U3RhdHMiLCJzdGF0cyIsInRvdGFsIiwibW9kdWxlcyIsInJlY2VudEVycm9ycyIsImV4cG9ydExvZ3MiLCJmb3JtYXQiLCJyb3dzIiwibWFwIiwiam9pbiIsInJvdyIsImNlbGwiLCJsb2dXYWxsZXRDb25uZWN0aW9uIiwiYWRkcmVzcyIsImNoYWluSWQiLCJsb2dXYWxsZXREaXNjb25uZWN0aW9uIiwibG9nVHJhbnNhY3Rpb25TdGFydCIsImhhc2giLCJsb2dUcmFuc2FjdGlvblN1Y2Nlc3MiLCJsb2dUcmFuc2FjdGlvbkVycm9yIiwibG9nQ29udHJhY3RDYWxsIiwiY29udHJhY3ROYW1lIiwiYXJncyIsImNsZWFyRGVkdXBsaWNhdGlvbkNhY2hlIiwibG9nZ2VyIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./lib/logger.ts\n");

/***/ })

};
;