{
  "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "ExceedsWithdrawLimit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requested",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "available",
          "type": "uint256"
        }
      ],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "min",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "name": "InvalidInvestmentAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPrice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidReferrer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PriceExpired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProductNotActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RewardAlreadyClaimed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RewardPeriodNotStarted",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnauthorizedAccess",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "BatchDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "orderId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "orderId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "ETHDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dailyLimit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "singleLimit",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "LimitsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "PriceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum Treasury.ProductType",
          "name": "productType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ProductPurchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum Treasury.ProductType",
          "name": "productType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ethAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "ProductPurchasedWithETH",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum Treasury.ProductType",
          "name": "productType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minInvestment",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxInvestment",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "apr",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "name": "ProductUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "ReferralCommissionPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "ReferralSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "RewardClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalReward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "RewardPeriodStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "reason",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "reason",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OPERATOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WITHDRAWER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "orderIds",
          "type": "bytes32[]"
        }
      ],
      "name": "batchDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        }
      ],
      "name": "claimPeriodReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimReferralCommission",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentRewardPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dailyWithdrawLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "dailyWithdrawn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "orderId",
          "type": "bytes32"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ethToUsdtRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentPriceInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastUpdate",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isValid",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getETHBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        }
      ],
      "name": "getPeriodRewardInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalReward",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "claimed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum Treasury.ProductType",
          "name": "productType",
          "type": "uint8"
        }
      ],
      "name": "getProductInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "minInvestment",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxInvestment",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "apr",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            }
          ],
          "internalType": "struct Treasury.ProductInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTodayWithdrawn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalETHDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserETHDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserInvestments",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserReferralInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "commissionEarned",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalReferredUsers",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_usdtToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_operators",
          "type": "address[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastPriceUpdate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRewardTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "periodRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceValidityPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum Treasury.ProductType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "products",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "minInvestment",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxInvestment",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "apr",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum Treasury.ProductType",
          "name": "productType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "purchaseProduct",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum Treasury.ProductType",
          "name": "productType",
          "type": "uint8"
        }
      ],
      "name": "purchaseProductWithETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum Treasury.ProductType",
          "name": "productType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        }
      ],
      "name": "purchaseProductWithReferral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "qaCard",
      "outputs": [
        {
          "internalType": "contract QACard",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "referralCommissionRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "referralCommissions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPeriodDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_qaCard",
          "type": "address"
        }
      ],
      "name": "setQACard",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "name": "setReferralCommissionRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        }
      ],
      "name": "setReferrer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dailyLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_singleLimit",
          "type": "uint256"
        }
      ],
      "name": "setWithdrawLimits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "singleWithdrawLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        }
      ],
      "name": "startRewardPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalEthDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalReferrals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalRewardPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalWithdrawals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dailyLimit",
          "type": "uint256"
        }
      ],
      "name": "updateDailyWithdrawalLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newRate",
          "type": "uint256"
        }
      ],
      "name": "updateETHPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum Treasury.ProductType",
          "name": "productType",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "minInvestment",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxInvestment",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "apr",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "name": "updateProduct",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdtToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userEthDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userReferrers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userRewardsClaimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "reason",
          "type": "bytes32"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xc5004d6795e7d2a2fff1b30b4282678c22872bcca23f086b8dd3e80155963904",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
    "transactionIndex": 0,
    "gasUsed": "3257590",
    "logsBloom": "0x
    "blockHash": "0x4fb59b344175d4beedadcb6fb663f9c85ad15085146cef9787164c9883f0d99a",
    "transactionHash": "0xc5004d6795e7d2a2fff1b30b4282678c22872bcca23f086b8dd3e80155963904",
    "logs": [],
    "blockNumber": 5,
    "cumulativeGasUsed": "3257590",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f01db9d8ae6e5e0738d4522dfad26953",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"ExceedsWithdrawLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"}],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"InvalidInvestmentAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidReferrer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProductNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardAlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardPeriodNotStarted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedAccess\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"BatchDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ETHDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dailyLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"singleLimit\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"LimitsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum Treasury.ProductType\",\"name\":\"productType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ProductPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum Treasury.ProductType\",\"name\":\"productType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ProductPurchasedWithETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum Treasury.ProductType\",\"name\":\"productType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minInvestment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxInvestment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"apr\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"ProductUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ReferralCommissionPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ReferralSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RewardPeriodStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"reason\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"reason\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAWER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"orderIds\",\"type\":\"bytes32[]\"}],\"name\":\"batchDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"claimPeriodReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReferralCommission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRewardPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dailyWithdrawLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dailyWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethToUsdtRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPriceInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getETHBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"getPeriodRewardInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Treasury.ProductType\",\"name\":\"productType\",\"type\":\"uint8\"}],\"name\":\"getProductInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"minInvestment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxInvestment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"internalType\":\"struct Treasury.ProductInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTodayWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalETHDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserETHDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserInvestments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserReferralInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"commissionEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReferredUsers\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdtToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_operators\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPriceUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"periodRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceValidityPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Treasury.ProductType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"products\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"minInvestment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxInvestment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Treasury.ProductType\",\"name\":\"productType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"purchaseProduct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Treasury.ProductType\",\"name\":\"productType\",\"type\":\"uint8\"}],\"name\":\"purchaseProductWithETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Treasury.ProductType\",\"name\":\"productType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"purchaseProductWithReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"qaCard\",\"outputs\":[{\"internalType\":\"contract QACard\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralCommissionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralCommissions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPeriodDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_qaCard\",\"type\":\"address\"}],\"name\":\"setQACard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setReferralCommissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"setReferrer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dailyLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_singleLimit\",\"type\":\"uint256\"}],\"name\":\"setWithdrawLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"singleWithdrawLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"startRewardPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEthDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalReferrals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dailyLimit\",\"type\":\"uint256\"}],\"name\":\"updateDailyWithdrawalLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"updateETHPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Treasury.ProductType\",\"name\":\"productType\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"minInvestment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxInvestment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"updateProduct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userEthDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userReferrers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userRewardsClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"reason\",\"type\":\"bytes32\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"\\u8d44\\u91d1\\u91d1\\u5e93\\u5408\\u7ea6 - \\u8d1f\\u8d23USDT\\u548cETH\\u7684\\u5b58\\u50a8\\u548c\\u63d0\\u53d6  \\u529f\\u80fd\\u7279\\u6027: - USDT/ETH\\u5b58\\u6b3e\\u548c\\u63d0\\u53d6 - ETH\\u76f4\\u63a5\\u652f\\u4ed8\\u8d2d\\u4e70\\u4ea7\\u54c1\\u5e76\\u94f8\\u9020NFT - \\u591a\\u91cd\\u7b7e\\u540d\\u63a7\\u5236 - \\u7d27\\u6025\\u6682\\u505c\\u673a\\u5236 - \\u89d2\\u8272\\u6743\\u9650\\u63a7\\u5236 - \\u4e8b\\u4ef6\\u65e5\\u5fd7\\u5b8c\\u6574\\u8bb0\\u5f55\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"batchDeposit(uint256[],bytes32[])\":{\"details\":\"\\u6279\\u91cf\\u5b58\\u5165USDT (Gas\\u4f18\\u5316)\",\"params\":{\"amounts\":\"\\u5b58\\u5165\\u91d1\\u989d\\u6570\\u7ec4\",\"orderIds\":\"\\u8ba2\\u5355ID\\u6570\\u7ec4\"}},\"claimPeriodReward(uint256)\":{\"details\":\"\\u9886\\u53d6\\u671f\\u95f4\\u5956\\u52b1\"},\"claimReferralCommission()\":{\"details\":\"\\u9886\\u53d6\\u63a8\\u8350\\u4f63\\u91d1\"},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"deposit(uint256,bytes32)\":{\"details\":\"\\u7528\\u6237\\u5b58\\u5165USDT\",\"params\":{\"amount\":\"\\u5b58\\u5165\\u91d1\\u989d\",\"orderId\":\"\\u8ba2\\u5355ID (\\u94fe\\u4e0b\\u751f\\u6210)\"}},\"emergencyWithdraw()\":{\"details\":\"\\u7d27\\u6025\\u63d0\\u53d6\\u5168\\u90e8\\u4f59\\u989d (\\u5411\\u540e\\u517c\\u5bb9)\"},\"emergencyWithdraw(address,uint256)\":{\"details\":\"\\u7d27\\u6025\\u63d0\\u53d6 (\\u7ed5\\u8fc7\\u9650\\u5236)\",\"params\":{\"amount\":\"\\u63d0\\u53d6\\u91d1\\u989d\",\"to\":\"\\u63a5\\u6536\\u5730\\u5740\"}},\"getBalance()\":{\"details\":\"\\u83b7\\u53d6\\u5408\\u7ea6USDT\\u4f59\\u989d\"},\"getCurrentPriceInfo()\":{\"details\":\"\\u83b7\\u53d6\\u5f53\\u524dETH\\u4ef7\\u683c\\u4fe1\\u606f\"},\"getETHBalance()\":{\"details\":\"\\u83b7\\u53d6\\u5408\\u7ea6ETH\\u4f59\\u989d\"},\"getPeriodRewardInfo(uint256)\":{\"details\":\"\\u83b7\\u53d6\\u671f\\u95f4\\u5956\\u52b1\\u4fe1\\u606f\"},\"getProductInfo(uint8)\":{\"details\":\"\\u83b7\\u53d6\\u4ea7\\u54c1\\u4fe1\\u606f\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getTodayWithdrawn()\":{\"details\":\"\\u83b7\\u53d6\\u4eca\\u65e5\\u5df2\\u63d0\\u53d6\\u91d1\\u989d\"},\"getTotalETHDeposits()\":{\"details\":\"\\u83b7\\u53d6\\u603bETH\\u5b58\\u6b3e\"},\"getUserDeposits(address)\":{\"details\":\"\\u83b7\\u53d6\\u7528\\u6237\\u5b58\\u6b3e\\u4f59\\u989d\"},\"getUserETHDeposits(address)\":{\"details\":\"\\u83b7\\u53d6\\u7528\\u6237ETH\\u5b58\\u6b3e\\u4f59\\u989d\"},\"getUserInvestments(address)\":{\"details\":\"\\u83b7\\u53d6\\u7528\\u6237\\u6295\\u8d44\\u4f59\\u989d (\\u5411\\u540e\\u517c\\u5bb9)\"},\"getUserReferralInfo(address)\":{\"details\":\"\\u83b7\\u53d6\\u7528\\u6237\\u63a8\\u8350\\u4fe1\\u606f\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,address,address[])\":{\"details\":\"\\u521d\\u59cb\\u5316\\u5408\\u7ea6\",\"params\":{\"_admin\":\"\\u7ba1\\u7406\\u5458\\u5730\\u5740\",\"_operators\":\"\\u64cd\\u4f5c\\u5458\\u5730\\u5740\\u6570\\u7ec4\",\"_usdtToken\":\"USDT\\u4ee3\\u5e01\\u5408\\u7ea6\\u5730\\u5740\"}},\"pause()\":{\"details\":\"\\u6682\\u505c\\u5408\\u7ea6\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"purchaseProduct(uint8,uint256)\":{\"details\":\"\\u8d2d\\u4e70\\u4ea7\\u54c1\",\"params\":{\"amount\":\"\\u6295\\u8d44\\u91d1\\u989d\",\"productType\":\"\\u4ea7\\u54c1\\u7c7b\\u578b\"}},\"purchaseProductWithETH(uint8)\":{\"details\":\"\\u4f7f\\u7528ETH\\u8d2d\\u4e70\\u4ea7\\u54c1\",\"params\":{\"productType\":\"\\u4ea7\\u54c1\\u7c7b\\u578b\"}},\"purchaseProductWithReferral(uint8,uint256,address)\":{\"details\":\"\\u8d2d\\u4e70\\u4ea7\\u54c1\\uff08\\u5e26\\u63a8\\u8350\\uff09\",\"params\":{\"amount\":\"\\u6295\\u8d44\\u91d1\\u989d\",\"productType\":\"\\u4ea7\\u54c1\\u7c7b\\u578b\",\"referrer\":\"\\u63a8\\u8350\\u4eba\\u5730\\u5740\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setQACard(address)\":{\"details\":\"\\u8bbe\\u7f6eQACard\\u5408\\u7ea6\\u5730\\u5740\"},\"setReferralCommissionRate(uint256)\":{\"details\":\"\\u8bbe\\u7f6e\\u63a8\\u8350\\u4f63\\u91d1\\u6bd4\\u4f8b\"},\"setReferrer(address)\":{\"details\":\"\\u8bbe\\u7f6e\\u63a8\\u8350\\u4eba\\uff08\\u5916\\u90e8\\u8c03\\u7528\\uff09\"},\"setWithdrawLimits(uint256,uint256)\":{\"details\":\"\\u8bbe\\u7f6e\\u63d0\\u53d6\\u9650\\u5236\",\"params\":{\"_dailyLimit\":\"\\u6bcf\\u65e5\\u63d0\\u53d6\\u9650\\u5236\",\"_singleLimit\":\"\\u5355\\u6b21\\u63d0\\u53d6\\u9650\\u5236\"}},\"startRewardPeriod(uint256)\":{\"details\":\"\\u542f\\u52a8\\u65b0\\u7684\\u5956\\u52b1\\u671f\\u95f4\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"unpause()\":{\"details\":\"\\u6062\\u590d\\u5408\\u7ea6\"},\"updateDailyWithdrawalLimit(uint256)\":{\"details\":\"\\u66f4\\u65b0\\u6bcf\\u65e5\\u63d0\\u53d6\\u9650\\u5236 (\\u5411\\u540e\\u517c\\u5bb9)\",\"params\":{\"_dailyLimit\":\"\\u6bcf\\u65e5\\u63d0\\u53d6\\u9650\\u5236\"}},\"updateETHPrice(uint256)\":{\"details\":\"\\u66f4\\u65b0ETH\\u4ef7\\u683c\"},\"updateProduct(uint8,string,uint256,uint256,uint256,uint256,bool)\":{\"details\":\"\\u66f4\\u65b0\\u4ea7\\u54c1\\u4fe1\\u606f\"},\"withdraw(address,uint256,bytes32)\":{\"details\":\"\\u8fd0\\u8425\\u63d0\\u53d6USDT\",\"params\":{\"amount\":\"\\u63d0\\u53d6\\u91d1\\u989d\",\"reason\":\"\\u63d0\\u53d6\\u539f\\u56e0\",\"to\":\"\\u63a5\\u6536\\u5730\\u5740\"}},\"withdraw(uint256)\":{\"details\":\"\\u8fd0\\u8425\\u63d0\\u53d6USDT (\\u5411\\u540e\\u517c\\u5bb9)\",\"params\":{\"amount\":\"\\u63d0\\u53d6\\u91d1\\u989d\"}},\"withdrawETH(address,uint256)\":{\"details\":\"\\u63d0\\u53d6ETH\"}},\"title\":\"Treasury\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Treasury.sol\":\"Treasury\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\\n    struct AccessControlStorage {\\n        mapping(bytes32 role => RoleData) _roles;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.AccessControl\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\\n\\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\\n        assembly {\\n            $.slot := AccessControlStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        $._roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (!hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x85a70e2b1b65e9ba456add364d22b97eb9944083df1c39c0b4bd6a4b5aa386a4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reinitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Pointer to storage slot. Allows integrators to override it with a custom storage location.\\n     *\\n     * NOTE: Consider following the ERC-7201 formula to derive storage locations.\\n     */\\n    function _initializableStorageSlot() internal pure virtual returns (bytes32) {\\n        return INITIALIZABLE_STORAGE;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        bytes32 slot = _initializableStorageSlot();\\n        assembly {\\n            $.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdb4d24ee2c087c391d587cd17adfe5b3f9d93b3110b1388c2ab6c7c0ad1dcd05\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport {IERC1155MetadataURI} from \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\nimport {ERC1155Utils} from \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Utils.sol\\\";\\nimport {ContextUpgradeable} from \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Arrays} from \\\"@openzeppelin/contracts/utils/Arrays.sol\\\";\\nimport {IERC1155Errors} from \\\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n */\\nabstract contract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155, IERC1155MetadataURI, IERC1155Errors {\\n    using Arrays for uint256[];\\n    using Arrays for address[];\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC1155\\n    struct ERC1155Storage {\\n        mapping(uint256 id => mapping(address account => uint256)) _balances;\\n\\n        mapping(address account => mapping(address operator => bool)) _operatorApprovals;\\n\\n        // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n        string _uri;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ERC1155\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ERC1155StorageLocation = 0x88be536d5240c274a3b1d3a1be54482fd9caa294f08c62a7cde569f49a3c4500;\\n\\n    function _getERC1155Storage() private pure returns (ERC1155Storage storage $) {\\n        assembly {\\n            $.slot := ERC1155StorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\\n        _setURI(uri_);\\n    }\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the ERC].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256 /* id */) public view virtual returns (string memory) {\\n        ERC1155Storage storage $ = _getERC1155Storage();\\n        return $._uri;\\n    }\\n\\n    /// @inheritdoc IERC1155\\n    function balanceOf(address account, uint256 id) public view virtual returns (uint256) {\\n        ERC1155Storage storage $ = _getERC1155Storage();\\n        return $._balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    ) public view virtual returns (uint256[] memory) {\\n        if (accounts.length != ids.length) {\\n            revert ERC1155InvalidArrayLength(ids.length, accounts.length);\\n        }\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts.unsafeMemoryAccess(i), ids.unsafeMemoryAccess(i));\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /// @inheritdoc IERC1155\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /// @inheritdoc IERC1155\\n    function isApprovedForAll(address account, address operator) public view virtual returns (bool) {\\n        ERC1155Storage storage $ = _getERC1155Storage();\\n        return $._operatorApprovals[account][operator];\\n    }\\n\\n    /// @inheritdoc IERC1155\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) public virtual {\\n        address sender = _msgSender();\\n        if (from != sender && !isApprovedForAll(from, sender)) {\\n            revert ERC1155MissingApprovalForAll(sender, from);\\n        }\\n        _safeTransferFrom(from, to, id, value, data);\\n    }\\n\\n    /// @inheritdoc IERC1155\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) public virtual {\\n        address sender = _msgSender();\\n        if (from != sender && !isApprovedForAll(from, sender)) {\\n            revert ERC1155MissingApprovalForAll(sender, from);\\n        }\\n        _safeBatchTransferFrom(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`. Will mint (or burn) if `from`\\n     * (or `to`) is the zero address.\\n     *\\n     * Emits a {TransferSingle} event if the arrays contain one element, and {TransferBatch} otherwise.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement either {IERC1155Receiver-onERC1155Received}\\n     *   or {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\\n     * - `ids` and `values` must have the same length.\\n     *\\n     * NOTE: The ERC-1155 acceptance check is not performed in this function. See {_updateWithAcceptanceCheck} instead.\\n     */\\n    function _update(address from, address to, uint256[] memory ids, uint256[] memory values) internal virtual {\\n        ERC1155Storage storage $ = _getERC1155Storage();\\n        if (ids.length != values.length) {\\n            revert ERC1155InvalidArrayLength(ids.length, values.length);\\n        }\\n\\n        address operator = _msgSender();\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids.unsafeMemoryAccess(i);\\n            uint256 value = values.unsafeMemoryAccess(i);\\n\\n            if (from != address(0)) {\\n                uint256 fromBalance = $._balances[id][from];\\n                if (fromBalance < value) {\\n                    revert ERC1155InsufficientBalance(from, fromBalance, value, id);\\n                }\\n                unchecked {\\n                    // Overflow not possible: value <= fromBalance\\n                    $._balances[id][from] = fromBalance - value;\\n                }\\n            }\\n\\n            if (to != address(0)) {\\n                $._balances[id][to] += value;\\n            }\\n        }\\n\\n        if (ids.length == 1) {\\n            uint256 id = ids.unsafeMemoryAccess(0);\\n            uint256 value = values.unsafeMemoryAccess(0);\\n            emit TransferSingle(operator, from, to, id, value);\\n        } else {\\n            emit TransferBatch(operator, from, to, ids, values);\\n        }\\n    }\\n\\n    /**\\n     * @dev Version of {_update} that performs the token acceptance check by calling\\n     * {IERC1155Receiver-onERC1155Received} or {IERC1155Receiver-onERC1155BatchReceived} on the receiver address if it\\n     * contains code (eg. is a smart contract at the moment of execution).\\n     *\\n     * IMPORTANT: Overriding this function is discouraged because it poses a reentrancy risk from the receiver. So any\\n     * update to the contract state after this function would break the check-effect-interaction pattern. Consider\\n     * overriding {_update} instead.\\n     */\\n    function _updateWithAcceptanceCheck(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal virtual {\\n        _update(from, to, ids, values);\\n        if (to != address(0)) {\\n            address operator = _msgSender();\\n            if (ids.length == 1) {\\n                uint256 id = ids.unsafeMemoryAccess(0);\\n                uint256 value = values.unsafeMemoryAccess(0);\\n                ERC1155Utils.checkOnERC1155Received(operator, from, to, id, value, data);\\n            } else {\\n                ERC1155Utils.checkOnERC1155BatchReceived(operator, from, to, ids, values, data);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     * - `ids` and `values` must have the same length.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the ERC].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the values in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        ERC1155Storage storage $ = _getERC1155Storage();\\n        $._uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens of type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address to, uint256 id, uint256 value, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory values, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens of type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `value` amount of tokens of type `id`.\\n     */\\n    function _burn(address from, uint256 id, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `value` amount of tokens of type `id`.\\n     * - `ids` and `values` must have the same length.\\n     */\\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory values) internal {\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the zero address.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        ERC1155Storage storage $ = _getERC1155Storage();\\n        if (operator == address(0)) {\\n            revert ERC1155InvalidOperator(address(0));\\n        }\\n        $._operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Creates an array in memory with only one value for each of the elements provided.\\n     */\\n    function _asSingletonArrays(\\n        uint256 element1,\\n        uint256 element2\\n    ) private pure returns (uint256[] memory array1, uint256[] memory array2) {\\n        assembly (\\\"memory-safe\\\") {\\n            // Load the free memory pointer\\n            array1 := mload(0x40)\\n            // Set array length to 1\\n            mstore(array1, 1)\\n            // Store the single element at the next word after the length (where content starts)\\n            mstore(add(array1, 0x20), element1)\\n\\n            // Repeat for next array locating it right after the first array\\n            array2 := add(array1, 0x40)\\n            mstore(array2, 1)\\n            mstore(add(array2, 0x20), element2)\\n\\n            // Update the free memory pointer by pointing after the second array\\n            mstore(0x40, add(array2, 0x40))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x366f804cd7571a67c51bec726d9f25b44cb0fb52bdeeed88b397c24c7ea0865f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/extensions/ERC1155Burnable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC1155Upgradeable} from \\\"../ERC1155Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\\n * own tokens and those that they have been approved to use.\\n */\\nabstract contract ERC1155BurnableUpgradeable is Initializable, ERC1155Upgradeable {\\n    function __ERC1155Burnable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Burnable_init_unchained() internal onlyInitializing {\\n    }\\n    function burn(address account, uint256 id, uint256 value) public virtual {\\n        if (account != _msgSender() && !isApprovedForAll(account, _msgSender())) {\\n            revert ERC1155MissingApprovalForAll(_msgSender(), account);\\n        }\\n\\n        _burn(account, id, value);\\n    }\\n\\n    function burnBatch(address account, uint256[] memory ids, uint256[] memory values) public virtual {\\n        if (account != _msgSender() && !isApprovedForAll(account, _msgSender())) {\\n            revert ERC1155MissingApprovalForAll(_msgSender(), account);\\n        }\\n\\n        _burnBatch(account, ids, values);\\n    }\\n}\\n\",\"keccak256\":\"0x235663392e8add928a0bfa535d22c7304eb81703f6c73e755f3145120d47319e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC1155/extensions/ERC1155Supply.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC1155Upgradeable} from \\\"../ERC1155Upgradeable.sol\\\";\\nimport {Arrays} from \\\"@openzeppelin/contracts/utils/Arrays.sol\\\";\\nimport {Initializable} from \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of ERC-1155 that adds tracking of total supply per id.\\n *\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\n * corresponding is an NFT, there is no guarantees that no other token with the\\n * same id are not going to be minted.\\n *\\n * NOTE: This contract implies a global limit of 2**256 - 1 to the number of tokens\\n * that can be minted.\\n *\\n * CAUTION: This extension should not be added in an upgrade to an already deployed contract.\\n */\\nabstract contract ERC1155SupplyUpgradeable is Initializable, ERC1155Upgradeable {\\n    using Arrays for uint256[];\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC1155Supply\\n    struct ERC1155SupplyStorage {\\n        mapping(uint256 id => uint256) _totalSupply;\\n        uint256 _totalSupplyAll;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ERC1155Supply\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ERC1155SupplyStorageLocation = 0x4a593662ee04d27b6a00ebb31be7fe0c102c2ade82a7c5d764f2df05dc4e2800;\\n\\n    function _getERC1155SupplyStorage() private pure returns (ERC1155SupplyStorage storage $) {\\n        assembly {\\n            $.slot := ERC1155SupplyStorageLocation\\n        }\\n    }\\n\\n    function __ERC1155Supply_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Supply_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Total value of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        ERC1155SupplyStorage storage $ = _getERC1155SupplyStorage();\\n        return $._totalSupply[id];\\n    }\\n\\n    /**\\n     * @dev Total value of tokens.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        ERC1155SupplyStorage storage $ = _getERC1155SupplyStorage();\\n        return $._totalSupplyAll;\\n    }\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) public view virtual returns (bool) {\\n        return totalSupply(id) > 0;\\n    }\\n\\n    /// @inheritdoc ERC1155Upgradeable\\n    function _update(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) internal virtual override {\\n        ERC1155SupplyStorage storage $ = _getERC1155SupplyStorage();\\n        super._update(from, to, ids, values);\\n\\n        if (from == address(0)) {\\n            uint256 totalMintValue = 0;\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                uint256 value = values.unsafeMemoryAccess(i);\\n                // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n                $._totalSupply[ids.unsafeMemoryAccess(i)] += value;\\n                totalMintValue += value;\\n            }\\n            // Overflow check required: The rest of the code assumes that totalSupplyAll never overflows\\n            $._totalSupplyAll += totalMintValue;\\n        }\\n\\n        if (to == address(0)) {\\n            uint256 totalBurnValue = 0;\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                uint256 value = values.unsafeMemoryAccess(i);\\n\\n                unchecked {\\n                    // Overflow not possible: values[i] <= balanceOf(from, ids[i]) <= totalSupply(ids[i])\\n                    $._totalSupply[ids.unsafeMemoryAccess(i)] -= value;\\n                    // Overflow not possible: sum_i(values[i]) <= sum_i(totalSupply(ids[i])) <= totalSupplyAll\\n                    totalBurnValue += value;\\n                }\\n            }\\n            unchecked {\\n                // Overflow not possible: totalBurnValue = sum_i(values[i]) <= sum_i(totalSupply(ids[i])) <= totalSupplyAll\\n                $._totalSupplyAll -= totalBurnValue;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb9823676cbde3953a1578db316962b3c14d1518c246293d92acf9bb276ce5da4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Pausable\\n    struct PausableStorage {\\n        bool _paused;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Pausable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant PausableStorageLocation = 0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300;\\n\\n    function _getPausableStorage() private pure returns (PausableStorage storage $) {\\n        assembly {\\n            $.slot := PausableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    function __Pausable_init() internal onlyInitializing {\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        PausableStorage storage $ = _getPausableStorage();\\n        return $._paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xa6bf6b7efe0e6625a9dcd30c5ddf52c4c24fe8372f37c7de9dbf5034746768d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x361126a17677994081cd9cb69c3f50cffff6e920d25cb7e428acdb1ae41d1866\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x6694b63ddb2c59bbe341c846171798350e8f72fa02189fcdeaca864e28b54e1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (access/IAccessControl.sol)\\n\\npragma solidity >=0.8.4;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC-165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted to signal this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xbff9f59c84e5337689161ce7641c0ef8e872d6a7536fbc1f5133f128887aba3c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0xd5ea07362ab630a6a3dee4285a74cf2377044ca2e4be472755ad64d7c5d4b69d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0x0afcb7e740d1537b252cb2676f600465ce6938398569f09ba1b9ca240dde2dfc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x1a6221315ce0307746c2c4827c125d821ee796c74a676787762f4778671d4f44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/draft-IERC6093.sol)\\npragma solidity >=0.8.4;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x19fdfb0f3b89a230e7dbd1cf416f1a6b531a3ee5db4da483f946320fc74afc0e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC-1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[ERC].\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the zero address.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {IERC1155Receiver-onERC1155Received} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {IERC1155Receiver-onERC1155BatchReceived} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf189f9b417fe1931e1ab706838aff1128528694a9fcdb5ff7665197f2ca57d09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface that must be implemented by smart contracts in order to receive\\n * ERC-1155 token transfers.\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC-1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC-1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x6ec6d7fce29668ede560c7d2e10f9d10de3473f5298e431e70a5767db42fa620\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC1155} from \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[ERC].\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x98c32de9b02f43eba7c0aba9fadf331cffb35a8d2076dce1d556c8f2cad704aa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC1155/utils/ERC1155Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155Receiver} from \\\"../IERC1155Receiver.sol\\\";\\nimport {IERC1155Errors} from \\\"../../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Library that provide common ERC-1155 utility functions.\\n *\\n * See https://eips.ethereum.org/EIPS/eip-1155[ERC-1155].\\n *\\n * _Available since v5.1._\\n */\\nlibrary ERC1155Utils {\\n    /**\\n     * @dev Performs an acceptance check for the provided `operator` by calling {IERC1155Receiver-onERC1155Received}\\n     * on the `to` address. The `operator` is generally the address that initiated the token transfer (i.e. `msg.sender`).\\n     *\\n     * The acceptance call is not executed and treated as a no-op if the target address doesn't contain code (i.e. an EOA).\\n     * Otherwise, the recipient must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value to accept\\n     * the transfer.\\n     */\\n    function checkOnERC1155Received(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length > 0) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, value, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    // Tokens rejected\\n                    revert IERC1155Errors.ERC1155InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    // non-IERC1155Receiver implementer\\n                    revert IERC1155Errors.ERC1155InvalidReceiver(to);\\n                } else {\\n                    assembly (\\\"memory-safe\\\") {\\n                        revert(add(reason, 0x20), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a batch acceptance check for the provided `operator` by calling {IERC1155Receiver-onERC1155BatchReceived}\\n     * on the `to` address. The `operator` is generally the address that initiated the token transfer (i.e. `msg.sender`).\\n     *\\n     * The acceptance call is not executed and treated as a no-op if the target address doesn't contain code (i.e. an EOA).\\n     * Otherwise, the recipient must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value to accept\\n     * the transfer.\\n     */\\n    function checkOnERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length > 0) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, values, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    // Tokens rejected\\n                    revert IERC1155Errors.ERC1155InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    // non-IERC1155Receiver implementer\\n                    revert IERC1155Errors.ERC1155InvalidReceiver(to);\\n                } else {\\n                    assembly (\\\"memory-safe\\\") {\\n                        revert(add(reason, 0x20), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaeca1511f7da49bdb16e44aa0f09dca76b51ba079bd068b2f80b8fe6d22b5fa1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x982c5cb790ab941d1e04f807120a71709d4c313ba0bfc16006447ffbd27fbbd5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Arrays.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/Arrays.sol)\\n// This file was procedurally generated from scripts/generate/templates/Arrays.js.\\n\\npragma solidity ^0.8.20;\\n\\nimport {Comparators} from \\\"./Comparators.sol\\\";\\nimport {SlotDerivation} from \\\"./SlotDerivation.sol\\\";\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\nimport {Math} from \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary Arrays {\\n    using SlotDerivation for bytes32;\\n    using StorageSlot for bytes32;\\n\\n    /**\\n     * @dev Sort an array of uint256 (in memory) following the provided comparator function.\\n     *\\n     * This function does the sorting \\\"in place\\\", meaning that it overrides the input. The object is returned for\\n     * convenience, but that returned value can be discarded safely if the caller has a memory pointer to the array.\\n     *\\n     * NOTE: this function's cost is `O(n \\u00b7 log(n))` in average and `O(n\\u00b2)` in the worst case, with n the length of the\\n     * array. Using it in view functions that are executed through `eth_call` is safe, but one should be very careful\\n     * when executing this as part of a transaction. If the array being sorted is too large, the sort operation may\\n     * consume more gas than is available in a block, leading to potential DoS.\\n     *\\n     * IMPORTANT: Consider memory side-effects when using custom comparator functions that access memory in an unsafe way.\\n     */\\n    function sort(\\n        uint256[] memory array,\\n        function(uint256, uint256) pure returns (bool) comp\\n    ) internal pure returns (uint256[] memory) {\\n        _quickSort(_begin(array), _end(array), comp);\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Variant of {sort} that sorts an array of uint256 in increasing order.\\n     */\\n    function sort(uint256[] memory array) internal pure returns (uint256[] memory) {\\n        sort(array, Comparators.lt);\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Sort an array of address (in memory) following the provided comparator function.\\n     *\\n     * This function does the sorting \\\"in place\\\", meaning that it overrides the input. The object is returned for\\n     * convenience, but that returned value can be discarded safely if the caller has a memory pointer to the array.\\n     *\\n     * NOTE: this function's cost is `O(n \\u00b7 log(n))` in average and `O(n\\u00b2)` in the worst case, with n the length of the\\n     * array. Using it in view functions that are executed through `eth_call` is safe, but one should be very careful\\n     * when executing this as part of a transaction. If the array being sorted is too large, the sort operation may\\n     * consume more gas than is available in a block, leading to potential DoS.\\n     *\\n     * IMPORTANT: Consider memory side-effects when using custom comparator functions that access memory in an unsafe way.\\n     */\\n    function sort(\\n        address[] memory array,\\n        function(address, address) pure returns (bool) comp\\n    ) internal pure returns (address[] memory) {\\n        sort(_castToUint256Array(array), _castToUint256Comp(comp));\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Variant of {sort} that sorts an array of address in increasing order.\\n     */\\n    function sort(address[] memory array) internal pure returns (address[] memory) {\\n        sort(_castToUint256Array(array), Comparators.lt);\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Sort an array of bytes32 (in memory) following the provided comparator function.\\n     *\\n     * This function does the sorting \\\"in place\\\", meaning that it overrides the input. The object is returned for\\n     * convenience, but that returned value can be discarded safely if the caller has a memory pointer to the array.\\n     *\\n     * NOTE: this function's cost is `O(n \\u00b7 log(n))` in average and `O(n\\u00b2)` in the worst case, with n the length of the\\n     * array. Using it in view functions that are executed through `eth_call` is safe, but one should be very careful\\n     * when executing this as part of a transaction. If the array being sorted is too large, the sort operation may\\n     * consume more gas than is available in a block, leading to potential DoS.\\n     *\\n     * IMPORTANT: Consider memory side-effects when using custom comparator functions that access memory in an unsafe way.\\n     */\\n    function sort(\\n        bytes32[] memory array,\\n        function(bytes32, bytes32) pure returns (bool) comp\\n    ) internal pure returns (bytes32[] memory) {\\n        sort(_castToUint256Array(array), _castToUint256Comp(comp));\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Variant of {sort} that sorts an array of bytes32 in increasing order.\\n     */\\n    function sort(bytes32[] memory array) internal pure returns (bytes32[] memory) {\\n        sort(_castToUint256Array(array), Comparators.lt);\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Performs a quick sort of a segment of memory. The segment sorted starts at `begin` (inclusive), and stops\\n     * at end (exclusive). Sorting follows the `comp` comparator.\\n     *\\n     * Invariant: `begin <= end`. This is the case when initially called by {sort} and is preserved in subcalls.\\n     *\\n     * IMPORTANT: Memory locations between `begin` and `end` are not validated/zeroed. This function should\\n     * be used only if the limits are within a memory array.\\n     */\\n    function _quickSort(uint256 begin, uint256 end, function(uint256, uint256) pure returns (bool) comp) private pure {\\n        unchecked {\\n            if (end - begin < 0x40) return;\\n\\n            // Use first element as pivot\\n            uint256 pivot = _mload(begin);\\n            // Position where the pivot should be at the end of the loop\\n            uint256 pos = begin;\\n\\n            for (uint256 it = begin + 0x20; it < end; it += 0x20) {\\n                if (comp(_mload(it), pivot)) {\\n                    // If the value stored at the iterator's position comes before the pivot, we increment the\\n                    // position of the pivot and move the value there.\\n                    pos += 0x20;\\n                    _swap(pos, it);\\n                }\\n            }\\n\\n            _swap(begin, pos); // Swap pivot into place\\n            _quickSort(begin, pos, comp); // Sort the left side of the pivot\\n            _quickSort(pos + 0x20, end, comp); // Sort the right side of the pivot\\n        }\\n    }\\n\\n    /**\\n     * @dev Pointer to the memory location of the first element of `array`.\\n     */\\n    function _begin(uint256[] memory array) private pure returns (uint256 ptr) {\\n        assembly (\\\"memory-safe\\\") {\\n            ptr := add(array, 0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Pointer to the memory location of the first memory word (32bytes) after `array`. This is the memory word\\n     * that comes just after the last element of the array.\\n     */\\n    function _end(uint256[] memory array) private pure returns (uint256 ptr) {\\n        unchecked {\\n            return _begin(array) + array.length * 0x20;\\n        }\\n    }\\n\\n    /**\\n     * @dev Load memory word (as a uint256) at location `ptr`.\\n     */\\n    function _mload(uint256 ptr) private pure returns (uint256 value) {\\n        assembly {\\n            value := mload(ptr)\\n        }\\n    }\\n\\n    /**\\n     * @dev Swaps the elements memory location `ptr1` and `ptr2`.\\n     */\\n    function _swap(uint256 ptr1, uint256 ptr2) private pure {\\n        assembly {\\n            let value1 := mload(ptr1)\\n            let value2 := mload(ptr2)\\n            mstore(ptr1, value2)\\n            mstore(ptr2, value1)\\n        }\\n    }\\n\\n    /// @dev Helper: low level cast address memory array to uint256 memory array\\n    function _castToUint256Array(address[] memory input) private pure returns (uint256[] memory output) {\\n        assembly {\\n            output := input\\n        }\\n    }\\n\\n    /// @dev Helper: low level cast bytes32 memory array to uint256 memory array\\n    function _castToUint256Array(bytes32[] memory input) private pure returns (uint256[] memory output) {\\n        assembly {\\n            output := input\\n        }\\n    }\\n\\n    /// @dev Helper: low level cast address comp function to uint256 comp function\\n    function _castToUint256Comp(\\n        function(address, address) pure returns (bool) input\\n    ) private pure returns (function(uint256, uint256) pure returns (bool) output) {\\n        assembly {\\n            output := input\\n        }\\n    }\\n\\n    /// @dev Helper: low level cast bytes32 comp function to uint256 comp function\\n    function _castToUint256Comp(\\n        function(bytes32, bytes32) pure returns (bool) input\\n    ) private pure returns (function(uint256, uint256) pure returns (bool) output) {\\n        assembly {\\n            output := input\\n        }\\n    }\\n\\n    /**\\n     * @dev Searches a sorted `array` and returns the first index that contains\\n     * a value greater or equal to `element`. If no such index exists (i.e. all\\n     * values in the array are strictly less than `element`), the array length is\\n     * returned. Time complexity O(log n).\\n     *\\n     * NOTE: The `array` is expected to be sorted in ascending order, and to\\n     * contain no repeated elements.\\n     *\\n     * IMPORTANT: Deprecated. This implementation behaves as {lowerBound} but lacks\\n     * support for repeated elements in the array. The {lowerBound} function should\\n     * be used instead.\\n     */\\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeAccess(array, mid).value > element) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\\n        if (low > 0 && unsafeAccess(array, low - 1).value == element) {\\n            return low - 1;\\n        } else {\\n            return low;\\n        }\\n    }\\n\\n    /**\\n     * @dev Searches an `array` sorted in ascending order and returns the first\\n     * index that contains a value greater or equal than `element`. If no such index\\n     * exists (i.e. all values in the array are strictly less than `element`), the array\\n     * length is returned. Time complexity O(log n).\\n     *\\n     * See C++'s https://en.cppreference.com/w/cpp/algorithm/lower_bound[lower_bound].\\n     */\\n    function lowerBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeAccess(array, mid).value < element) {\\n                // this cannot overflow because mid < high\\n                unchecked {\\n                    low = mid + 1;\\n                }\\n            } else {\\n                high = mid;\\n            }\\n        }\\n\\n        return low;\\n    }\\n\\n    /**\\n     * @dev Searches an `array` sorted in ascending order and returns the first\\n     * index that contains a value strictly greater than `element`. If no such index\\n     * exists (i.e. all values in the array are strictly less than `element`), the array\\n     * length is returned. Time complexity O(log n).\\n     *\\n     * See C++'s https://en.cppreference.com/w/cpp/algorithm/upper_bound[upper_bound].\\n     */\\n    function upperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeAccess(array, mid).value > element) {\\n                high = mid;\\n            } else {\\n                // this cannot overflow because mid < high\\n                unchecked {\\n                    low = mid + 1;\\n                }\\n            }\\n        }\\n\\n        return low;\\n    }\\n\\n    /**\\n     * @dev Same as {lowerBound}, but with an array in memory.\\n     */\\n    function lowerBoundMemory(uint256[] memory array, uint256 element) internal pure returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeMemoryAccess(array, mid) < element) {\\n                // this cannot overflow because mid < high\\n                unchecked {\\n                    low = mid + 1;\\n                }\\n            } else {\\n                high = mid;\\n            }\\n        }\\n\\n        return low;\\n    }\\n\\n    /**\\n     * @dev Same as {upperBound}, but with an array in memory.\\n     */\\n    function upperBoundMemory(uint256[] memory array, uint256 element) internal pure returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeMemoryAccess(array, mid) > element) {\\n                high = mid;\\n            } else {\\n                // this cannot overflow because mid < high\\n                unchecked {\\n                    low = mid + 1;\\n                }\\n            }\\n        }\\n\\n        return low;\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(address[] storage arr, uint256 pos) internal pure returns (StorageSlot.AddressSlot storage) {\\n        bytes32 slot;\\n        assembly (\\\"memory-safe\\\") {\\n            slot := arr.slot\\n        }\\n        return slot.deriveArray().offset(pos).getAddressSlot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(bytes32[] storage arr, uint256 pos) internal pure returns (StorageSlot.Bytes32Slot storage) {\\n        bytes32 slot;\\n        assembly (\\\"memory-safe\\\") {\\n            slot := arr.slot\\n        }\\n        return slot.deriveArray().offset(pos).getBytes32Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(uint256[] storage arr, uint256 pos) internal pure returns (StorageSlot.Uint256Slot storage) {\\n        bytes32 slot;\\n        assembly (\\\"memory-safe\\\") {\\n            slot := arr.slot\\n        }\\n        return slot.deriveArray().offset(pos).getUint256Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(bytes[] storage arr, uint256 pos) internal pure returns (StorageSlot.BytesSlot storage) {\\n        bytes32 slot;\\n        assembly (\\\"memory-safe\\\") {\\n            slot := arr.slot\\n        }\\n        return slot.deriveArray().offset(pos).getBytesSlot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(string[] storage arr, uint256 pos) internal pure returns (StorageSlot.StringSlot storage) {\\n        bytes32 slot;\\n        assembly (\\\"memory-safe\\\") {\\n            slot := arr.slot\\n        }\\n        return slot.deriveArray().offset(pos).getStringSlot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(address[] memory arr, uint256 pos) internal pure returns (address res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(bytes32[] memory arr, uint256 pos) internal pure returns (bytes32 res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(uint256[] memory arr, uint256 pos) internal pure returns (uint256 res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(bytes[] memory arr, uint256 pos) internal pure returns (bytes memory res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(string[] memory arr, uint256 pos) internal pure returns (string memory res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper to set the length of a dynamic array. Directly writing to `.length` is forbidden.\\n     *\\n     * WARNING: this does not clear elements if length is reduced, of initialize elements if length is increased.\\n     */\\n    function unsafeSetLength(address[] storage array, uint256 len) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(array.slot, len)\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper to set the length of a dynamic array. Directly writing to `.length` is forbidden.\\n     *\\n     * WARNING: this does not clear elements if length is reduced, of initialize elements if length is increased.\\n     */\\n    function unsafeSetLength(bytes32[] storage array, uint256 len) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(array.slot, len)\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper to set the length of a dynamic array. Directly writing to `.length` is forbidden.\\n     *\\n     * WARNING: this does not clear elements if length is reduced, of initialize elements if length is increased.\\n     */\\n    function unsafeSetLength(uint256[] storage array, uint256 len) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(array.slot, len)\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper to set the length of a dynamic array. Directly writing to `.length` is forbidden.\\n     *\\n     * WARNING: this does not clear elements if length is reduced, of initialize elements if length is increased.\\n     */\\n    function unsafeSetLength(bytes[] storage array, uint256 len) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(array.slot, len)\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper to set the length of a dynamic array. Directly writing to `.length` is forbidden.\\n     *\\n     * WARNING: this does not clear elements if length is reduced, of initialize elements if length is increased.\\n     */\\n    function unsafeSetLength(string[] storage array, uint256 len) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(array.slot, len)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa4b9958797e0e9cde82a090525e90f80d5745ba1c67ee72b488bd3087498a17e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Comparators.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Comparators.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides a set of functions to compare values.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Comparators {\\n    function lt(uint256 a, uint256 b) internal pure returns (bool) {\\n        return a < b;\\n    }\\n\\n    function gt(uint256 a, uint256 b) internal pure returns (bool) {\\n        return a > b;\\n    }\\n}\\n\",\"keccak256\":\"0x302eecd8cf323b4690e3494a7d960b3cbce077032ab8ef655b323cdd136cec58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Panic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/SlotDerivation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/SlotDerivation.sol)\\n// This file was procedurally generated from scripts/generate/templates/SlotDerivation.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for computing storage (and transient storage) locations from namespaces and deriving slots\\n * corresponding to standard patterns. The derivation method for array and mapping matches the storage layout used by\\n * the solidity language / compiler.\\n *\\n * See https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays[Solidity docs for mappings and dynamic arrays.].\\n *\\n * Example usage:\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using StorageSlot for bytes32;\\n *     using SlotDerivation for bytes32;\\n *\\n *     // Declare a namespace\\n *     string private constant _NAMESPACE = \\\"<namespace>\\\"; // eg. OpenZeppelin.Slot\\n *\\n *     function setValueInNamespace(uint256 key, address newValue) internal {\\n *         _NAMESPACE.erc7201Slot().deriveMapping(key).getAddressSlot().value = newValue;\\n *     }\\n *\\n *     function getValueInNamespace(uint256 key) internal view returns (address) {\\n *         return _NAMESPACE.erc7201Slot().deriveMapping(key).getAddressSlot().value;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {StorageSlot}.\\n *\\n * NOTE: This library provides a way to manipulate storage locations in a non-standard way. Tooling for checking\\n * upgrade safety will ignore the slots accessed through this library.\\n *\\n * _Available since v5.1._\\n */\\nlibrary SlotDerivation {\\n    /**\\n     * @dev Derive an ERC-7201 slot from a string (namespace).\\n     */\\n    function erc7201Slot(string memory namespace) internal pure returns (bytes32 slot) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, sub(keccak256(add(namespace, 0x20), mload(namespace)), 1))\\n            slot := and(keccak256(0x00, 0x20), not(0xff))\\n        }\\n    }\\n\\n    /**\\n     * @dev Add an offset to a slot to get the n-th element of a structure or an array.\\n     */\\n    function offset(bytes32 slot, uint256 pos) internal pure returns (bytes32 result) {\\n        unchecked {\\n            return bytes32(uint256(slot) + pos);\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of the first element in an array from the slot where the length is stored.\\n     */\\n    function deriveArray(bytes32 slot) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, slot)\\n            result := keccak256(0x00, 0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, address key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, and(key, shr(96, not(0))))\\n            mstore(0x20, slot)\\n            result := keccak256(0x00, 0x40)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, bool key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, iszero(iszero(key)))\\n            mstore(0x20, slot)\\n            result := keccak256(0x00, 0x40)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, bytes32 key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, key)\\n            mstore(0x20, slot)\\n            result := keccak256(0x00, 0x40)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, uint256 key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, key)\\n            mstore(0x20, slot)\\n            result := keccak256(0x00, 0x40)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, int256 key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, key)\\n            mstore(0x20, slot)\\n            result := keccak256(0x00, 0x40)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, string memory key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            let length := mload(key)\\n            let begin := add(key, 0x20)\\n            let end := add(begin, length)\\n            let cache := mload(end)\\n            mstore(end, slot)\\n            result := keccak256(begin, add(length, 0x20))\\n            mstore(end, cache)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, bytes memory key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            let length := mload(key)\\n            let begin := add(key, 0x20)\\n            let end := add(begin, length)\\n            let cache := mload(end)\\n            mstore(end, slot)\\n            result := keccak256(begin, add(length, 0x20))\\n            mstore(end, cache)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67672e4ca1dafdcc661d4eba8475cfac631fa0933309258e3af7644b92e1fb26\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Return the 512-bit addition of two uint256.\\n     *\\n     * The result is stored in two 256 variables such that sum = high * 2\\u00b2\\u2075\\u2076 + low.\\n     */\\n    function add512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\\n        assembly (\\\"memory-safe\\\") {\\n            low := add(a, b)\\n            high := lt(low, a)\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the 512-bit multiplication of two uint256.\\n     *\\n     * The result is stored in two 256 variables such that product = high * 2\\u00b2\\u2075\\u2076 + low.\\n     */\\n    function mul512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\\n        // 512-bit multiply [high low] = x * y. Compute the product mod 2\\u00b2\\u2075\\u2076 and mod 2\\u00b2\\u2075\\u2076 - 1, then use\\n        // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = high * 2\\u00b2\\u2075\\u2076 + low.\\n        assembly (\\\"memory-safe\\\") {\\n            let mm := mulmod(a, b, not(0))\\n            low := mul(a, b)\\n            high := sub(sub(mm, low), lt(mm, low))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            success = c >= a;\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a - b;\\n            success = c <= a;\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a * b;\\n            assembly (\\\"memory-safe\\\") {\\n                // Only true when the multiplication doesn't overflow\\n                // (c / a == b) || (a == 0)\\n                success := or(eq(div(c, a), b), iszero(a))\\n            }\\n            // equivalent to: success ? c : 0\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            success = b > 0;\\n            assembly (\\\"memory-safe\\\") {\\n                // The `DIV` opcode returns zero when the denominator is 0.\\n                result := div(a, b)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            success = b > 0;\\n            assembly (\\\"memory-safe\\\") {\\n                // The `MOD` opcode returns zero when the denominator is 0.\\n                result := mod(a, b)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating addition, bounds to `2\\u00b2\\u2075\\u2076 - 1` instead of overflowing.\\n     */\\n    function saturatingAdd(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = tryAdd(a, b);\\n        return ternary(success, result, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating subtraction, bounds to zero instead of overflowing.\\n     */\\n    function saturatingSub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (, uint256 result) = trySub(a, b);\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating multiplication, bounds to `2\\u00b2\\u2075\\u2076 - 1` instead of overflowing.\\n     */\\n    function saturatingMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = tryMul(a, b);\\n        return ternary(success, result, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            (uint256 high, uint256 low) = mul512(x, y);\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (high == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return low / denominator;\\n            }\\n\\n            // Make sure the result is less than 2\\u00b2\\u2075\\u2076. Also prevents denominator == 0.\\n            if (denominator <= high) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [high low].\\n            uint256 remainder;\\n            assembly (\\\"memory-safe\\\") {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                high := sub(high, gt(remainder, low))\\n                low := sub(low, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly (\\\"memory-safe\\\") {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [high low] by twos.\\n                low := div(low, twos)\\n\\n                // Flip twos such that it is 2\\u00b2\\u2075\\u2076 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from high into low.\\n            low |= high * twos;\\n\\n            // Invert denominator mod 2\\u00b2\\u2075\\u2076. Now that denominator is an odd number, it has an inverse modulo 2\\u00b2\\u2075\\u2076 such\\n            // that denominator * inv \\u2261 1 mod 2\\u00b2\\u2075\\u2076. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv \\u2261 1 mod 2\\u2074.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u2076\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b3\\u00b2\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2076\\u2074\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u00b2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b2\\u2075\\u2076\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2\\u00b2\\u2075\\u2076. Since the preconditions guarantee that the outcome is\\n            // less than 2\\u00b2\\u2075\\u2076, this is the final result. We don't need to compute the high bits of the result and high\\n            // is no longer required.\\n            result = low * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y >> n) with full precision. Throws if result overflows a uint256.\\n     */\\n    function mulShr(uint256 x, uint256 y, uint8 n) internal pure returns (uint256 result) {\\n        unchecked {\\n            (uint256 high, uint256 low) = mul512(x, y);\\n            if (high >= 1 << n) {\\n                Panic.panic(Panic.UNDER_OVERFLOW);\\n            }\\n            return (high << (256 - n)) | (low >> n);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y >> n with full precision, following the selected rounding direction.\\n     */\\n    function mulShr(uint256 x, uint256 y, uint8 n, Rounding rounding) internal pure returns (uint256) {\\n        return mulShr(x, y, n) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, 1 << n) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax \\u2261 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) \\u2261 1 mod p`. As a consequence, we have `a * a**(p-2) \\u2261 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x\\u00b2 - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `\\u03b5_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) \\u2264 sqrt(a) < 2**e`). We know that `e \\u2264 128` because `(2\\u00b9\\u00b2\\u2078)\\u00b2 = 2\\u00b2\\u2075\\u2076` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) \\u2264 sqrt(a) < 2**e \\u2192 (2**(e-1))\\u00b2 \\u2264 a < (2**e)\\u00b2 \\u2192 2**(2*e-2) \\u2264 a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) \\u2264 sqrt(a) < 2**e = 2 * x_n`. This implies \\u03b5_n \\u2264 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to \\u03b5_n \\u2264 2**(e-2).\\n            // This is going to be our x_0 (and \\u03b5_0)\\n            xn = (3 * xn) >> 1; // \\u03b5_0 := | x_0 - sqrt(a) | \\u2264 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}\\u00b2 - a = ((x_n + a / x_n) / 2)\\u00b2 - a\\n            //              = ((x_n\\u00b2 + a) / (2 * x_n))\\u00b2 - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2) - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2 - 4 * a * x_n\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u2074 - 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u00b2 - a)\\u00b2 / (2 * x_n)\\u00b2\\n            //              = ((x_n\\u00b2 - a) / (2 * x_n))\\u00b2\\n            //              \\u2265 0\\n            // Which proves that for all n \\u2265 1, sqrt(a) \\u2264 x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // \\u03b5_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n\\u00b2 + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))\\u00b2 / (2 * x_n) |\\n            //         = | \\u03b5_n\\u00b2 / (2 * x_n) |\\n            //         = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // \\u03b5_1 = \\u03b5_0\\u00b2 / | (2 * x_0) |\\n            //     \\u2264 (2**(e-2))\\u00b2 / (2 * (2**(e-1) + 2**(e-2)))\\n            //     \\u2264 2**(2*e-4) / (3 * 2**(e-1))\\n            //     \\u2264 2**(e-3) / 3\\n            //     \\u2264 2**(e-3-log2(3))\\n            //     \\u2264 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) \\u2264 sqrt(a) \\u2264 x_n:\\n            // \\u03b5_{n+1} = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //         \\u2264 (2**(e-k))\\u00b2 / (2 * 2**(e-1))\\n            //         \\u2264 2**(2*e-2*k) / 2**e\\n            //         \\u2264 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // \\u03b5_1 := | x_1 - sqrt(a) | \\u2264 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // \\u03b5_2 := | x_2 - sqrt(a) | \\u2264 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // \\u03b5_3 := | x_3 - sqrt(a) | \\u2264 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // \\u03b5_4 := | x_4 - sqrt(a) | \\u2264 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // \\u03b5_5 := | x_5 - sqrt(a) | \\u2264 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // \\u03b5_6 := | x_6 - sqrt(a) | \\u2264 2**(e-144)  -- general case with k = 72\\n\\n            // Because e \\u2264 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // \\u03b5_6 \\u2264 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 x) internal pure returns (uint256 r) {\\n        // If value has upper 128 bits set, log2 result is at least 128\\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\\n        // If upper 64 bits of 128-bit half set, add 64 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\\n        // If upper 32 bits of 64-bit half set, add 32 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\\n        // If upper 16 bits of 32-bit half set, add 16 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\\n        // If upper 8 bits of 16-bit half set, add 8 to result\\n        r |= SafeCast.toUint((x >> r) > 0xff) << 3;\\n        // If upper 4 bits of 8-bit half set, add 4 to result\\n        r |= SafeCast.toUint((x >> r) > 0xf) << 2;\\n\\n        // Shifts value right by the current result and use it as an index into this lookup table:\\n        //\\n        // | x (4 bits) |  index  | table[index] = MSB position |\\n        // |------------|---------|-----------------------------|\\n        // |    0000    |    0    |        table[0] = 0         |\\n        // |    0001    |    1    |        table[1] = 0         |\\n        // |    0010    |    2    |        table[2] = 1         |\\n        // |    0011    |    3    |        table[3] = 1         |\\n        // |    0100    |    4    |        table[4] = 2         |\\n        // |    0101    |    5    |        table[5] = 2         |\\n        // |    0110    |    6    |        table[6] = 2         |\\n        // |    0111    |    7    |        table[7] = 2         |\\n        // |    1000    |    8    |        table[8] = 3         |\\n        // |    1001    |    9    |        table[9] = 3         |\\n        // |    1010    |   10    |        table[10] = 3        |\\n        // |    1011    |   11    |        table[11] = 3        |\\n        // |    1100    |   12    |        table[12] = 3        |\\n        // |    1101    |   13    |        table[13] = 3        |\\n        // |    1110    |   14    |        table[14] = 3        |\\n        // |    1111    |   15    |        table[15] = 3        |\\n        //\\n        // The lookup table is represented as a 32-byte value with the MSB positions for 0-15 in the last 16 bytes.\\n        assembly (\\\"memory-safe\\\") {\\n            r := or(r, byte(shr(r, x), 0x0000010102020202030303030303030300000000000000000000000000000000))\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 x) internal pure returns (uint256 r) {\\n        // If value has upper 128 bits set, log2 result is at least 128\\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\\n        // If upper 64 bits of 128-bit half set, add 64 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\\n        // If upper 32 bits of 64-bit half set, add 32 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\\n        // If upper 16 bits of 32-bit half set, add 16 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\\n        // Add 1 if upper 8 bits of 16-bit half set, and divide accumulated result by 8\\n        return (r >> 3) | SafeCast.toUint((x >> r) > 0xff);\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x1225214420c83ebcca88f2ae2b50f053aaa7df7bd684c3e878d334627f2edfc6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\"},\"contracts/QACard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title QACard\\n * @dev ERC1155 NFT\\u5408\\u7ea6 - \\u6295\\u8d44\\u4ea7\\u54c1\\u6743\\u76ca\\u51ed\\u8bc1\\n * \\n * Token ID \\u6620\\u5c04:\\n * - 1: \\u94f6\\u5361 (Silver Card)\\n * - 2: \\u91d1\\u5361 (Gold Card)  \\n * - 3: \\u94bb\\u77f3\\u5361 (Diamond Card)\\n * \\n * \\u529f\\u80fd\\u7279\\u6027:\\n * - ERC1155\\u591a\\u4ee3\\u5e01\\u6807\\u51c6\\n * - \\u6743\\u76caNFT\\u94f8\\u9020\\u548c\\u9500\\u6bc1\\n * - \\u8f6c\\u79fb\\u9650\\u5236\\u63a7\\u5236\\n * - \\u6279\\u91cf\\u64cd\\u4f5c\\u652f\\u6301\\n * - \\u52a8\\u6001\\u5143\\u6570\\u636e\\u66f4\\u65b0\\n */\\ncontract QACard is\\n    Initializable,\\n    ERC1155Upgradeable,\\n    AccessControlUpgradeable,\\n    PausableUpgradeable,\\n    ERC1155BurnableUpgradeable,\\n    ERC1155SupplyUpgradeable\\n{\\n    // \\u89d2\\u8272\\u5b9a\\u4e49\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n    bytes32 public constant URI_SETTER_ROLE = keccak256(\\\"URI_SETTER_ROLE\\\");\\n\\n    // \\u4ee3\\u5e01\\u4fe1\\u606f\\n    struct TokenInfo {\\n        string name;\\n        string symbol;\\n        uint256 maxSupply;\\n        bool transferable;\\n        bool active;\\n    }\\n\\n    // \\u72b6\\u6001\\u53d8\\u91cf\\n    mapping(uint256 => TokenInfo) public tokenInfo;\\n    mapping(uint256 => string) private _tokenURIs;\\n    mapping(address => bool) public authorizedOperators;\\n    address private _treasury;\\n    address private _owner;\\n\\n    // \\u7528\\u6237\\u6301\\u4ed3\\u8bb0\\u5f55\\n    mapping(address => mapping(uint256 => uint256[])) public userTokens;\\n    mapping(uint256 => address) public tokenOwners;\\n    uint256 private _currentTokenIndex;\\n\\n    // \\u4e8b\\u4ef6\\u5b9a\\u4e49\\n    event TokenMinted(\\n        address indexed to,\\n        uint256 indexed tokenId,\\n        uint256 amount,\\n        bytes32 indexed orderId,\\n        uint256 uniqueId\\n    );\\n\\n    event TokenBurned(\\n        address indexed from,\\n        uint256 indexed tokenId,\\n        uint256 amount,\\n        uint256 uniqueId\\n    );\\n\\n    event TokenInfoUpdated(\\n        uint256 indexed tokenId,\\n        string name,\\n        string symbol,\\n        uint256 maxSupply,\\n        bool transferable\\n    );\\n\\n    event URIUpdated(uint256 indexed tokenId, string uri);\\n\\n    event OperatorAuthorized(address indexed operator, bool authorized);\\n\\n    // \\u9519\\u8bef\\u5b9a\\u4e49\\n    error InsufficientSupply(uint256 requested, uint256 available);\\n    error TokenNotActive(uint256 tokenId);\\n    error TransferNotAllowed(uint256 tokenId);\\n    error InvalidTokenId(uint256 tokenId);\\n    error UnauthorizedOperator(address operator);\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        // For testing purposes, allow initialization\\n        // _disableInitializers();\\n    }\\n\\n    /**\\n     * @dev \\u521d\\u59cb\\u5316\\u5408\\u7ea6\\n     * @param _uri \\u57fa\\u7840URI\\n     * @param admin \\u7ba1\\u7406\\u5458\\u5730\\u5740\\n     */\\n    function initialize(string memory _uri, address admin) public initializer {\\n        __ERC1155_init(_uri);\\n        __AccessControl_init();\\n        __Pausable_init();\\n        __ERC1155Burnable_init();\\n        __ERC1155Supply_init();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\\n        _grantRole(PAUSER_ROLE, admin);\\n        _grantRole(MINTER_ROLE, admin);\\n        _grantRole(URI_SETTER_ROLE, admin);\\n\\n        _owner = admin;\\n\\n        // \\u521d\\u59cb\\u5316\\u4ee3\\u5e01\\u4fe1\\u606f\\n        _initializeTokens();\\n    }\\n\\n    /**\\n     * @dev \\u521d\\u59cb\\u5316\\u9884\\u8bbe\\u7684\\u4ee3\\u5e01\\u7c7b\\u578b\\n     */\\n    function _initializeTokens() internal {\\n        // \\u94f6\\u5361 - Token ID: 1\\n        tokenInfo[1] = TokenInfo({\\n            name: \\\"Silver Card\\\",\\n            symbol: \\\"SILVER\\\",\\n            maxSupply: 10000,\\n            transferable: false,\\n            active: true\\n        });\\n\\n        // \\u91d1\\u5361 - Token ID: 2\\n        tokenInfo[2] = TokenInfo({\\n            name: \\\"Gold Card\\\", \\n            symbol: \\\"GOLD\\\",\\n            maxSupply: 5000,\\n            transferable: false,\\n            active: true\\n        });\\n\\n        // \\u94bb\\u77f3\\u5361 - Token ID: 3\\n        tokenInfo[3] = TokenInfo({\\n            name: \\\"Diamond Card\\\",\\n            symbol: \\\"DIAMOND\\\",\\n            maxSupply: 1000,\\n            transferable: false,\\n            active: true\\n        });\\n    }\\n\\n    /**\\n     * @dev \\u6807\\u51c6\\u94f8\\u9020NFT (\\u6d4b\\u8bd5\\u7528)\\n     * @param to \\u63a5\\u6536\\u5730\\u5740\\n     * @param tokenId \\u4ee3\\u5e01ID\\n     * @param amount \\u6570\\u91cf (\\u901a\\u5e38\\u4e3a1)\\n     * @param data \\u989d\\u5916\\u6570\\u636e\\n     */\\n    function mint(\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount,\\n        bytes memory data\\n    ) public onlyRole(MINTER_ROLE) whenNotPaused {\\n        TokenInfo storage token = tokenInfo[tokenId];\\n        \\n        if (!token.active) revert TokenNotActive(tokenId);\\n        \\n        uint256 currentSupply = totalSupply(tokenId);\\n        if (currentSupply + amount > token.maxSupply) {\\n            revert InsufficientSupply(amount, token.maxSupply - currentSupply);\\n        }\\n\\n        // \\u751f\\u6210\\u552f\\u4e00ID\\n        uint256 uniqueId = _generateUniqueId(tokenId, to);\\n\\n        // \\u94f8\\u9020NFT\\n        _mint(to, tokenId, amount, data);\\n\\n        // \\u8bb0\\u5f55\\u7528\\u6237\\u6301\\u4ed3\\n        userTokens[to][tokenId].push(uniqueId);\\n        tokenOwners[uniqueId] = to;\\n\\n        emit TokenMinted(to, tokenId, amount, bytes32(uniqueId), uniqueId);\\n    }\\n\\n    /**\\n     * @dev \\u94f8\\u9020NFT (\\u5e26\\u8ba2\\u5355ID)\\n     * @param to \\u63a5\\u6536\\u5730\\u5740\\n     * @param tokenId \\u4ee3\\u5e01ID\\n     * @param amount \\u6570\\u91cf (\\u901a\\u5e38\\u4e3a1)\\n     * @param orderId \\u8ba2\\u5355ID\\n     * @param data \\u989d\\u5916\\u6570\\u636e\\n     */\\n    function mintWithOrderId(\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount,\\n        bytes32 orderId,\\n        bytes memory data\\n    ) public onlyRole(MINTER_ROLE) whenNotPaused {\\n        TokenInfo storage token = tokenInfo[tokenId];\\n        \\n        if (!token.active) revert TokenNotActive(tokenId);\\n        \\n        uint256 currentSupply = totalSupply(tokenId);\\n        if (currentSupply + amount > token.maxSupply) {\\n            revert InsufficientSupply(amount, token.maxSupply - currentSupply);\\n        }\\n\\n        // \\u751f\\u6210\\u552f\\u4e00ID\\n        uint256 uniqueId = _generateUniqueId(tokenId, to);\\n\\n        // \\u94f8\\u9020NFT\\n        _mint(to, tokenId, amount, data);\\n\\n        // \\u8bb0\\u5f55\\u7528\\u6237\\u6301\\u4ed3\\n        userTokens[to][tokenId].push(uniqueId);\\n        tokenOwners[uniqueId] = to;\\n\\n        emit TokenMinted(to, tokenId, amount, orderId, uniqueId);\\n    }\\n\\n    /**\\n     * @dev \\u6279\\u91cf\\u94f8\\u9020NFT\\n     * @param to \\u63a5\\u6536\\u5730\\u5740\\n     * @param tokenIds \\u4ee3\\u5e01ID\\u6570\\u7ec4\\n     * @param amounts \\u6570\\u91cf\\u6570\\u7ec4\\n     * @param orderIds \\u8ba2\\u5355ID\\u6570\\u7ec4\\n     * @param data \\u989d\\u5916\\u6570\\u636e\\n     */\\n    function mintBatch(\\n        address to,\\n        uint256[] memory tokenIds,\\n        uint256[] memory amounts,\\n        bytes32[] memory orderIds,\\n        bytes memory data\\n    ) public onlyRole(MINTER_ROLE) whenNotPaused {\\n        require(tokenIds.length == orderIds.length, \\\"Array length mismatch\\\");\\n\\n        for (uint i = 0; i < tokenIds.length; i++) {\\n            TokenInfo storage token = tokenInfo[tokenIds[i]];\\n            if (!token.active) revert TokenNotActive(tokenIds[i]);\\n            \\n            uint256 currentSupply = totalSupply(tokenIds[i]);\\n            if (currentSupply + amounts[i] > token.maxSupply) {\\n                revert InsufficientSupply(amounts[i], token.maxSupply - currentSupply);\\n            }\\n        }\\n\\n        _mintBatch(to, tokenIds, amounts, data);\\n\\n        // \\u8bb0\\u5f55\\u6279\\u91cf\\u94f8\\u9020\\u4e8b\\u4ef6\\n        for (uint i = 0; i < tokenIds.length; i++) {\\n            uint256 uniqueId = _generateUniqueId(tokenIds[i], to);\\n            userTokens[to][tokenIds[i]].push(uniqueId);\\n            tokenOwners[uniqueId] = to;\\n            \\n            emit TokenMinted(to, tokenIds[i], amounts[i], orderIds[i], uniqueId);\\n        }\\n    }\\n\\n    /**\\n     * @dev \\u4e3aTreasury\\u5408\\u7ea6\\u63d0\\u4f9b\\u7684\\u7279\\u6b8a\\u94f8\\u9020\\u51fd\\u6570\\n     * @param to \\u63a5\\u6536\\u5730\\u5740\\n     * @param productType \\u4ea7\\u54c1\\u7c7b\\u578b (\\u4eceTreasury.sol\\u5bfc\\u5165\\u7684\\u679a\\u4e3e)\\n     */\\n    function mintCard(\\n        address to,\\n        uint8 productType, // 0=SILVER, 1=GOLD, 2=DIAMOND, 3=PLATINUM\\n        uint256 /* amount */,\\n        uint256 /* apr */,\\n        uint256 /* duration */\\n    ) external onlyRole(MINTER_ROLE) whenNotPaused returns (uint256) {\\n        // \\u6620\\u5c04\\u4ea7\\u54c1\\u7c7b\\u578b\\u5230token ID (\\u52a01\\u56e0\\u4e3a\\u6211\\u4eec\\u7684token IDs\\u4ece1\\u5f00\\u59cb)\\n        uint256 tokenId = uint256(productType) + 1;\\n        \\n        TokenInfo storage token = tokenInfo[tokenId];\\n        if (!token.active) revert TokenNotActive(tokenId);\\n        \\n        uint256 currentSupply = totalSupply(tokenId);\\n        if (currentSupply + 1 > token.maxSupply) {\\n            revert InsufficientSupply(1, token.maxSupply - currentSupply);\\n        }\\n\\n        // \\u751f\\u6210\\u552f\\u4e00ID\\u4f5c\\u4e3a\\u8fd4\\u56de\\u503c\\n        uint256 uniqueId = _generateUniqueId(tokenId, to);\\n        \\n        // \\u94f8\\u9020NFT (\\u6570\\u91cf\\u4e3a1)\\n        _mint(to, tokenId, 1, \\\"\\\");\\n        \\n        // \\u8bb0\\u5f55\\u7528\\u6237\\u62e5\\u6709\\u7684token\\n        userTokens[to][tokenId].push(uniqueId);\\n        tokenOwners[uniqueId] = to;\\n        \\n        // \\u53ef\\u4ee5\\u5728\\u8fd9\\u91cc\\u5b58\\u50a8\\u6295\\u8d44\\u76f8\\u5173\\u4fe1\\u606f\\u5230\\u94fe\\u4e0a\\uff08\\u5982\\u679c\\u9700\\u8981\\uff09\\n        // \\u4f8b\\u5982: tokenInvestmentInfo[uniqueId] = InvestmentInfo(amount, apr, duration, block.timestamp);\\n        \\n        emit TokenMinted(to, tokenId, 1, bytes32(uniqueId), uniqueId);\\n        \\n        return uniqueId;\\n    }\\n\\n    /**\\n     * @dev \\u9500\\u6bc1NFT (\\u5230\\u671f\\u8d4e\\u56de\\u65f6\\u8c03\\u7528)\\n     * @param from \\u6301\\u6709\\u8005\\u5730\\u5740\\n     * @param tokenId \\u4ee3\\u5e01ID\\n     * @param amount \\u6570\\u91cf\\n     */\\n    function burnFrom(\\n        address from,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) public {\\n        require(\\n            from == _msgSender() || \\n            isApprovedForAll(from, _msgSender()) || \\n            hasRole(MINTER_ROLE, _msgSender()),\\n            \\\"Caller is not owner nor approved\\\"\\n        );\\n\\n        // \\u627e\\u5230\\u5e76\\u79fb\\u9664\\u5bf9\\u5e94\\u7684\\u552f\\u4e00ID\\n        uint256[] storage tokens = userTokens[from][tokenId];\\n        if (tokens.length > 0) {\\n            uint256 uniqueId = tokens[tokens.length - 1];\\n            tokens.pop();\\n            delete tokenOwners[uniqueId];\\n            \\n            emit TokenBurned(from, tokenId, amount, uniqueId);\\n        }\\n\\n        burn(from, tokenId, amount);\\n    }\\n\\n    /**\\n     * @dev \\u8bbe\\u7f6e\\u4ee3\\u5e01\\u4fe1\\u606f\\n     * @param tokenId \\u4ee3\\u5e01ID\\n     * @param name \\u4ee3\\u5e01\\u540d\\u79f0\\n     * @param symbol \\u4ee3\\u5e01\\u7b26\\u53f7\\n     * @param maxSupply \\u6700\\u5927\\u4f9b\\u5e94\\u91cf\\n     * @param transferable \\u662f\\u5426\\u53ef\\u8f6c\\u79fb\\n     * @param active \\u662f\\u5426\\u6fc0\\u6d3b\\n     */\\n    function setTokenInfo(\\n        uint256 tokenId,\\n        string memory name,\\n        string memory symbol,\\n        uint256 maxSupply,\\n        bool transferable,\\n        bool active\\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        TokenInfo storage token = tokenInfo[tokenId];\\n        \\n        // \\u6700\\u5927\\u4f9b\\u5e94\\u91cf\\u4e0d\\u80fd\\u5c0f\\u4e8e\\u5f53\\u524d\\u4f9b\\u5e94\\u91cf\\n        uint256 currentSupply = totalSupply(tokenId);\\n        require(maxSupply >= currentSupply, \\\"Max supply too low\\\");\\n\\n        token.name = name;\\n        token.symbol = symbol;\\n        token.maxSupply = maxSupply;\\n        token.transferable = transferable;\\n        token.active = active;\\n\\n        emit TokenInfoUpdated(tokenId, name, symbol, maxSupply, transferable);\\n    }\\n\\n    /**\\n     * @dev \\u8bbe\\u7f6e\\u4ee3\\u5e01URI\\n     * @param tokenId \\u4ee3\\u5e01ID\\n     * @param tokenURI \\u4ee3\\u5e01URI\\n     */\\n    function setTokenURI(\\n        uint256 tokenId,\\n        string memory tokenURI\\n    ) public onlyRole(URI_SETTER_ROLE) {\\n        _tokenURIs[tokenId] = tokenURI;\\n        emit URIUpdated(tokenId, tokenURI);\\n    }\\n\\n    /**\\n     * @dev \\u8bbe\\u7f6e\\u6388\\u6743\\u64cd\\u4f5c\\u5458\\n     * @param operator \\u64cd\\u4f5c\\u5458\\u5730\\u5740\\n     * @param authorized \\u662f\\u5426\\u6388\\u6743\\n     */\\n    function setAuthorizedOperator(\\n        address operator,\\n        bool authorized\\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        authorizedOperators[operator] = authorized;\\n        emit OperatorAuthorized(operator, authorized);\\n    }\\n\\n    /**\\n     * @dev \\u6682\\u505c\\u5408\\u7ea6\\n     */\\n    function pause() public onlyRole(PAUSER_ROLE) {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev \\u6062\\u590d\\u5408\\u7ea6\\n     */\\n    function unpause() public onlyRole(PAUSER_ROLE) {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @dev \\u83b7\\u53d6\\u4ee3\\u5e01URI\\n     */\\n    function uri(uint256 tokenId) public view override returns (string memory) {\\n        string memory tokenURI = _tokenURIs[tokenId];\\n        \\n        // \\u5982\\u679c\\u8bbe\\u7f6e\\u4e86\\u7279\\u5b9a\\u7684tokenURI\\uff0c\\u8fd4\\u56de\\u5b83\\uff1b\\u5426\\u5219\\u8fd4\\u56de\\u57fa\\u7840URI + tokenId\\n        return bytes(tokenURI).length > 0 ? tokenURI : super.uri(tokenId);\\n    }\\n\\n    /**\\n     * @dev \\u83b7\\u53d6\\u7528\\u6237\\u6301\\u6709\\u7684\\u4ee3\\u5e01\\u5217\\u8868\\n     * @param user \\u7528\\u6237\\u5730\\u5740\\n     * @param tokenId \\u4ee3\\u5e01ID\\n     */\\n    function getUserTokens(\\n        address user,\\n        uint256 tokenId\\n    ) public view returns (uint256[] memory) {\\n        return userTokens[user][tokenId];\\n    }\\n\\n    /**\\n     * @dev \\u83b7\\u53d6\\u4ee3\\u5e01\\u8be6\\u7ec6\\u4fe1\\u606f\\n     * @param tokenId \\u4ee3\\u5e01ID\\n     */\\n    function getTokenInfo(uint256 tokenId) public view returns (\\n        string memory name,\\n        string memory symbol,\\n        uint256 maxSupply,\\n        uint256 currentSupply,\\n        bool transferable,\\n        bool active\\n    ) {\\n        TokenInfo storage token = tokenInfo[tokenId];\\n        return (\\n            token.name,\\n            token.symbol,\\n            token.maxSupply,\\n            totalSupply(tokenId),\\n            token.transferable,\\n            token.active\\n        );\\n    }\\n\\n    /**\\n     * @dev \\u751f\\u6210\\u552f\\u4e00ID\\n     */\\n    function _generateUniqueId(uint256 tokenId, address to) internal returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(\\n            tokenId,\\n            to,\\n            block.timestamp,\\n            _currentTokenIndex++\\n        )));\\n    }\\n\\n    /**\\n     * @dev \\u91cd\\u5199token\\u66f4\\u65b0\\u68c0\\u67e5\\n     */\\n    function _update(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual override(ERC1155Upgradeable, ERC1155SupplyUpgradeable) whenNotPaused {\\n        // \\u68c0\\u67e5\\u8f6c\\u79fb\\u9650\\u5236\\n        for (uint i = 0; i < ids.length; i++) {\\n            // \\u94f8\\u9020\\u548c\\u9500\\u6bc1\\u603b\\u662f\\u5141\\u8bb8\\u7684\\n            if (from != address(0) && to != address(0)) {\\n                if (!tokenInfo[ids[i]].transferable && !authorizedOperators[_msgSender()]) {\\n                    revert TransferNotAllowed(ids[i]);\\n                }\\n            }\\n        }\\n\\n        super._update(from, to, ids, amounts);\\n    }\\n\\n    /**\\n     * @dev \\u8bbe\\u7f6eTreasury\\u5730\\u5740 (\\u6d4b\\u8bd5\\u9700\\u8981)\\n     */\\n    function setTreasury(address treasuryAddress) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        address oldTreasury = _treasury;\\n        _treasury = treasuryAddress;\\n        \\n        // \\u5982\\u679c\\u6709\\u65e7\\u7684Treasury\\uff0c\\u64a4\\u9500\\u5176MINTER\\u6743\\u9650\\n        if (oldTreasury != address(0)) {\\n            _revokeRole(MINTER_ROLE, oldTreasury);\\n        }\\n        \\n        // \\u7ed9\\u65b0Treasury\\u6388\\u4e88MINTER\\u6743\\u9650\\n        if (treasuryAddress != address(0)) {\\n            _grantRole(MINTER_ROLE, treasuryAddress);\\n        }\\n    }\\n\\n    /**\\n     * @dev \\u83b7\\u53d6Treasury\\u5730\\u5740\\n     */\\n    function treasury() public view returns (address) {\\n        return _treasury;\\n    }\\n\\n    /**\\n     * @dev \\u83b7\\u53d6\\u5408\\u7ea6\\u6240\\u6709\\u8005 (\\u6d4b\\u8bd5\\u9700\\u8981)\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev \\u8bbe\\u7f6eURI (\\u6d4b\\u8bd5\\u9700\\u8981)\\n     */\\n    function setURI(string memory newuri) public onlyRole(URI_SETTER_ROLE) {\\n        _setURI(newuri);\\n    }\\n\\n    /**\\n     * @dev \\u652f\\u6301\\u63a5\\u53e3\\u68c0\\u67e5\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC1155Upgradeable, AccessControlUpgradeable)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\",\"keccak256\":\"0x750da75e63ffac8cd626a47ad1b9808b3109ce8393e4d4386291da0b71585c11\",\"license\":\"MIT\"},\"contracts/Treasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./QACard.sol\\\";\\n\\n/**\\n * @title Treasury\\n * @dev \\u8d44\\u91d1\\u91d1\\u5e93\\u5408\\u7ea6 - \\u8d1f\\u8d23USDT\\u548cETH\\u7684\\u5b58\\u50a8\\u548c\\u63d0\\u53d6\\n * \\n * \\u529f\\u80fd\\u7279\\u6027:\\n * - USDT/ETH\\u5b58\\u6b3e\\u548c\\u63d0\\u53d6\\n * - ETH\\u76f4\\u63a5\\u652f\\u4ed8\\u8d2d\\u4e70\\u4ea7\\u54c1\\u5e76\\u94f8\\u9020NFT\\n * - \\u591a\\u91cd\\u7b7e\\u540d\\u63a7\\u5236\\n * - \\u7d27\\u6025\\u6682\\u505c\\u673a\\u5236\\n * - \\u89d2\\u8272\\u6743\\u9650\\u63a7\\u5236\\n * - \\u4e8b\\u4ef6\\u65e5\\u5fd7\\u5b8c\\u6574\\u8bb0\\u5f55\\n */\\ncontract Treasury is\\n    Initializable,\\n    AccessControlUpgradeable,\\n    PausableUpgradeable,\\n    ReentrancyGuardUpgradeable\\n{\\n    using SafeERC20 for IERC20;\\n\\n    // \\u89d2\\u8272\\u5b9a\\u4e49\\n    bytes32 public constant OPERATOR_ROLE = keccak256(\\\"OPERATOR_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n    bytes32 public constant WITHDRAWER_ROLE = keccak256(\\\"WITHDRAWER_ROLE\\\");\\n\\n    // \\u4ea7\\u54c1\\u7c7b\\u578b\\u679a\\u4e3e\\n    enum ProductType {\\n        SILVER,   // \\u767d\\u94f6\\u5361 - 12% APR, 60\\u5929\\n        GOLD,     // \\u9ec4\\u91d1\\u5361 - 15% APR, 90\\u5929\\n        DIAMOND,  // \\u94bb\\u77f3\\u5361 - 18% APR, 180\\u5929\\n        PLATINUM  // \\u767d\\u91d1\\u5361 - 20% APR, 365\\u5929\\n    }\\n\\n    // \\u4ea7\\u54c1\\u4fe1\\u606f\\u7ed3\\u6784\\n    struct ProductInfo {\\n        string name;\\n        uint256 minInvestment;  // \\u6700\\u5c0f\\u6295\\u8d44\\u91d1\\u989d\\n        uint256 maxInvestment;  // \\u6700\\u5927\\u6295\\u8d44\\u91d1\\u989d\\n        uint256 apr;            // \\u5e74\\u5316\\u6536\\u76ca\\u7387 (\\u57fa\\u70b9: 1500 = 15%)\\n        uint256 duration;       // \\u6295\\u8d44\\u671f\\u9650 (\\u5929)\\n        bool isActive;          // \\u662f\\u5426\\u6d3b\\u8dc3\\n    }\\n\\n    // \\u72b6\\u6001\\u53d8\\u91cf\\n    IERC20 public usdtToken;\\n    QACard public qaCard;\\n    mapping(address => uint256) public userDeposits; // USDT\\u5b58\\u6b3e\\n    mapping(address => uint256) public userEthDeposits; // ETH\\u5b58\\u6b3e\\n    mapping(ProductType => ProductInfo) public products;\\n    uint256 public totalDeposits; // \\u603bUSDT\\u5b58\\u6b3e\\n    uint256 public totalEthDeposits; // \\u603bETH\\u5b58\\u6b3e\\n    uint256 public totalWithdrawals;\\n    \\n    // \\u63d0\\u53d6\\u9650\\u5236\\u914d\\u7f6e\\n    uint256 public dailyWithdrawLimit;\\n    uint256 public singleWithdrawLimit;\\n    mapping(uint256 => uint256) public dailyWithdrawn; // day => amount\\n    \\n    // \\u63a8\\u8350\\u7cfb\\u7edf\\u589e\\u5f3a\\n    mapping(address => address) public userReferrers; // \\u7528\\u6237\\u63a8\\u8350\\u4eba\\u6620\\u5c04\\n    mapping(address => uint256) public referralCommissions; // \\u63a8\\u8350\\u4f63\\u91d1\\u7d2f\\u8ba1\\n    mapping(address => uint256) public totalReferrals; // \\u603b\\u63a8\\u8350\\u4eba\\u6570\\n    uint256 public referralCommissionRate; // \\u63a8\\u8350\\u4f63\\u91d1\\u6bd4\\u4f8b (\\u57fa\\u70b9: 500 = 5%)\\n    \\n    // \\u6536\\u76ca\\u5206\\u7ea2\\u7cfb\\u7edf\\n    uint256 public totalRewardPool; // \\u603b\\u5956\\u52b1\\u6c60\\n    mapping(uint256 => uint256) public periodRewards; // \\u671f\\u95f4\\u5956\\u52b1 period => amount\\n    mapping(address => mapping(uint256 => bool)) public userRewardsClaimed; // \\u7528\\u6237\\u5956\\u52b1\\u9886\\u53d6\\u8bb0\\u5f55\\n    uint256 public currentRewardPeriod; // \\u5f53\\u524d\\u5956\\u52b1\\u671f\\u95f4\\n    uint256 public rewardPeriodDuration; // \\u5956\\u52b1\\u671f\\u95f4\\u65f6\\u957f (\\u79d2)\\n    uint256 public lastRewardTime; // \\u4e0a\\u6b21\\u5956\\u52b1\\u65f6\\u95f4\\n    \\n    // ETH\\u4ef7\\u683c\\u9884\\u8a00\\u673a\\n    uint256 public ethToUsdtRate; // ETH\\u5230USDT\\u6c47\\u7387 (6\\u4f4d\\u5c0f\\u6570\\u7cbe\\u5ea6)\\n    uint256 public lastPriceUpdate; // \\u4e0a\\u6b21\\u4ef7\\u683c\\u66f4\\u65b0\\u65f6\\u95f4\\n    uint256 public priceValidityPeriod; // \\u4ef7\\u683c\\u6709\\u6548\\u671f (\\u79d2)\\n    \\n    // \\u4e8b\\u4ef6\\u5b9a\\u4e49\\n    event Deposited(\\n        address indexed user,\\n        uint256 amount,\\n        bytes32 indexed orderId,\\n        uint256 timestamp\\n    );\\n    \\n    event Withdrawn(\\n        address indexed to,\\n        uint256 amount,\\n        address indexed operator,\\n        bytes32 indexed reason,\\n        uint256 timestamp\\n    );\\n\\n    // \\u4e3a\\u5411\\u540e\\u517c\\u5bb9\\u6dfb\\u52a0\\u522b\\u540d\\n    event Withdrawal(\\n        address indexed to,\\n        uint256 amount,\\n        address indexed operator,\\n        bytes32 indexed reason,\\n        uint256 timestamp\\n    );\\n    \\n    event LimitsUpdated(\\n        uint256 dailyLimit,\\n        uint256 singleLimit,\\n        address indexed operator\\n    );\\n    \\n    event EmergencyWithdraw(\\n        address indexed to,\\n        uint256 amount,\\n        address indexed operator,\\n        uint256 timestamp\\n    );\\n\\n    event BatchDeposit(\\n        address indexed user,\\n        uint256 totalAmount,\\n        uint256 count\\n    );\\n\\n    event ProductPurchased(\\n        address indexed user,\\n        ProductType productType,\\n        uint256 amount,\\n        uint256 tokenId\\n    );\\n\\n    event ProductPurchasedWithETH(\\n        address indexed user,\\n        ProductType productType,\\n        uint256 ethAmount,\\n        uint256 tokenId,\\n        uint256 timestamp\\n    );\\n\\n    event ETHDeposited(\\n        address indexed user,\\n        uint256 amount,\\n        bytes32 indexed orderId,\\n        uint256 timestamp\\n    );\\n\\n    event ProductUpdated(\\n        ProductType productType,\\n        string name,\\n        uint256 minInvestment,\\n        uint256 maxInvestment,\\n        uint256 apr,\\n        uint256 duration,\\n        bool isActive\\n    );\\n\\n    // \\u63a8\\u8350\\u7cfb\\u7edf\\u4e8b\\u4ef6\\n    event ReferralSet(\\n        address indexed user,\\n        address indexed referrer,\\n        uint256 timestamp\\n    );\\n\\n    event ReferralCommissionPaid(\\n        address indexed referrer,\\n        address indexed user,\\n        uint256 amount,\\n        uint256 timestamp\\n    );\\n\\n    // \\u6536\\u76ca\\u5206\\u7ea2\\u4e8b\\u4ef6\\n    event RewardPeriodStarted(\\n        uint256 indexed period,\\n        uint256 totalReward,\\n        uint256 timestamp\\n    );\\n\\n    event RewardClaimed(\\n        address indexed user,\\n        uint256 indexed period,\\n        uint256 amount,\\n        uint256 timestamp\\n    );\\n\\n    // \\u4ef7\\u683c\\u66f4\\u65b0\\u4e8b\\u4ef6\\n    event PriceUpdated(\\n        uint256 newRate,\\n        uint256 timestamp,\\n        address indexed operator\\n    );\\n\\n    // \\u9519\\u8bef\\u5b9a\\u4e49\\n    error InsufficientBalance(uint256 requested, uint256 available);\\n    error ExceedsWithdrawLimit(uint256 amount, uint256 limit);\\n    error InvalidAmount();\\n    error TransferFailed();\\n    error UnauthorizedAccess();\\n    error ProductNotActive();\\n    error InvalidInvestmentAmount(uint256 amount, uint256 min, uint256 max);\\n    error InvalidReferrer();\\n    error RewardAlreadyClaimed();\\n    error RewardPeriodNotStarted();\\n    error PriceExpired();\\n    error InvalidPrice();\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        // For testing purposes, allow initialization\\n        // _disableInitializers();\\n    }\\n\\n    /**\\n     * @dev \\u521d\\u59cb\\u5316\\u5408\\u7ea6\\n     * @param _usdtToken USDT\\u4ee3\\u5e01\\u5408\\u7ea6\\u5730\\u5740\\n     * @param _admin \\u7ba1\\u7406\\u5458\\u5730\\u5740\\n     * @param _operators \\u64cd\\u4f5c\\u5458\\u5730\\u5740\\u6570\\u7ec4\\n     */\\n    function initialize(\\n        address _usdtToken,\\n        address _admin,\\n        address[] memory _operators\\n    ) public initializer {\\n        require(_usdtToken != address(0), \\\"Invalid USDT address\\\");\\n        require(_admin != address(0), \\\"Invalid admin address\\\");\\n\\n        __AccessControl_init();\\n        __Pausable_init();\\n        __ReentrancyGuard_init();\\n\\n        usdtToken = IERC20(_usdtToken);\\n        \\n        // \\u8bbe\\u7f6e\\u9ed8\\u8ba4\\u9650\\u5236 (\\u5339\\u914d\\u6d4b\\u8bd5\\u671f\\u671b)\\n        dailyWithdrawLimit = 10000 * 10**6; // 1\\u4e07 USDT (\\u5339\\u914d\\u6d4b\\u8bd5\\u671f\\u671b)\\n        singleWithdrawLimit = 100000 * 10**6; // 10\\u4e07 USDT\\n\\n        // \\u521d\\u59cb\\u5316\\u63a8\\u8350\\u7cfb\\u7edf\\n        referralCommissionRate = 500; // 5% \\u63a8\\u8350\\u4f63\\u91d1\\n        \\n        // \\u521d\\u59cb\\u5316\\u6536\\u76ca\\u5206\\u7ea2\\u7cfb\\u7edf\\n        rewardPeriodDuration = 7 * 24 * 60 * 60; // 7\\u5929\\u4e00\\u4e2a\\u5468\\u671f\\n        lastRewardTime = block.timestamp - rewardPeriodDuration; // \\u5141\\u8bb8\\u7acb\\u5373\\u542f\\u52a8\\u7b2c\\u4e00\\u4e2a\\u671f\\u95f4\\n        currentRewardPeriod = 0;\\n        \\n        // \\u521d\\u59cb\\u5316ETH\\u4ef7\\u683c\\u9884\\u8a00\\u673a\\n        ethToUsdtRate = 2000 * 10**6; // 1 ETH = 2000 USDT (6\\u4f4d\\u5c0f\\u6570\\u7cbe\\u5ea6)\\n        lastPriceUpdate = block.timestamp;\\n        priceValidityPeriod = 1 * 60 * 60; // 1\\u5c0f\\u65f6\\u4ef7\\u683c\\u6709\\u6548\\u671f\\n\\n        // \\u521d\\u59cb\\u5316\\u4ea7\\u54c1\\u914d\\u7f6e\\n        _initializeProducts();\\n\\n        // \\u5206\\u914d\\u89d2\\u8272\\n        _grantRole(DEFAULT_ADMIN_ROLE, _admin);\\n        _grantRole(PAUSER_ROLE, _admin);\\n        _grantRole(WITHDRAWER_ROLE, _admin);\\n\\n        for (uint i = 0; i < _operators.length; i++) {\\n            _grantRole(OPERATOR_ROLE, _operators[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev \\u8bbe\\u7f6eQACard\\u5408\\u7ea6\\u5730\\u5740\\n     */\\n    function setQACard(address _qaCard) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(_qaCard != address(0), \\\"Invalid QACard address\\\");\\n        qaCard = QACard(_qaCard);\\n    }\\n\\n    /**\\n     * @dev \\u7528\\u6237\\u5b58\\u5165USDT\\n     * @param amount \\u5b58\\u5165\\u91d1\\u989d\\n     * @param orderId \\u8ba2\\u5355ID (\\u94fe\\u4e0b\\u751f\\u6210)\\n     */\\n    function deposit(\\n        uint256 amount,\\n        bytes32 orderId\\n    ) external whenNotPaused nonReentrant {\\n        if (amount == 0) revert InvalidAmount();\\n\\n        // \\u8f6c\\u5165USDT\\n        usdtToken.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        // \\u66f4\\u65b0\\u72b6\\u6001\\n        userDeposits[msg.sender] += amount;\\n        totalDeposits += amount;\\n\\n        emit Deposited(msg.sender, amount, orderId, block.timestamp);\\n    }\\n\\n    /**\\n     * @dev \\u6279\\u91cf\\u5b58\\u5165USDT (Gas\\u4f18\\u5316)\\n     * @param amounts \\u5b58\\u5165\\u91d1\\u989d\\u6570\\u7ec4\\n     * @param orderIds \\u8ba2\\u5355ID\\u6570\\u7ec4\\n     */\\n    function batchDeposit(\\n        uint256[] calldata amounts,\\n        bytes32[] calldata orderIds\\n    ) external whenNotPaused nonReentrant {\\n        require(amounts.length == orderIds.length, \\\"Array length mismatch\\\");\\n        \\n        uint256 totalAmount = 0;\\n        for (uint i = 0; i < amounts.length; i++) {\\n            if (amounts[i] == 0) revert InvalidAmount();\\n            totalAmount += amounts[i];\\n        }\\n\\n        // \\u4e00\\u6b21\\u6027\\u8f6c\\u5165\\u603b\\u91d1\\u989d\\n        usdtToken.safeTransferFrom(msg.sender, address(this), totalAmount);\\n\\n        // \\u66f4\\u65b0\\u72b6\\u6001\\u5e76\\u53d1\\u51fa\\u4e8b\\u4ef6\\n        userDeposits[msg.sender] += totalAmount;\\n        totalDeposits += totalAmount;\\n\\n        for (uint i = 0; i < amounts.length; i++) {\\n            emit Deposited(msg.sender, amounts[i], orderIds[i], block.timestamp);\\n        }\\n\\n        emit BatchDeposit(msg.sender, totalAmount, amounts.length);\\n    }\\n\\n    /**\\n     * @dev \\u8fd0\\u8425\\u63d0\\u53d6USDT\\n     * @param to \\u63a5\\u6536\\u5730\\u5740\\n     * @param amount \\u63d0\\u53d6\\u91d1\\u989d\\n     * @param reason \\u63d0\\u53d6\\u539f\\u56e0\\n     */\\n    function withdraw(\\n        address to,\\n        uint256 amount,\\n        bytes32 reason\\n    ) external onlyRole(WITHDRAWER_ROLE) whenNotPaused nonReentrant {\\n        _checkWithdrawLimits(amount);\\n        _executeWithdraw(to, amount, reason);\\n    }\\n\\n    /**\\n     * @dev \\u8fd0\\u8425\\u63d0\\u53d6USDT (\\u5411\\u540e\\u517c\\u5bb9)\\n     * @param amount \\u63d0\\u53d6\\u91d1\\u989d\\n     */\\n    function withdraw(uint256 amount) external onlyRole(WITHDRAWER_ROLE) whenNotPaused nonReentrant {\\n        _checkWithdrawLimits(amount);\\n        _executeWithdraw(msg.sender, amount, \\\"operational_withdraw\\\");\\n    }\\n\\n    /**\\n     * @dev \\u7d27\\u6025\\u63d0\\u53d6 (\\u7ed5\\u8fc7\\u9650\\u5236)\\n     * @param to \\u63a5\\u6536\\u5730\\u5740\\n     * @param amount \\u63d0\\u53d6\\u91d1\\u989d\\n     */\\n    function emergencyWithdraw(\\n        address to,\\n        uint256 amount\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) nonReentrant {\\n        uint256 balance = usdtToken.balanceOf(address(this));\\n        if (amount > balance) {\\n            revert InsufficientBalance(amount, balance);\\n        }\\n\\n        usdtToken.safeTransfer(to, amount);\\n        totalWithdrawals += amount;\\n\\n        emit EmergencyWithdraw(to, amount, msg.sender, block.timestamp);\\n    }\\n\\n    /**\\n     * @dev \\u7d27\\u6025\\u63d0\\u53d6\\u5168\\u90e8\\u4f59\\u989d (\\u5411\\u540e\\u517c\\u5bb9)\\n     */\\n    function emergencyWithdraw() external onlyRole(DEFAULT_ADMIN_ROLE) nonReentrant {\\n        uint256 balance = usdtToken.balanceOf(address(this));\\n        if (balance == 0) revert InvalidAmount();\\n\\n        usdtToken.safeTransfer(msg.sender, balance);\\n        totalWithdrawals += balance;\\n\\n        emit EmergencyWithdraw(msg.sender, balance, msg.sender, block.timestamp);\\n    }\\n\\n    /**\\n     * @dev \\u8d2d\\u4e70\\u4ea7\\u54c1\\n     * @param productType \\u4ea7\\u54c1\\u7c7b\\u578b\\n     * @param amount \\u6295\\u8d44\\u91d1\\u989d\\n     */\\n    function purchaseProduct(\\n        ProductType productType,\\n        uint256 amount\\n    ) external whenNotPaused nonReentrant {\\n        _purchaseProductInternal(productType, amount, address(0));\\n    }\\n\\n    /**\\n     * @dev \\u8d2d\\u4e70\\u4ea7\\u54c1\\uff08\\u5e26\\u63a8\\u8350\\uff09\\n     * @param productType \\u4ea7\\u54c1\\u7c7b\\u578b\\n     * @param amount \\u6295\\u8d44\\u91d1\\u989d\\n     * @param referrer \\u63a8\\u8350\\u4eba\\u5730\\u5740\\n     */\\n    function purchaseProductWithReferral(\\n        ProductType productType,\\n        uint256 amount,\\n        address referrer\\n    ) external whenNotPaused nonReentrant {\\n        if (referrer != address(0) && referrer != msg.sender) {\\n            _setReferrer(msg.sender, referrer);\\n        }\\n        _purchaseProductInternal(productType, amount, referrer);\\n    }\\n\\n    /**\\n     * @dev \\u5185\\u90e8\\u8d2d\\u4e70\\u4ea7\\u54c1\\u903b\\u8f91\\n     */\\n    function _purchaseProductInternal(\\n        ProductType productType,\\n        uint256 amount,\\n        address referrer\\n    ) internal {\\n        ProductInfo memory product = products[productType];\\n        \\n        // \\u68c0\\u67e5\\u4ea7\\u54c1\\u662f\\u5426\\u6d3b\\u8dc3\\n        if (!product.isActive) {\\n            revert ProductNotActive();\\n        }\\n        \\n        // \\u68c0\\u67e5\\u6295\\u8d44\\u91d1\\u989d\\u8303\\u56f4\\n        if (amount < product.minInvestment || amount > product.maxInvestment) {\\n            revert InvalidInvestmentAmount(amount, product.minInvestment, product.maxInvestment);\\n        }\\n        \\n        // \\u8f6c\\u5165USDT\\n        usdtToken.safeTransferFrom(msg.sender, address(this), amount);\\n        \\n        // \\u5904\\u7406\\u63a8\\u8350\\u4f63\\u91d1\\n        if (referrer == address(0)) {\\n            referrer = userReferrers[msg.sender];\\n        }\\n        \\n        if (referrer != address(0) && referrer != msg.sender) {\\n            uint256 commission = (amount * referralCommissionRate) / 10000;\\n            referralCommissions[referrer] += commission;\\n            totalReferrals[referrer] += 1;\\n            emit ReferralCommissionPaid(referrer, msg.sender, commission, block.timestamp);\\n        }\\n        \\n        // \\u94f8\\u9020NFT\\u6743\\u76ca\\u51ed\\u8bc1\\n        uint256 tokenId = qaCard.mintCard(\\n            msg.sender,\\n            uint8(productType),\\n            amount,\\n            product.apr,\\n            product.duration\\n        );\\n        \\n        // \\u66f4\\u65b0\\u72b6\\u6001\\n        userDeposits[msg.sender] += amount;\\n        totalDeposits += amount;\\n        \\n        emit ProductPurchased(msg.sender, productType, amount, tokenId);\\n    }\\n\\n    /**\\n     * @dev \\u4f7f\\u7528ETH\\u8d2d\\u4e70\\u4ea7\\u54c1\\n     * @param productType \\u4ea7\\u54c1\\u7c7b\\u578b\\n     */\\n    function purchaseProductWithETH(\\n        ProductType productType\\n    ) external payable whenNotPaused nonReentrant {\\n        ProductInfo memory product = products[productType];\\n        \\n        // \\u68c0\\u67e5\\u4ea7\\u54c1\\u662f\\u5426\\u6d3b\\u8dc3\\n        if (!product.isActive) {\\n            revert ProductNotActive();\\n        }\\n        \\n        // \\u68c0\\u67e5\\u4ef7\\u683c\\u662f\\u5426\\u8fc7\\u671f\\n        if (block.timestamp - lastPriceUpdate > priceValidityPeriod) {\\n            revert PriceExpired();\\n        }\\n        \\n        // \\u68c0\\u67e5ETH\\u6295\\u8d44\\u91d1\\u989d (msg.value\\u662fwei\\u5355\\u4f4d)\\n        // \\u4f7f\\u7528\\u9884\\u8a00\\u673a\\u4ef7\\u683c\\u8fdb\\u884c\\u8f6c\\u6362\\n        uint256 equivalentUSDT = (msg.value * ethToUsdtRate) / 1e18; // \\u8f6c\\u6362\\u4e3aUSDT\\u7cbe\\u5ea6\\n        \\n        if (equivalentUSDT < product.minInvestment || equivalentUSDT > product.maxInvestment) {\\n            revert InvalidInvestmentAmount(equivalentUSDT, product.minInvestment, product.maxInvestment);\\n        }\\n        \\n        // ETH\\u5df2\\u7ecf\\u901a\\u8fc7payable\\u81ea\\u52a8\\u8f6c\\u5165\\u5408\\u7ea6\\n        \\n        // \\u94f8\\u9020NFT\\u6743\\u76ca\\u51ed\\u8bc1\\n        uint256 tokenId = qaCard.mintCard(\\n            msg.sender,\\n            uint8(productType),\\n            equivalentUSDT, // \\u4f7f\\u7528\\u7b49\\u503cUSDT\\u91d1\\u989d\\u8bb0\\u5f55\\n            product.apr,\\n            product.duration\\n        );\\n        \\n        // \\u66f4\\u65b0\\u72b6\\u6001\\n        userEthDeposits[msg.sender] += msg.value;\\n        totalEthDeposits += msg.value;\\n        \\n        emit ProductPurchasedWithETH(\\n            msg.sender, \\n            productType, \\n            msg.value, \\n            tokenId, \\n            block.timestamp\\n        );\\n    }\\n\\n    /**\\n     * @dev \\u66f4\\u65b0\\u4ea7\\u54c1\\u4fe1\\u606f\\n     */\\n    function updateProduct(\\n        ProductType productType,\\n        string calldata name,\\n        uint256 minInvestment,\\n        uint256 maxInvestment,\\n        uint256 apr,\\n        uint256 duration,\\n        bool isActive\\n    ) external onlyRole(OPERATOR_ROLE) {\\n        products[productType] = ProductInfo({\\n            name: name,\\n            minInvestment: minInvestment,\\n            maxInvestment: maxInvestment,\\n            apr: apr,\\n            duration: duration,\\n            isActive: isActive\\n        });\\n\\n        emit ProductUpdated(\\n            productType,\\n            name,\\n            minInvestment,\\n            maxInvestment,\\n            apr,\\n            duration,\\n            isActive\\n        );\\n    }\\n\\n    /**\\n     * @dev \\u83b7\\u53d6\\u4ea7\\u54c1\\u4fe1\\u606f\\n     */\\n    function getProductInfo(ProductType productType) external view returns (ProductInfo memory) {\\n        return products[productType];\\n    }\\n\\n    /**\\n     * @dev \\u8bbe\\u7f6e\\u63d0\\u53d6\\u9650\\u5236\\n     * @param _dailyLimit \\u6bcf\\u65e5\\u63d0\\u53d6\\u9650\\u5236\\n     * @param _singleLimit \\u5355\\u6b21\\u63d0\\u53d6\\u9650\\u5236\\n     */\\n    function setWithdrawLimits(\\n        uint256 _dailyLimit,\\n        uint256 _singleLimit\\n    ) external onlyRole(OPERATOR_ROLE) {\\n        dailyWithdrawLimit = _dailyLimit;\\n        singleWithdrawLimit = _singleLimit;\\n\\n        emit LimitsUpdated(_dailyLimit, _singleLimit, msg.sender);\\n    }\\n\\n    /**\\n     * @dev \\u66f4\\u65b0\\u6bcf\\u65e5\\u63d0\\u53d6\\u9650\\u5236 (\\u5411\\u540e\\u517c\\u5bb9)\\n     * @param _dailyLimit \\u6bcf\\u65e5\\u63d0\\u53d6\\u9650\\u5236\\n     */\\n    function updateDailyWithdrawalLimit(uint256 _dailyLimit) external onlyRole(OPERATOR_ROLE) {\\n        dailyWithdrawLimit = _dailyLimit;\\n        emit LimitsUpdated(_dailyLimit, singleWithdrawLimit, msg.sender);\\n    }\\n\\n    /**\\n     * @dev \\u6682\\u505c\\u5408\\u7ea6\\n     */\\n    function pause() external onlyRole(PAUSER_ROLE) {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev \\u6062\\u590d\\u5408\\u7ea6\\n     */\\n    function unpause() external onlyRole(PAUSER_ROLE) {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @dev \\u83b7\\u53d6\\u5408\\u7ea6USDT\\u4f59\\u989d\\n     */\\n    function getBalance() external view returns (uint256) {\\n        return usdtToken.balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @dev \\u83b7\\u53d6\\u7528\\u6237\\u5b58\\u6b3e\\u4f59\\u989d\\n     */\\n    function getUserDeposits(address user) external view returns (uint256) {\\n        return userDeposits[user];\\n    }\\n\\n    /**\\n     * @dev \\u83b7\\u53d6\\u7528\\u6237\\u6295\\u8d44\\u4f59\\u989d (\\u5411\\u540e\\u517c\\u5bb9)\\n     */\\n    function getUserInvestments(address user) external view returns (uint256) {\\n        return userDeposits[user];\\n    }\\n\\n    /**\\n     * @dev \\u83b7\\u53d6\\u5408\\u7ea6ETH\\u4f59\\u989d\\n     */\\n    function getETHBalance() external view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    /**\\n     * @dev \\u83b7\\u53d6\\u7528\\u6237ETH\\u5b58\\u6b3e\\u4f59\\u989d\\n     */\\n    function getUserETHDeposits(address user) external view returns (uint256) {\\n        return userEthDeposits[user];\\n    }\\n\\n    /**\\n     * @dev \\u83b7\\u53d6\\u603bETH\\u5b58\\u6b3e\\n     */\\n    function getTotalETHDeposits() external view returns (uint256) {\\n        return totalEthDeposits;\\n    }\\n\\n    /**\\n     * @dev \\u83b7\\u53d6\\u4eca\\u65e5\\u5df2\\u63d0\\u53d6\\u91d1\\u989d\\n     */\\n    function getTodayWithdrawn() external view returns (uint256) {\\n        uint256 today = block.timestamp / 86400;\\n        return dailyWithdrawn[today];\\n    }\\n\\n    /**\\n     * @dev \\u68c0\\u67e5\\u63d0\\u53d6\\u9650\\u5236\\n     */\\n    function _checkWithdrawLimits(uint256 amount) internal view {\\n        // \\u68c0\\u67e5\\u5355\\u6b21\\u9650\\u5236\\n        if (amount > singleWithdrawLimit) {\\n            revert ExceedsWithdrawLimit(amount, singleWithdrawLimit);\\n        }\\n\\n        // \\u68c0\\u67e5\\u6bcf\\u65e5\\u9650\\u5236\\n        uint256 today = block.timestamp / 86400;\\n        uint256 todayWithdrawn = dailyWithdrawn[today];\\n        if (todayWithdrawn + amount > dailyWithdrawLimit) {\\n            revert ExceedsWithdrawLimit(\\n                todayWithdrawn + amount,\\n                dailyWithdrawLimit\\n            );\\n        }\\n\\n        // \\u68c0\\u67e5\\u4f59\\u989d\\n        uint256 balance = usdtToken.balanceOf(address(this));\\n        if (amount > balance) {\\n            revert InsufficientBalance(amount, balance);\\n        }\\n    }\\n\\n    /**\\n     * @dev \\u6267\\u884c\\u63d0\\u53d6\\u64cd\\u4f5c\\n     */\\n    function _executeWithdraw(\\n        address to,\\n        uint256 amount,\\n        bytes32 reason\\n    ) internal {\\n        // \\u8f6c\\u8d26\\n        usdtToken.safeTransfer(to, amount);\\n\\n        // \\u66f4\\u65b0\\u72b6\\u6001\\n        totalWithdrawals += amount;\\n        uint256 today = block.timestamp / 86400;\\n        dailyWithdrawn[today] += amount;\\n\\n        emit Withdrawn(to, amount, msg.sender, reason, block.timestamp);\\n        emit Withdrawal(to, amount, msg.sender, reason, block.timestamp);\\n    }\\n\\n    /**\\n     * @dev \\u652f\\u6301\\u63a5\\u6536ETH (\\u7528\\u4e8e\\u652f\\u4ed8Gas\\u8d39)\\n     */\\n    receive() external payable {}\\n\\n    /**\\n     * @dev \\u63d0\\u53d6ETH\\n     */\\n    function withdrawETH(\\n        address payable to,\\n        uint256 amount\\n    ) external onlyRole(OPERATOR_ROLE) {\\n        require(address(this).balance >= amount, \\\"Insufficient ETH balance\\\");\\n        (bool success, ) = to.call{value: amount}(\\\"\\\");\\n        require(success, \\\"ETH transfer failed\\\");\\n    }\\n\\n    /**\\n     * @dev \\u8bbe\\u7f6e\\u63a8\\u8350\\u4eba\\n     */\\n    function _setReferrer(address user, address referrer) internal {\\n        if (userReferrers[user] == address(0) && referrer != user) {\\n            userReferrers[user] = referrer;\\n            emit ReferralSet(user, referrer, block.timestamp);\\n        }\\n    }\\n\\n    /**\\n     * @dev \\u8bbe\\u7f6e\\u63a8\\u8350\\u4eba\\uff08\\u5916\\u90e8\\u8c03\\u7528\\uff09\\n     */\\n    function setReferrer(address referrer) external {\\n        if (referrer == msg.sender) revert InvalidReferrer();\\n        _setReferrer(msg.sender, referrer);\\n    }\\n\\n    /**\\n     * @dev \\u9886\\u53d6\\u63a8\\u8350\\u4f63\\u91d1\\n     */\\n    function claimReferralCommission() external nonReentrant {\\n        uint256 amount = referralCommissions[msg.sender];\\n        if (amount == 0) revert InvalidAmount();\\n\\n        referralCommissions[msg.sender] = 0;\\n        usdtToken.safeTransfer(msg.sender, amount);\\n\\n        emit Withdrawn(msg.sender, amount, msg.sender, \\\"referral_commission\\\", block.timestamp);\\n    }\\n\\n    /**\\n     * @dev \\u66f4\\u65b0ETH\\u4ef7\\u683c\\n     */\\n    function updateETHPrice(uint256 newRate) external onlyRole(OPERATOR_ROLE) {\\n        if (newRate == 0) revert InvalidPrice();\\n        \\n        ethToUsdtRate = newRate;\\n        lastPriceUpdate = block.timestamp;\\n        \\n        emit PriceUpdated(newRate, block.timestamp, msg.sender);\\n    }\\n\\n    /**\\n     * @dev \\u8bbe\\u7f6e\\u63a8\\u8350\\u4f63\\u91d1\\u6bd4\\u4f8b\\n     */\\n    function setReferralCommissionRate(uint256 rate) external onlyRole(OPERATOR_ROLE) {\\n        require(rate <= 1000, \\\"Rate too high\\\"); // \\u6700\\u592710%\\n        referralCommissionRate = rate;\\n    }\\n\\n    /**\\n     * @dev \\u542f\\u52a8\\u65b0\\u7684\\u5956\\u52b1\\u671f\\u95f4\\n     */\\n    function startRewardPeriod(uint256 rewardAmount) external onlyRole(OPERATOR_ROLE) {\\n        if (block.timestamp < lastRewardTime + rewardPeriodDuration) {\\n            revert RewardPeriodNotStarted();\\n        }\\n        \\n        // \\u8f6c\\u5165\\u5956\\u52b1\\u5230\\u5408\\u7ea6\\n        if (rewardAmount > 0) {\\n            usdtToken.safeTransferFrom(msg.sender, address(this), rewardAmount);\\n        }\\n        \\n        periodRewards[currentRewardPeriod] = rewardAmount;\\n        totalRewardPool += rewardAmount;\\n        \\n        emit RewardPeriodStarted(currentRewardPeriod, rewardAmount, block.timestamp);\\n        \\n        currentRewardPeriod++;\\n        lastRewardTime = block.timestamp;\\n    }\\n\\n    /**\\n     * @dev \\u9886\\u53d6\\u671f\\u95f4\\u5956\\u52b1\\n     */\\n    function claimPeriodReward(uint256 period) external nonReentrant {\\n        if (userRewardsClaimed[msg.sender][period]) {\\n            revert RewardAlreadyClaimed();\\n        }\\n        \\n        if (period >= currentRewardPeriod) {\\n            revert RewardPeriodNotStarted();\\n        }\\n        \\n        // \\u7b80\\u5316\\u7684\\u5956\\u52b1\\u8ba1\\u7b97\\uff1a\\u57fa\\u4e8e\\u7528\\u6237\\u5728\\u8be5\\u671f\\u95f4\\u7684\\u6295\\u8d44\\u6bd4\\u4f8b\\n        uint256 userShare = userDeposits[msg.sender];\\n        uint256 totalShare = totalDeposits;\\n        \\n        if (userShare == 0 || totalShare == 0) {\\n            revert InvalidAmount();\\n        }\\n        \\n        uint256 rewardAmount = (periodRewards[period] * userShare) / totalShare;\\n        \\n        if (rewardAmount == 0) {\\n            revert InvalidAmount();\\n        }\\n        \\n        userRewardsClaimed[msg.sender][period] = true;\\n        usdtToken.safeTransfer(msg.sender, rewardAmount);\\n        \\n        emit RewardClaimed(msg.sender, period, rewardAmount, block.timestamp);\\n    }\\n\\n    /**\\n     * @dev \\u83b7\\u53d6\\u7528\\u6237\\u63a8\\u8350\\u4fe1\\u606f\\n     */\\n    function getUserReferralInfo(address user) external view returns (\\n        address referrer,\\n        uint256 commissionEarned,\\n        uint256 totalReferredUsers\\n    ) {\\n        return (\\n            userReferrers[user],\\n            referralCommissions[user],\\n            totalReferrals[user]\\n        );\\n    }\\n\\n    /**\\n     * @dev \\u83b7\\u53d6\\u671f\\u95f4\\u5956\\u52b1\\u4fe1\\u606f\\n     */\\n    function getPeriodRewardInfo(uint256 period) external view returns (\\n        uint256 totalReward,\\n        bool claimed\\n    ) {\\n        return (\\n            periodRewards[period],\\n            userRewardsClaimed[msg.sender][period]\\n        );\\n    }\\n\\n    /**\\n     * @dev \\u83b7\\u53d6\\u5f53\\u524dETH\\u4ef7\\u683c\\u4fe1\\u606f\\n     */\\n    function getCurrentPriceInfo() external view returns (\\n        uint256 rate,\\n        uint256 lastUpdate,\\n        bool isValid\\n    ) {\\n        bool valid = block.timestamp - lastPriceUpdate <= priceValidityPeriod;\\n        return (ethToUsdtRate, lastPriceUpdate, valid);\\n    }\\n\\n    /**\\n     * @dev \\u521d\\u59cb\\u5316\\u4ea7\\u54c1\\u914d\\u7f6e\\n     */\\n    function _initializeProducts() internal {\\n        // \\u767d\\u94f6\\u5361 - 12% APR, 30\\u5929 (\\u5339\\u914d\\u6d4b\\u8bd5\\u671f\\u671b)\\n        products[ProductType.SILVER] = ProductInfo({\\n            name: \\\"QA Silver Card\\\",\\n            minInvestment: 100 * 10**6,   // 100 USDT (\\u5339\\u914d\\u6d4b\\u8bd5\\u671f\\u671b)\\n            maxInvestment: 10000 * 10**6, // 10,000 USDT (\\u5339\\u914d\\u6d4b\\u8bd5\\u671f\\u671b)\\n            apr: 1200,                     // 12% APR (\\u57fa\\u70b9)\\n            duration: 30,                  // 30\\u5929 (\\u5339\\u914d\\u6d4b\\u8bd5\\u671f\\u671b)\\n            isActive: true\\n        });\\n\\n        // \\u9ec4\\u91d1\\u5361 - 15% APR, 60\\u5929 (\\u5339\\u914d\\u6d4b\\u8bd5\\u671f\\u671b)\\n        products[ProductType.GOLD] = ProductInfo({\\n            name: \\\"QA Gold Card\\\",\\n            minInvestment: 1000 * 10**6,  // 1,000 USDT\\n            maxInvestment: 50000 * 10**6, // 50,000 USDT\\n            apr: 1500,                     // 15% APR (\\u57fa\\u70b9)\\n            duration: 60,                  // 60\\u5929 (\\u5339\\u914d\\u6d4b\\u8bd5\\u671f\\u671b)\\n            isActive: true\\n        });\\n\\n        // \\u94bb\\u77f3\\u5361 - 18% APR, 90\\u5929 (\\u5339\\u914d\\u6d4b\\u8bd5\\u671f\\u671b)\\n        products[ProductType.DIAMOND] = ProductInfo({\\n            name: \\\"QA Diamond Card\\\",\\n            minInvestment: 5000 * 10**6,   // 5,000 USDT\\n            maxInvestment: 200000 * 10**6, // 200,000 USDT\\n            apr: 1800,                      // 18% APR (\\u57fa\\u70b9)\\n            duration: 90,                   // 90\\u5929 (\\u5339\\u914d\\u6d4b\\u8bd5\\u671f\\u671b)\\n            isActive: true\\n        });\\n\\n        // \\u767d\\u91d1\\u5361 - 20% APR, 365\\u5929\\n        products[ProductType.PLATINUM] = ProductInfo({\\n            name: \\\"QA Platinum Card\\\",\\n            minInvestment: 10000 * 10**6,  // 10,000 USDT\\n            maxInvestment: 500000 * 10**6, // 500,000 USDT\\n            apr: 2000,                      // 20% APR (\\u57fa\\u70b9)\\n            duration: 365,                  // 365\\u5929\\n            isActive: true\\n        });\\n    }\\n}\",\"keccak256\":\"0x71107121590d8439e2701993c28e42c031483c64b9746a16b37e6e8baaa99b9f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60808060405234610016576139f2908161001c8239f35b600080fdfe608080604052600436101561001d575b50361561001b57600080fd5b005b60003560e01c90816301ffc9a714612deb5750806307bc3a30146106fb57806309c85e2414612dcd5780630ac44e0214612d185780630ba36dcd14612cde5780630c37e6bb14612b7d578063106e629014612a7b57806312065fe0146129f257806312d0b2391461282557806317673257146127d85780631e095c6a1461279d578063248a9ca3146127615780632a5bf6d214610c7d5780632b060a68146127075780632e1a7d4d146125f35780632f2ff15d146125a7578063355ca9a414612589578063355d27971461250357806336568abe146124bc5780633f4ba83a146124455780634782f7791461234e578063592cce561461228c5780635c975abb1461225c578063604646271461223e57806361bc8f9114611f7157806366bf4dcf14611f455780636949faeb14611f275780636cdd20e214611efe5780636e94729814611ee25780636f584da014611ec457806377a24f36146114685780637d8820971461144a57806383ceb2631461142c5780638456cb59146113c557806385f438c11461138a5780638f63489d1461134f578063903bbf4e1461130057806391d14854146112a65780639231cf7414611288578063924bb1d01461121957806395ccea67146110f85780639e35ae9714611072578063a18a7bfc1461102d578063a1fa026814610d1f578063a217fddf14610d03578063a98ad46c14610cda578063ace687eb14610cbc578063c08d52af14610c82578063c52c5c8814610c7d578063c9630cb014610bc4578063ce553dbb14610ac3578063d30ef61b14610ba6578063d355271214610b49578063d547741f14610afd578063d5b1951314610ac3578063d74d3d7814610a64578063db2e21bc1461096d578063dbeb888814610941578063e1159cd714610923578063e1179640146107c8578063e4c2b763146107aa578063e63ab1e91461076f578063e992c3dd14610719578063f1e6d761146106fb578063f2e0fe35146106cc578063f5b541a614610691578063f6ae9ce314610657578063fa79f85d1461041a5763fce1e2b014610321573861000f565b34610415576020366003190112610415576004356004811015610415576103786103f091600060a060405161035581612f03565b606081528260208201528260408201528260608201528260808201520152612e9a565b6040519061038582612f03565b61038e81612f5a565b8252600181015490602083019182526002810154906040840191825260038101546060850190815260ff6005600484015493608088019485520154169260a086019315158452604051968796602088525160c0602089015260e0880190612fff565b945160408701525160608601525160808501525160a084015251151560c08301520390f35b600080fd5b6020806003193601126104155760043560048110156104155761043b613139565b6104436130ba565b61044c81612e9a565b9160405161045981612f03565b61046284612f5a565b81526001840154938282019485526002810154604083019081526003820154926060810193845260ff600560048501549460808401958652015416159060a08215910152610645576104b660165442613072565b6017541061063357670de0b6b3a76400006104d3601554346130a7565b049551908187108015610629575b610602576001548451845160405163ace8eb8760e01b815233600482015260ff8a166024820152604481018b905260648101929092526084820152879187908190839060a49082906000906001600160a01b03165af19182156105f6576000926105c7575b503360005260038152604060002061055f348254613065565b905561056d34600654613065565b60065561057d604051809461309a565b349083015260408201524260608201527fb129936007b650e1c05e0829cd20f8b7f1b8f6710255bb621c45094c6a5adbc560803392a2600160008051602061397d83398151915255005b9080925081813d83116105ef575b6105df8183612f39565b8101031261041557519083610546565b503d6105d5565b6040513d6000823e3d90fd5b5160405163eafc9d5560e01b81526004810188905260248101929092526044820152606490fd5b50805187116104e1565b604051632d07c67360e01b8152600490fd5b604051632cdd618760e01b8152600490fd5b34610415576020366003190112610415576001600160a01b03610678612e3e565b16600052600c6020526020604060002054604051908152f35b346104155760003660031901126104155760206040517f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9298152f35b3461041557600036600319011261041557620151804204600052600a6020526020604060002054604051908152f35b34610415576000366003190112610415576020600654604051908152f35b34610415576020366003190112610415576004356107356131de565b8060085560095460405191825260208201527f86ca55648bc4e3974630a90eca019d2bfc64c8eaa84e093d677caffa363f9cdf60403392a2005b346104155760003660031901126104155760206040517f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a8152f35b34610415576000366003190112610415576020601254604051908152f35b346104155760208060031936011261041557600435906107e66130ba565b3360005260118152604060002082600052815260ff60406000205416610911576012548210156108ff57336000526002815260406000205460055490801580156108f7575b6108cf576108469084600052601084526040600020546130a7565b81156108e157049081156108cf5733600081815260118352604080822086835284528120805460ff191660011790555461088a9184916001600160a01b03166130ea565b60405191825242908201527f812be816db82c66cd18ca8457005cd84689642d8ac4d38599cc6af444a2dc72a60403392a3600160008051602061397d83398151915255005b60405163162908e360e11b8152600490fd5b634e487b7160e01b600052601260045260246000fd5b50811561082b565b604051631747cc3d60e21b8152600490fd5b604051632cfe303760e21b8152600490fd5b34610415576000366003190112610415576020601354604051908152f35b346104155760203660031901126104155760043560005260106020526020604060002054604051908152f35b3461041557600036600319011261041557610986613296565b61098e6130ba565b6000546040516370a0823160e01b8152306004820152906001600160a01b0316602082602481845afa9182156105f657600092610a30575b5081156108cf57816109d99133906130ea565b6109e581600754613065565b60075560405190815242602082015233907fbbae553982d541d38dacb1ea468ac757f324d0e279b6e4a2958f9e894da575ff60403392a3600160008051602061397d83398151915255005b9091506020813d602011610a5c575b81610a4c60209383612f39565b81010312610415575190826109c6565b3d9150610a3f565b3461041557602036600319011261041557600435610a806131de565b6103e88111610a8e57600e55005b60405162461bcd60e51b815260206004820152600d60248201526c0a4c2e8ca40e8dede40d0d2ced609b1b6044820152606490fd5b34610415576020366003190112610415576001600160a01b03610ae4612e3e565b1660005260036020526020604060002054604051908152f35b346104155760403660031901126104155761001b600435610b1c612e54565b908060005260008051602061393d833981519152602052610b446001604060002001546132d0565b613786565b346104155760203660031901126104155760606001600160a01b0380610b6d612e3e565b16600052600b60205260406000205416600c602052604060002054600d6020526040600020549060405192835260208301526040820152f35b34610415576000366003190112610415576020600e54604051908152f35b3461041557604036600319011261041557600435610be0613139565b610be86130ba565b80156108cf57600054610c09908290309033906001600160a01b0316613427565b3360005260026020526040600020610c22828254613065565b9055610c3081600554613065565b600555604051908152426020820152602435907f4eef3d1efb11f00508d9b7bb632ddcfa6da9d7105bd39f404bdd7362e6c59dbc60403392a3600160008051602061397d83398151915255005b612cde565b34610415576020366003190112610415576001600160a01b03610ca3612e3e565b16600052600d6020526020604060002054604051908152f35b34610415576000366003190112610415576020600854604051908152f35b34610415576000366003190112610415576000546040516001600160a01b039091168152602090f35b3461041557600036600319011261041557602060405160008152f35b34610415576060366003190112610415576004356004811015610415576001600160a01b036024356044358281169081810361041557610d5d613139565b610d656130ba565b81159182159081611022575b50611013575b610d8085612e9a565b9360405191610d8e83612f03565b610d9786612f5a565b8352600186015493602094858501908152600288015490604086019182526003890154956060810196875260ff600560048c01549b608084019c8d52015416159060a082159101526106455751908188108015611009575b610fe2575050908291610e0a87846000541630903390613427565b610fca575b1680151580610fc0575b610f1f575b506001549151945160405163ace8eb8760e01b815233600482015260ff88166024820152604481018690526064810196909652608486015282918591168160008160a481015b03925af19283156105f657600093610ef0575b5033600052600281526040600020610e90838254613065565b9055610e9e82600554613065565b600555610eae604051809561309a565b83015260408201527f2185d7f2f2c5c679b71bf6e81f3eded9354d5c5a0cb15e714ad41ebb2d37d3eb60603392a2600160008051602061397d83398151915255005b9080935081813d8311610f18575b610f088183612f39565b8101031261041557519184610e77565b503d610efe565b949091612710610f31600e54876130a7565b049286600052600c85526040600020610f4b858254613065565b905586600052600d855260406000209384549760018901809911610faa57610e649887965560405191825242868301527f8eadd36a0aee67beaef95bd7b130cb68a3b1a16ac68f0b395333c0db184428a260403393a391955091610e1e565b634e487b7160e01b600052601160045260246000fd5b5033811415610e19565b505033600052600b8352808060406000205416610e0f565b5160405163eafc9d5560e01b81526004810189905260248101929092526044820152606490fd5b5080518811610def565b61101d8133613809565b610d77565b905033141586610d71565b3461041557602036600319011261041557611046612e3e565b6001600160a01b03811633146110605761001b9033613809565b604051630c22084560e31b8152600490fd5b346104155760203660031901126104155761108b612e3e565b611093613296565b6001600160a01b031680156110ba576001600160601b0360a01b6001541617600155600080f35b60405162461bcd60e51b8152602060048201526016602482015275496e76616c696420514143617264206164647265737360501b6044820152606490fd5b3461041557604036600319011261041557611111612e3e565b60243561111c613296565b6111246130ba565b6000546040516370a0823160e01b81523060048201526001600160a01b0391821690602081602481855afa9081156105f6576000916111e7575b508084116111c957507fbbae553982d541d38dacb1ea468ac757f324d0e279b6e4a2958f9e894da575ff9161119684866040946130ea565b6111a284600754613065565b600755815193845242602085015233941692a3600160008051602061397d83398151915255005b836044916040519163cf47918160e01b835260048301526024820152fd5b90506020813d602011611211575b8161120260209383612f39565b8101031261041557518561115e565b3d91506111f5565b34610415576020366003190112610415576004356112356131de565b80156112775780601555426016556040519081524260208201527f378b09391f49d01e482ba75312341912ad0652cb8aa8799b6b33b624bd65d9f260403392a2005b60405162bfc92160e01b8152600490fd5b34610415576000366003190112610415576020601454604051908152f35b34610415576040366003190112610415576112bf612e54565b60043560005260008051602061393d83398151915260205260406000209060018060a01b0316600052602052602060ff604060002054166040519015158152f35b34610415576020366003190112610415576040600435806000526010602052816000205490336000526011602052826000209060005260205260ff826000205416825191825215156020820152f35b346104155760203660031901126104155760206001600160a01b0380611373612e3e565b16600052600b825260406000205416604051908152f35b346104155760003660031901126104155760206040517f10dac8c06a04bec0b551627dad28bc00d6516b0caacd1c7b345fcdb5211334e48152f35b34610415576000366003190112610415576113de61323a565b6113e6613139565b60008051602061395d833981519152600160ff198254161790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a1005b34610415576000366003190112610415576020600954604051908152f35b34610415576000366003190112610415576020600554604051908152f35b3461041557606036600319011261041557611481612e3e565b611489612e54565b90604435916001600160401b0383116104155736602384011215610415578260040135926001600160401b038411611bb8578360051b90604051946114d16020840187612f39565b8552602460208601928201019036821161041557602401915b818310611ea45750505060008051602061399d83398151915254916001600160401b03831680159081611e94575b6001149081611e8a575b159081611e81575b50611e6f5760016001600160401b031984161760008051602061399d8339815191525560ff8360401c1615611e42575b6001600160a01b03168015611e06576001600160a01b03821615611dc9576115806138ed565b6115886138ed565b6115906138ed565b6115986138ed565b600160008051602061397d833981519152556001600160601b0360a01b60005416176000556402540be40060085564174876e8006009556101f4600e5562093a8060135562093a7f194201428111610faa576014556000601255637735940060155542601655610e1060175560405161161081612f03565b60405161161c81612f1e565b600e81526d14504814da5b1d995c8810d85c9960921b602082015281526305f5e10060208201526402540be40060408201526104b06060820152601e6080820152600160a082015260008052600460205260406000209080518051906001600160401b038211611bb8576116908454612ec9565b601f8111611d85575b50602090601f8311600114611d2c57928260059360a0936117119796600092611bce575b50508160011b916000199060031b1c19161784555b602081015160018501556040810151600285015560608101516003850155608081015160048501550151151591019060ff801983541691151516179055565b60405161171d81612f03565b60405161172981612f1e565b600c81526b14504811dbdb190810d85c9960a21b60208201528152633b9aca006020820152640ba43b740060408201526105dc6060820152603c6080820152600160a08201526001600052600460205260406000209080518051906001600160401b038211611bb85761179c8454612ec9565b601f8111611ce8575b50602090601f8311600114611c8f57928260059360a09361181b9796600092611bce5750508160011b916000199060031b1c1916178455602081015160018501556040810151600285015560608101516003850155608081015160048501550151151591019060ff801983541691151516179055565b60405161182781612f03565b60405161183381612f1e565b600f81526e145048111a585b5bdb990810d85c99608a1b6020820152815264012a05f2006020820152642e90edd00060408201526107086060820152605a6080820152600160a08201526002600052600460205260406000209080518051906001600160401b038211611bb8576118aa8454612ec9565b601f8111611c4b575b50602090601f8311600114611bd957928260059360a0936119299796600092611bce5750508160011b916000199060031b1c1916178455602081015160018501556040810151600285015560608101516003850155608081015160048501550151151591019060ff801983541691151516179055565b60405161193581612f03565b60405161194181612f1e565b601081526f145048141b185d1a5b9d5b4810d85c9960821b602082015281526402540be400602082015264746a52880060408201526107d0606082015261016d6080820152600160a08201526003600052600460205260406000209080518051906001600160401b038211611bb8576119ba8454612ec9565b601f8111611b74575b50602090601f8311600114611afd57611a3d9383611a5697969460059460a094600092611af25750508160011b916000199060031b1c1916178455602081015160018501556040810151600285015560608101516003850155608081015160048501550151151591019060ff801983541691151516179055565b611a468161347f565b50611a508161350d565b506135bd565b5060005b8251811015611a8b57600581901b83016020015160019190611a84906001600160a01b0316613667565b5001611a5a565b60ff8260401c1615611a9957005b68ff00000000000000001960008051602061399d833981519152541660008051602061399d833981519152557fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2602060405160018152a1005b015190508b806116bd565b908460005260206000209160005b601f1985168110611b5c57509360018460059460a094611a3d98611a569b9a98601f19811610611b43575b505050811b0184556116d2565b015160001960f88460031b161c191690558b8080611b36565b91926020600181928685015181550194019201611b0b565b846000526020600020601f840160051c810160208510611bb1575b601f830160051c82018110611ba55750506119c3565b60008155600101611b8f565b5080611b8f565b634e487b7160e01b600052604160045260246000fd5b015190508a806116bd565b908460005260206000209160005b601f1985168110611c3357508360a093611929979693600193600597601f19811610611c1a57505050811b0184556116d2565b015160001960f88460031b161c191690558a8080611b36565b91926020600181928685015181550194019201611be7565b846000526020600020601f840160051c810160208510611c88575b601f830160051c82018110611c7c5750506118b3565b60008155600101611c66565b5080611c66565b908460005260206000209160005b601f1985168110611cd057508360a09361181b979693600193600597601f19811610611c1a57505050811b0184556116d2565b91926020600181928685015181550194019201611c9d565b846000526020600020601f840160051c810160208510611d25575b601f830160051c82018110611d195750506117a5565b60008155600101611d03565b5080611d03565b908460005260206000209160005b601f1985168110611d6d57508360a093611711979693600193600597601f19811610611c1a57505050811b0184556116d2565b91926020600181928685015181550194019201611d3a565b846000526020600020601f840160051c810160208510611dc2575b601f830160051c82018110611db6575050611699565b60008155600101611da0565b5080611da0565b60405162461bcd60e51b8152602060048201526015602482015274496e76616c69642061646d696e206164647265737360581b6044820152606490fd5b60405162461bcd60e51b8152602060048201526014602482015273496e76616c69642055534454206164647265737360601b6044820152606490fd5b68ffffffffffffffffff198316680100000000000000011760008051602061399d8339815191525561155a565b60405163f92ee8a960e01b8152600490fd5b9050158561152a565b303b159150611522565b604085901c60ff16159150611518565b82356001600160a01b0381168103610415578152602092830192016114ea565b34610415576000366003190112610415576020601554604051908152f35b3461041557600036600319011261041557602047604051908152f35b34610415576000366003190112610415576001546040516001600160a01b039091168152602090f35b34610415576000366003190112610415576020601654604051908152f35b3461041557602036600319011261041557600435600052600a6020526020604060002054604051908152f35b346104155760e036600319011261041557600480351015610415576001600160401b0360243581811161041557366023820112156104155781816004013511610415573660248260040135830101116104155760c435801515810361041557611fd86131de565b604051611fe481612f03565b611ff1836004013561307f565b611ffe6040519182612f39565b600484013580825260248501602083013760006020856004013583010152815260443560208201526064356040820152608435606082015260a435608082015281151560a0820152612051600435612e9a565b9381518051918211611bb8576120678654612ec9565b601f81116121fa575b50602090601f83116001146121805761210793837fea088b2acd48cf08e6469ba8d937cb867a6f70de9862b7e373fda32c4d7b8fd0989460059460a094600092611bce5750508160011b916000199060031b1c1916178455602081015160018501556040810151600285015560608101516003850155608081015160048501550151151591019060ff801983541691151516179055565b60405180926121188260043561309a565b60e06020830152806004013560e0830152610100928160040135602483018585013760008483600401358501015260443560408401526064356060840152608435608084015260a43560a0840152151560c0830152601f8019916004013501168101030190a1005b908660005260206000209160005b601f19851681106121e257509360018460059460a094612107987fea088b2acd48cf08e6469ba8d937cb867a6f70de9862b7e373fda32c4d7b8fd09c98601f19811610611c1a57505050811b0184556116d2565b9192602060018192868501518155019401920161218e565b866000526020600020601f840160051c810160208510612237575b601f830160051c8201811061222b575050612070565b60008155600101612215565b5080612215565b34610415576000366003190112610415576020600754604051908152f35b3461041557600036600319011261041557602060ff60008051602061395d83398151915254166040519015158152f35b34610415576020366003190112610415576004356122a86131de565b6122b760145460135490613065565b42106108ff578060409161232e575b60125460005260106020528082600020556122e381600f54613065565b600f557f4d1225938325dca72e314a20911c9ebde0d6b3f08fb075aba351e8796f8680656012549283928151908152426020820152a26000198114610faa5760010160125542601455005b600054612349908290309033906001600160a01b0316613427565b6122c6565b34610415576040366003190112610415576004356001600160a01b0381169081900361041557602435906123806131de565b81471061240057600080809381935af13d156123fb573d6123a08161307f565b906123ae6040519283612f39565b8152600060203d92013e5b156123c057005b60405162461bcd60e51b8152602060048201526013602482015272115512081d1c985b9cd9995c8819985a5b1959606a1b6044820152606490fd5b6123b9565b60405162461bcd60e51b815260206004820152601860248201527f496e73756666696369656e74204554482062616c616e636500000000000000006044820152606490fd5b346104155760003660031901126104155761245e61323a565b60008051602061395d833981519152805460ff8116156124aa5760ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a1005b604051638dfc202b60e01b8152600490fd5b34610415576040366003190112610415576124d5612e54565b336001600160a01b038216036124f15761001b90600435613786565b60405163334bd91960e11b8152600490fd5b346104155760203660031901126104155760043560048110156104155761252c61256991612e9a565b61253581612f5a565b90600181015490600281015490600381015460ff60056004840154930154169260405196879660c0885260c0880190612fff565b946020870152604086015260608501526080840152151560a08301520390f35b34610415576000366003190112610415576020601754604051908152f35b346104155760403660031901126104155761001b6004356125c6612e54565b908060005260008051602061393d8339815191526020526125ee6001604060002001546132d0565b613711565b346104155760203660031901126104155760043561260f613164565b612617613139565b61261f6130ba565b61262881613303565b60005461264190829033906001600160a01b03166130ea565b61264d81600754613065565b600755620151804204600052600a602052604060002061266e828254613065565b905560405190808252426020830152736f7065726174696f6e616c5f776974686472617760601b809233907fd5fb189e61d5d29d4c1ae35dddf9a74b32b17616667eb42f9a36105c73bee4d360403392a460405190815242602082015233907fb3e34ddca7bfc93b361617ff32f2023b3650ce958bf594a4e5fa84f7c1a34d1460403392a4600160008051602061397d83398151915255005b34610415576040366003190112610415576004356024356127266131de565b816008558060095560405191825260208201527f86ca55648bc4e3974630a90eca019d2bfc64c8eaa84e093d677caffa363f9cdf60403392a2005b346104155760203660031901126104155760043560005260008051602061393d8339815191526020526020600160406000200154604051908152f35b346104155760003660031901126104155760606016546127bd8142613072565b60175410156015549160405192835260208301526040820152f35b34610415576040366003190112610415576001600160a01b036127f9612e3e565b1660005260116020526040600020602435600052602052602060ff604060002054166040519015158152f35b34610415576040366003190112610415576001600160401b0360043581811161041557612856903690600401612e6a565b909160243590811161041557612870903690600401612e6a565b61287b939193613139565b6128836130ba565b8083036129b55760009360005b84811061298457506000546128b3908690309033906001600160a01b0316613427565b33600052602091600260205260406000206128cf878254613065565b90556128dd86600554613065565b60055560005b85811061293157868660405191825260208201527f36ba660c6b65ee17a225b58a6a8b4835a77c2bf10fc733783ef47039e222b24560403392a2600160008051602061397d83398151915255005b8061293f600192888861303f565b3561294b82858761303f565b359060405190815242878201527f4eef3d1efb11f00508d9b7bb632ddcfa6da9d7105bd39f404bdd7362e6c59dbc60403392a3016128e3565b9461299086868661303f565b35156108cf576129ae6001916129a788888861303f565b3590613065565b9501612890565b60405162461bcd60e51b8152602060048201526015602482015274082e4e4c2f240d8cadccee8d040dad2e6dac2e8c6d605b1b6044820152606490fd5b34610415576000366003190112610415576000546040516370a0823160e01b815230600482015290602090829060249082906001600160a01b03165afa80156105f657600090612a48575b602090604051908152f35b506020813d602011612a73575b81612a6260209383612f39565b810103126104155760209051612a3d565b3d9150612a55565b3461041557606036600319011261041557612a94612e3e565b60243560443591612aa3613164565b612aab613139565b612ab36130ba565b612abc82613303565b60018060a01b0390612ad3838284600054166130ea565b612adf83600754613065565b600755620151804204600052600a6020526040600020612b00848254613065565b90551682604051838152426020820152827fd5fb189e61d5d29d4c1ae35dddf9a74b32b17616667eb42f9a36105c73bee4d360403393a46040519182524260208301527fb3e34ddca7bfc93b361617ff32f2023b3650ce958bf594a4e5fa84f7c1a34d1460403393a4600160008051602061397d83398151915255005b3461041557604036600319011261041557600435600481101561041557602435612ba5613139565b612bad6130ba565b612bb682612e9a565b90604051612bc381612f03565b612bcc83612f5a565b8152600183015490602091828201908152600285015490604083019182526003860154926060810193845260ff600560048901549860808401998a52015416159060a082159101526106455751908185108015612cd4575b612cad5750506000546001600160a01b0390612c47908590309033908516613427565b33600052600b8352806040600020541680151580610fc057610f1f57506001549151945160405163ace8eb8760e01b815233600482015260ff88166024820152604481018690526064810196909652608486015282918591168160008160a48101610e64565b5160405163eafc9d5560e01b81526004810186905260248101929092526044820152606490fd5b5080518511612c24565b34610415576020366003190112610415576001600160a01b03612cff612e3e565b1660005260026020526020604060002054604051908152f35b3461041557600036600319011261041557612d316130ba565b33600052600c60205260406000205480156108cf57336000818152600c6020526040812081905554612d6d9183916001600160a01b03166130ea565b604051908152426020820152723932b332b93930b62fb1b7b6b6b4b9b9b4b7b760691b9033907fd5fb189e61d5d29d4c1ae35dddf9a74b32b17616667eb42f9a36105c73bee4d360403392a4600160008051602061397d83398151915255005b34610415576000366003190112610415576020600f54604051908152f35b34610415576020366003190112610415576004359063ffffffff60e01b821680920361041557602091637965db0b60e01b8114908115612e2d575b5015158152f35b6301ffc9a760e01b14905083612e26565b600435906001600160a01b038216820361041557565b602435906001600160a01b038216820361041557565b9181601f84011215610415578235916001600160401b038311610415576020808501948460051b01011161041557565b6004811015612eb3576000526004602052604060002090565b634e487b7160e01b600052602160045260246000fd5b90600182811c92168015612ef9575b6020831014612ee357565b634e487b7160e01b600052602260045260246000fd5b91607f1691612ed8565b60c081019081106001600160401b03821117611bb857604052565b604081019081106001600160401b03821117611bb857604052565b90601f801991011681019081106001600160401b03821117611bb857604052565b90604051918260008254612f6d81612ec9565b90818452602094600191600181169081600014612fdd5750600114612f9e575b505050612f9c92500383612f39565b565b600090815285812095935091905b818310612fc5575050612f9c9350820101388080612f8d565b85548884018501529485019487945091830191612fac565b92505050612f9c94925060ff191682840152151560051b820101388080612f8d565b919082519283825260005b84811061302b575050826000602080949584010152601f8019910116010190565b60208183018101518483018201520161300a565b919081101561304f5760051b0190565b634e487b7160e01b600052603260045260246000fd5b91908201809211610faa57565b91908203918211610faa57565b6001600160401b038111611bb857601f01601f191660200190565b906004821015612eb35752565b81810292918115918404141715610faa57565b60008051602061397d83398151915260028154146130d85760029055565b604051633ee5aeb560e01b8152600490fd5b60405163a9059cbb60e01b60208201526001600160a01b03909216602483015260448083019390935291815260808101916001600160401b03831182841017611bb857612f9c92604052613891565b60ff60008051602061395d833981519152541661315257565b60405163d93c066560e01b8152600490fd5b3360009081527f395f4e35a18c2b5e556b3b2ff855307e76c0b3cc1ca71e19a70e83037e08e7b360205260409020547f10dac8c06a04bec0b551627dad28bc00d6516b0caacd1c7b345fcdb5211334e49060ff16156131c05750565b6044906040519063e2517d3f60e01b82523360048301526024820152fd5b3360009081527f448256db8f8fb95ee3eaaf89c1051414494e85cebb6057fcf996cc3d0ccfb45660205260409020547f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9299060ff16156131c05750565b3360009081527f75442b0a96088b5456bc4ed01394c96a4feec0f883c9494257d76b96ab1c9b6b60205260409020547f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a9060ff16156131c05750565b3360009081527fb7db2dd08fcb62d0c9e08c51941cae53c267786a0b75803fb7960902fc8ef97d602052604081205460ff16156131c05750565b8060005260008051602061393d83398151915260205260406000203360005260205260ff60406000205416156131c05750565b600954808211613409575060006201518042048152600a602052604081205461332c8382613065565b906008548092116133e157505080546040516370a0823160e01b815230600482015290602090829060249082906001600160a01b03165afa9182156133d557809261339d575b505080821161337f575050565b604492506040519163cf47918160e01b835260048301526024820152fd5b9091506020823d6020116133cd575b816133b960209383612f39565b810103126133ca5750513880613372565b80fd5b3d91506133ac565b604051903d90823e3d90fd5b906133ee84604493613065565b9060405191639c8983d960e01b835260048301526024820152fd5b6044925060405191639c8983d960e01b835260048301526024820152fd5b6040516323b872dd60e01b60208201526001600160a01b03928316602482015292909116604483015260648083019390935291815260a08101918183106001600160401b03841117611bb857612f9c92604052613891565b6001600160a01b031660008181527fb7db2dd08fcb62d0c9e08c51941cae53c267786a0b75803fb7960902fc8ef97d602052604081205490919060008051602061393d8339815191529060ff16613508578280526020526040822081835260205260408220600160ff19825416179055339160008051602061391d8339815191528180a4600190565b505090565b6001600160a01b031660008181527f75442b0a96088b5456bc4ed01394c96a4feec0f883c9494257d76b96ab1c9b6b60205260408120549091907f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a9060008051602061393d8339815191529060ff166135b7578184526020526040832082845260205260408320600160ff1982541617905560008051602061391d833981519152339380a4600190565b50505090565b6001600160a01b031660008181527f395f4e35a18c2b5e556b3b2ff855307e76c0b3cc1ca71e19a70e83037e08e7b360205260408120549091907f10dac8c06a04bec0b551627dad28bc00d6516b0caacd1c7b345fcdb5211334e49060008051602061393d8339815191529060ff166135b7578184526020526040832082845260205260408320600160ff1982541617905560008051602061391d833981519152339380a4600190565b6001600160a01b031660008181527f448256db8f8fb95ee3eaaf89c1051414494e85cebb6057fcf996cc3d0ccfb45660205260408120549091907f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9299060008051602061393d8339815191529060ff166135b7578184526020526040832082845260205260408320600160ff1982541617905560008051602061391d833981519152339380a4600190565b9060009180835260008051602061393d83398151915280602052604084209260018060a01b03169283855260205260ff604085205416156000146135b7578184526020526040832082845260205260408320600160ff1982541617905560008051602061391d833981519152339380a4600190565b9060009180835260008051602061393d83398151915280602052604084209260018060a01b03169283855260205260ff6040852054166000146135b757818452602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4600190565b6001600160a01b039081166000818152600b60205260409020805493919290918482161580613885575b61383f575b5050505050565b1680936001600160601b0360a01b161790557fd777a1c61bd7162692fd6e6733af90c5c8828bf2e57caaba876193c1f65f125c6020604051428152a33880808080613838565b50838282161415613833565b906000602091828151910182855af1156105f6576000513d6138e457506001600160a01b0381163b155b6138c25750565b604051635274afe760e01b81526001600160a01b039091166004820152602490fd5b600114156138bb565b60ff60008051602061399d8339815191525460401c161561390a57565b604051631afcd79f60e31b8152600490fdfe2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800cd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f033009b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00f0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00a264697066735822122011e946a6e86208834bbfe8737d5fe49eaadeb5f277d48e84a958ebc1b49daa7264736f6c63430008180033",
  "deployedBytecode": "0x608080604052600436101561001d575b50361561001b57600080fd5b005b60003560e01c90816301ffc9a714612deb5750806307bc3a30146106fb57806309c85e2414612dcd5780630ac44e0214612d185780630ba36dcd14612cde5780630c37e6bb14612b7d578063106e629014612a7b57806312065fe0146129f257806312d0b2391461282557806317673257146127d85780631e095c6a1461279d578063248a9ca3146127615780632a5bf6d214610c7d5780632b060a68146127075780632e1a7d4d146125f35780632f2ff15d146125a7578063355ca9a414612589578063355d27971461250357806336568abe146124bc5780633f4ba83a146124455780634782f7791461234e578063592cce561461228c5780635c975abb1461225c578063604646271461223e57806361bc8f9114611f7157806366bf4dcf14611f455780636949faeb14611f275780636cdd20e214611efe5780636e94729814611ee25780636f584da014611ec457806377a24f36146114685780637d8820971461144a57806383ceb2631461142c5780638456cb59146113c557806385f438c11461138a5780638f63489d1461134f578063903bbf4e1461130057806391d14854146112a65780639231cf7414611288578063924bb1d01461121957806395ccea67146110f85780639e35ae9714611072578063a18a7bfc1461102d578063a1fa026814610d1f578063a217fddf14610d03578063a98ad46c14610cda578063ace687eb14610cbc578063c08d52af14610c82578063c52c5c8814610c7d578063c9630cb014610bc4578063ce553dbb14610ac3578063d30ef61b14610ba6578063d355271214610b49578063d547741f14610afd578063d5b1951314610ac3578063d74d3d7814610a64578063db2e21bc1461096d578063dbeb888814610941578063e1159cd714610923578063e1179640146107c8578063e4c2b763146107aa578063e63ab1e91461076f578063e992c3dd14610719578063f1e6d761146106fb578063f2e0fe35146106cc578063f5b541a614610691578063f6ae9ce314610657578063fa79f85d1461041a5763fce1e2b014610321573861000f565b34610415576020366003190112610415576004356004811015610415576103786103f091600060a060405161035581612f03565b606081528260208201528260408201528260608201528260808201520152612e9a565b6040519061038582612f03565b61038e81612f5a565b8252600181015490602083019182526002810154906040840191825260038101546060850190815260ff6005600484015493608088019485520154169260a086019315158452604051968796602088525160c0602089015260e0880190612fff565b945160408701525160608601525160808501525160a084015251151560c08301520390f35b600080fd5b6020806003193601126104155760043560048110156104155761043b613139565b6104436130ba565b61044c81612e9a565b9160405161045981612f03565b61046284612f5a565b81526001840154938282019485526002810154604083019081526003820154926060810193845260ff600560048501549460808401958652015416159060a08215910152610645576104b660165442613072565b6017541061063357670de0b6b3a76400006104d3601554346130a7565b049551908187108015610629575b610602576001548451845160405163ace8eb8760e01b815233600482015260ff8a166024820152604481018b905260648101929092526084820152879187908190839060a49082906000906001600160a01b03165af19182156105f6576000926105c7575b503360005260038152604060002061055f348254613065565b905561056d34600654613065565b60065561057d604051809461309a565b349083015260408201524260608201527fb129936007b650e1c05e0829cd20f8b7f1b8f6710255bb621c45094c6a5adbc560803392a2600160008051602061397d83398151915255005b9080925081813d83116105ef575b6105df8183612f39565b8101031261041557519083610546565b503d6105d5565b6040513d6000823e3d90fd5b5160405163eafc9d5560e01b81526004810188905260248101929092526044820152606490fd5b50805187116104e1565b604051632d07c67360e01b8152600490fd5b604051632cdd618760e01b8152600490fd5b34610415576020366003190112610415576001600160a01b03610678612e3e565b16600052600c6020526020604060002054604051908152f35b346104155760003660031901126104155760206040517f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9298152f35b3461041557600036600319011261041557620151804204600052600a6020526020604060002054604051908152f35b34610415576000366003190112610415576020600654604051908152f35b34610415576020366003190112610415576004356107356131de565b8060085560095460405191825260208201527f86ca55648bc4e3974630a90eca019d2bfc64c8eaa84e093d677caffa363f9cdf60403392a2005b346104155760003660031901126104155760206040517f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a8152f35b34610415576000366003190112610415576020601254604051908152f35b346104155760208060031936011261041557600435906107e66130ba565b3360005260118152604060002082600052815260ff60406000205416610911576012548210156108ff57336000526002815260406000205460055490801580156108f7575b6108cf576108469084600052601084526040600020546130a7565b81156108e157049081156108cf5733600081815260118352604080822086835284528120805460ff191660011790555461088a9184916001600160a01b03166130ea565b60405191825242908201527f812be816db82c66cd18ca8457005cd84689642d8ac4d38599cc6af444a2dc72a60403392a3600160008051602061397d83398151915255005b60405163162908e360e11b8152600490fd5b634e487b7160e01b600052601260045260246000fd5b50811561082b565b604051631747cc3d60e21b8152600490fd5b604051632cfe303760e21b8152600490fd5b34610415576000366003190112610415576020601354604051908152f35b346104155760203660031901126104155760043560005260106020526020604060002054604051908152f35b3461041557600036600319011261041557610986613296565b61098e6130ba565b6000546040516370a0823160e01b8152306004820152906001600160a01b0316602082602481845afa9182156105f657600092610a30575b5081156108cf57816109d99133906130ea565b6109e581600754613065565b60075560405190815242602082015233907fbbae553982d541d38dacb1ea468ac757f324d0e279b6e4a2958f9e894da575ff60403392a3600160008051602061397d83398151915255005b9091506020813d602011610a5c575b81610a4c60209383612f39565b81010312610415575190826109c6565b3d9150610a3f565b3461041557602036600319011261041557600435610a806131de565b6103e88111610a8e57600e55005b60405162461bcd60e51b815260206004820152600d60248201526c0a4c2e8ca40e8dede40d0d2ced609b1b6044820152606490fd5b34610415576020366003190112610415576001600160a01b03610ae4612e3e565b1660005260036020526020604060002054604051908152f35b346104155760403660031901126104155761001b600435610b1c612e54565b908060005260008051602061393d833981519152602052610b446001604060002001546132d0565b613786565b346104155760203660031901126104155760606001600160a01b0380610b6d612e3e565b16600052600b60205260406000205416600c602052604060002054600d6020526040600020549060405192835260208301526040820152f35b34610415576000366003190112610415576020600e54604051908152f35b3461041557604036600319011261041557600435610be0613139565b610be86130ba565b80156108cf57600054610c09908290309033906001600160a01b0316613427565b3360005260026020526040600020610c22828254613065565b9055610c3081600554613065565b600555604051908152426020820152602435907f4eef3d1efb11f00508d9b7bb632ddcfa6da9d7105bd39f404bdd7362e6c59dbc60403392a3600160008051602061397d83398151915255005b612cde565b34610415576020366003190112610415576001600160a01b03610ca3612e3e565b16600052600d6020526020604060002054604051908152f35b34610415576000366003190112610415576020600854604051908152f35b34610415576000366003190112610415576000546040516001600160a01b039091168152602090f35b3461041557600036600319011261041557602060405160008152f35b34610415576060366003190112610415576004356004811015610415576001600160a01b036024356044358281169081810361041557610d5d613139565b610d656130ba565b81159182159081611022575b50611013575b610d8085612e9a565b9360405191610d8e83612f03565b610d9786612f5a565b8352600186015493602094858501908152600288015490604086019182526003890154956060810196875260ff600560048c01549b608084019c8d52015416159060a082159101526106455751908188108015611009575b610fe2575050908291610e0a87846000541630903390613427565b610fca575b1680151580610fc0575b610f1f575b506001549151945160405163ace8eb8760e01b815233600482015260ff88166024820152604481018690526064810196909652608486015282918591168160008160a481015b03925af19283156105f657600093610ef0575b5033600052600281526040600020610e90838254613065565b9055610e9e82600554613065565b600555610eae604051809561309a565b83015260408201527f2185d7f2f2c5c679b71bf6e81f3eded9354d5c5a0cb15e714ad41ebb2d37d3eb60603392a2600160008051602061397d83398151915255005b9080935081813d8311610f18575b610f088183612f39565b8101031261041557519184610e77565b503d610efe565b949091612710610f31600e54876130a7565b049286600052600c85526040600020610f4b858254613065565b905586600052600d855260406000209384549760018901809911610faa57610e649887965560405191825242868301527f8eadd36a0aee67beaef95bd7b130cb68a3b1a16ac68f0b395333c0db184428a260403393a391955091610e1e565b634e487b7160e01b600052601160045260246000fd5b5033811415610e19565b505033600052600b8352808060406000205416610e0f565b5160405163eafc9d5560e01b81526004810189905260248101929092526044820152606490fd5b5080518811610def565b61101d8133613809565b610d77565b905033141586610d71565b3461041557602036600319011261041557611046612e3e565b6001600160a01b03811633146110605761001b9033613809565b604051630c22084560e31b8152600490fd5b346104155760203660031901126104155761108b612e3e565b611093613296565b6001600160a01b031680156110ba576001600160601b0360a01b6001541617600155600080f35b60405162461bcd60e51b8152602060048201526016602482015275496e76616c696420514143617264206164647265737360501b6044820152606490fd5b3461041557604036600319011261041557611111612e3e565b60243561111c613296565b6111246130ba565b6000546040516370a0823160e01b81523060048201526001600160a01b0391821690602081602481855afa9081156105f6576000916111e7575b508084116111c957507fbbae553982d541d38dacb1ea468ac757f324d0e279b6e4a2958f9e894da575ff9161119684866040946130ea565b6111a284600754613065565b600755815193845242602085015233941692a3600160008051602061397d83398151915255005b836044916040519163cf47918160e01b835260048301526024820152fd5b90506020813d602011611211575b8161120260209383612f39565b8101031261041557518561115e565b3d91506111f5565b34610415576020366003190112610415576004356112356131de565b80156112775780601555426016556040519081524260208201527f378b09391f49d01e482ba75312341912ad0652cb8aa8799b6b33b624bd65d9f260403392a2005b60405162bfc92160e01b8152600490fd5b34610415576000366003190112610415576020601454604051908152f35b34610415576040366003190112610415576112bf612e54565b60043560005260008051602061393d83398151915260205260406000209060018060a01b0316600052602052602060ff604060002054166040519015158152f35b34610415576020366003190112610415576040600435806000526010602052816000205490336000526011602052826000209060005260205260ff826000205416825191825215156020820152f35b346104155760203660031901126104155760206001600160a01b0380611373612e3e565b16600052600b825260406000205416604051908152f35b346104155760003660031901126104155760206040517f10dac8c06a04bec0b551627dad28bc00d6516b0caacd1c7b345fcdb5211334e48152f35b34610415576000366003190112610415576113de61323a565b6113e6613139565b60008051602061395d833981519152600160ff198254161790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a1005b34610415576000366003190112610415576020600954604051908152f35b34610415576000366003190112610415576020600554604051908152f35b3461041557606036600319011261041557611481612e3e565b611489612e54565b90604435916001600160401b0383116104155736602384011215610415578260040135926001600160401b038411611bb8578360051b90604051946114d16020840187612f39565b8552602460208601928201019036821161041557602401915b818310611ea45750505060008051602061399d83398151915254916001600160401b03831680159081611e94575b6001149081611e8a575b159081611e81575b50611e6f5760016001600160401b031984161760008051602061399d8339815191525560ff8360401c1615611e42575b6001600160a01b03168015611e06576001600160a01b03821615611dc9576115806138ed565b6115886138ed565b6115906138ed565b6115986138ed565b600160008051602061397d833981519152556001600160601b0360a01b60005416176000556402540be40060085564174876e8006009556101f4600e5562093a8060135562093a7f194201428111610faa576014556000601255637735940060155542601655610e1060175560405161161081612f03565b60405161161c81612f1e565b600e81526d14504814da5b1d995c8810d85c9960921b602082015281526305f5e10060208201526402540be40060408201526104b06060820152601e6080820152600160a082015260008052600460205260406000209080518051906001600160401b038211611bb8576116908454612ec9565b601f8111611d85575b50602090601f8311600114611d2c57928260059360a0936117119796600092611bce575b50508160011b916000199060031b1c19161784555b602081015160018501556040810151600285015560608101516003850155608081015160048501550151151591019060ff801983541691151516179055565b60405161171d81612f03565b60405161172981612f1e565b600c81526b14504811dbdb190810d85c9960a21b60208201528152633b9aca006020820152640ba43b740060408201526105dc6060820152603c6080820152600160a08201526001600052600460205260406000209080518051906001600160401b038211611bb85761179c8454612ec9565b601f8111611ce8575b50602090601f8311600114611c8f57928260059360a09361181b9796600092611bce5750508160011b916000199060031b1c1916178455602081015160018501556040810151600285015560608101516003850155608081015160048501550151151591019060ff801983541691151516179055565b60405161182781612f03565b60405161183381612f1e565b600f81526e145048111a585b5bdb990810d85c99608a1b6020820152815264012a05f2006020820152642e90edd00060408201526107086060820152605a6080820152600160a08201526002600052600460205260406000209080518051906001600160401b038211611bb8576118aa8454612ec9565b601f8111611c4b575b50602090601f8311600114611bd957928260059360a0936119299796600092611bce5750508160011b916000199060031b1c1916178455602081015160018501556040810151600285015560608101516003850155608081015160048501550151151591019060ff801983541691151516179055565b60405161193581612f03565b60405161194181612f1e565b601081526f145048141b185d1a5b9d5b4810d85c9960821b602082015281526402540be400602082015264746a52880060408201526107d0606082015261016d6080820152600160a08201526003600052600460205260406000209080518051906001600160401b038211611bb8576119ba8454612ec9565b601f8111611b74575b50602090601f8311600114611afd57611a3d9383611a5697969460059460a094600092611af25750508160011b916000199060031b1c1916178455602081015160018501556040810151600285015560608101516003850155608081015160048501550151151591019060ff801983541691151516179055565b611a468161347f565b50611a508161350d565b506135bd565b5060005b8251811015611a8b57600581901b83016020015160019190611a84906001600160a01b0316613667565b5001611a5a565b60ff8260401c1615611a9957005b68ff00000000000000001960008051602061399d833981519152541660008051602061399d833981519152557fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2602060405160018152a1005b015190508b806116bd565b908460005260206000209160005b601f1985168110611b5c57509360018460059460a094611a3d98611a569b9a98601f19811610611b43575b505050811b0184556116d2565b015160001960f88460031b161c191690558b8080611b36565b91926020600181928685015181550194019201611b0b565b846000526020600020601f840160051c810160208510611bb1575b601f830160051c82018110611ba55750506119c3565b60008155600101611b8f565b5080611b8f565b634e487b7160e01b600052604160045260246000fd5b015190508a806116bd565b908460005260206000209160005b601f1985168110611c3357508360a093611929979693600193600597601f19811610611c1a57505050811b0184556116d2565b015160001960f88460031b161c191690558a8080611b36565b91926020600181928685015181550194019201611be7565b846000526020600020601f840160051c810160208510611c88575b601f830160051c82018110611c7c5750506118b3565b60008155600101611c66565b5080611c66565b908460005260206000209160005b601f1985168110611cd057508360a09361181b979693600193600597601f19811610611c1a57505050811b0184556116d2565b91926020600181928685015181550194019201611c9d565b846000526020600020601f840160051c810160208510611d25575b601f830160051c82018110611d195750506117a5565b60008155600101611d03565b5080611d03565b908460005260206000209160005b601f1985168110611d6d57508360a093611711979693600193600597601f19811610611c1a57505050811b0184556116d2565b91926020600181928685015181550194019201611d3a565b846000526020600020601f840160051c810160208510611dc2575b601f830160051c82018110611db6575050611699565b60008155600101611da0565b5080611da0565b60405162461bcd60e51b8152602060048201526015602482015274496e76616c69642061646d696e206164647265737360581b6044820152606490fd5b60405162461bcd60e51b8152602060048201526014602482015273496e76616c69642055534454206164647265737360601b6044820152606490fd5b68ffffffffffffffffff198316680100000000000000011760008051602061399d8339815191525561155a565b60405163f92ee8a960e01b8152600490fd5b9050158561152a565b303b159150611522565b604085901c60ff16159150611518565b82356001600160a01b0381168103610415578152602092830192016114ea565b34610415576000366003190112610415576020601554604051908152f35b3461041557600036600319011261041557602047604051908152f35b34610415576000366003190112610415576001546040516001600160a01b039091168152602090f35b34610415576000366003190112610415576020601654604051908152f35b3461041557602036600319011261041557600435600052600a6020526020604060002054604051908152f35b346104155760e036600319011261041557600480351015610415576001600160401b0360243581811161041557366023820112156104155781816004013511610415573660248260040135830101116104155760c435801515810361041557611fd86131de565b604051611fe481612f03565b611ff1836004013561307f565b611ffe6040519182612f39565b600484013580825260248501602083013760006020856004013583010152815260443560208201526064356040820152608435606082015260a435608082015281151560a0820152612051600435612e9a565b9381518051918211611bb8576120678654612ec9565b601f81116121fa575b50602090601f83116001146121805761210793837fea088b2acd48cf08e6469ba8d937cb867a6f70de9862b7e373fda32c4d7b8fd0989460059460a094600092611bce5750508160011b916000199060031b1c1916178455602081015160018501556040810151600285015560608101516003850155608081015160048501550151151591019060ff801983541691151516179055565b60405180926121188260043561309a565b60e06020830152806004013560e0830152610100928160040135602483018585013760008483600401358501015260443560408401526064356060840152608435608084015260a43560a0840152151560c0830152601f8019916004013501168101030190a1005b908660005260206000209160005b601f19851681106121e257509360018460059460a094612107987fea088b2acd48cf08e6469ba8d937cb867a6f70de9862b7e373fda32c4d7b8fd09c98601f19811610611c1a57505050811b0184556116d2565b9192602060018192868501518155019401920161218e565b866000526020600020601f840160051c810160208510612237575b601f830160051c8201811061222b575050612070565b60008155600101612215565b5080612215565b34610415576000366003190112610415576020600754604051908152f35b3461041557600036600319011261041557602060ff60008051602061395d83398151915254166040519015158152f35b34610415576020366003190112610415576004356122a86131de565b6122b760145460135490613065565b42106108ff578060409161232e575b60125460005260106020528082600020556122e381600f54613065565b600f557f4d1225938325dca72e314a20911c9ebde0d6b3f08fb075aba351e8796f8680656012549283928151908152426020820152a26000198114610faa5760010160125542601455005b600054612349908290309033906001600160a01b0316613427565b6122c6565b34610415576040366003190112610415576004356001600160a01b0381169081900361041557602435906123806131de565b81471061240057600080809381935af13d156123fb573d6123a08161307f565b906123ae6040519283612f39565b8152600060203d92013e5b156123c057005b60405162461bcd60e51b8152602060048201526013602482015272115512081d1c985b9cd9995c8819985a5b1959606a1b6044820152606490fd5b6123b9565b60405162461bcd60e51b815260206004820152601860248201527f496e73756666696369656e74204554482062616c616e636500000000000000006044820152606490fd5b346104155760003660031901126104155761245e61323a565b60008051602061395d833981519152805460ff8116156124aa5760ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a1005b604051638dfc202b60e01b8152600490fd5b34610415576040366003190112610415576124d5612e54565b336001600160a01b038216036124f15761001b90600435613786565b60405163334bd91960e11b8152600490fd5b346104155760203660031901126104155760043560048110156104155761252c61256991612e9a565b61253581612f5a565b90600181015490600281015490600381015460ff60056004840154930154169260405196879660c0885260c0880190612fff565b946020870152604086015260608501526080840152151560a08301520390f35b34610415576000366003190112610415576020601754604051908152f35b346104155760403660031901126104155761001b6004356125c6612e54565b908060005260008051602061393d8339815191526020526125ee6001604060002001546132d0565b613711565b346104155760203660031901126104155760043561260f613164565b612617613139565b61261f6130ba565b61262881613303565b60005461264190829033906001600160a01b03166130ea565b61264d81600754613065565b600755620151804204600052600a602052604060002061266e828254613065565b905560405190808252426020830152736f7065726174696f6e616c5f776974686472617760601b809233907fd5fb189e61d5d29d4c1ae35dddf9a74b32b17616667eb42f9a36105c73bee4d360403392a460405190815242602082015233907fb3e34ddca7bfc93b361617ff32f2023b3650ce958bf594a4e5fa84f7c1a34d1460403392a4600160008051602061397d83398151915255005b34610415576040366003190112610415576004356024356127266131de565b816008558060095560405191825260208201527f86ca55648bc4e3974630a90eca019d2bfc64c8eaa84e093d677caffa363f9cdf60403392a2005b346104155760203660031901126104155760043560005260008051602061393d8339815191526020526020600160406000200154604051908152f35b346104155760003660031901126104155760606016546127bd8142613072565b60175410156015549160405192835260208301526040820152f35b34610415576040366003190112610415576001600160a01b036127f9612e3e565b1660005260116020526040600020602435600052602052602060ff604060002054166040519015158152f35b34610415576040366003190112610415576001600160401b0360043581811161041557612856903690600401612e6a565b909160243590811161041557612870903690600401612e6a565b61287b939193613139565b6128836130ba565b8083036129b55760009360005b84811061298457506000546128b3908690309033906001600160a01b0316613427565b33600052602091600260205260406000206128cf878254613065565b90556128dd86600554613065565b60055560005b85811061293157868660405191825260208201527f36ba660c6b65ee17a225b58a6a8b4835a77c2bf10fc733783ef47039e222b24560403392a2600160008051602061397d83398151915255005b8061293f600192888861303f565b3561294b82858761303f565b359060405190815242878201527f4eef3d1efb11f00508d9b7bb632ddcfa6da9d7105bd39f404bdd7362e6c59dbc60403392a3016128e3565b9461299086868661303f565b35156108cf576129ae6001916129a788888861303f565b3590613065565b9501612890565b60405162461bcd60e51b8152602060048201526015602482015274082e4e4c2f240d8cadccee8d040dad2e6dac2e8c6d605b1b6044820152606490fd5b34610415576000366003190112610415576000546040516370a0823160e01b815230600482015290602090829060249082906001600160a01b03165afa80156105f657600090612a48575b602090604051908152f35b506020813d602011612a73575b81612a6260209383612f39565b810103126104155760209051612a3d565b3d9150612a55565b3461041557606036600319011261041557612a94612e3e565b60243560443591612aa3613164565b612aab613139565b612ab36130ba565b612abc82613303565b60018060a01b0390612ad3838284600054166130ea565b612adf83600754613065565b600755620151804204600052600a6020526040600020612b00848254613065565b90551682604051838152426020820152827fd5fb189e61d5d29d4c1ae35dddf9a74b32b17616667eb42f9a36105c73bee4d360403393a46040519182524260208301527fb3e34ddca7bfc93b361617ff32f2023b3650ce958bf594a4e5fa84f7c1a34d1460403393a4600160008051602061397d83398151915255005b3461041557604036600319011261041557600435600481101561041557602435612ba5613139565b612bad6130ba565b612bb682612e9a565b90604051612bc381612f03565b612bcc83612f5a565b8152600183015490602091828201908152600285015490604083019182526003860154926060810193845260ff600560048901549860808401998a52015416159060a082159101526106455751908185108015612cd4575b612cad5750506000546001600160a01b0390612c47908590309033908516613427565b33600052600b8352806040600020541680151580610fc057610f1f57506001549151945160405163ace8eb8760e01b815233600482015260ff88166024820152604481018690526064810196909652608486015282918591168160008160a48101610e64565b5160405163eafc9d5560e01b81526004810186905260248101929092526044820152606490fd5b5080518511612c24565b34610415576020366003190112610415576001600160a01b03612cff612e3e565b1660005260026020526020604060002054604051908152f35b3461041557600036600319011261041557612d316130ba565b33600052600c60205260406000205480156108cf57336000818152600c6020526040812081905554612d6d9183916001600160a01b03166130ea565b604051908152426020820152723932b332b93930b62fb1b7b6b6b4b9b9b4b7b760691b9033907fd5fb189e61d5d29d4c1ae35dddf9a74b32b17616667eb42f9a36105c73bee4d360403392a4600160008051602061397d83398151915255005b34610415576000366003190112610415576020600f54604051908152f35b34610415576020366003190112610415576004359063ffffffff60e01b821680920361041557602091637965db0b60e01b8114908115612e2d575b5015158152f35b6301ffc9a760e01b14905083612e26565b600435906001600160a01b038216820361041557565b602435906001600160a01b038216820361041557565b9181601f84011215610415578235916001600160401b038311610415576020808501948460051b01011161041557565b6004811015612eb3576000526004602052604060002090565b634e487b7160e01b600052602160045260246000fd5b90600182811c92168015612ef9575b6020831014612ee357565b634e487b7160e01b600052602260045260246000fd5b91607f1691612ed8565b60c081019081106001600160401b03821117611bb857604052565b604081019081106001600160401b03821117611bb857604052565b90601f801991011681019081106001600160401b03821117611bb857604052565b90604051918260008254612f6d81612ec9565b90818452602094600191600181169081600014612fdd5750600114612f9e575b505050612f9c92500383612f39565b565b600090815285812095935091905b818310612fc5575050612f9c9350820101388080612f8d565b85548884018501529485019487945091830191612fac565b92505050612f9c94925060ff191682840152151560051b820101388080612f8d565b919082519283825260005b84811061302b575050826000602080949584010152601f8019910116010190565b60208183018101518483018201520161300a565b919081101561304f5760051b0190565b634e487b7160e01b600052603260045260246000fd5b91908201809211610faa57565b91908203918211610faa57565b6001600160401b038111611bb857601f01601f191660200190565b906004821015612eb35752565b81810292918115918404141715610faa57565b60008051602061397d83398151915260028154146130d85760029055565b604051633ee5aeb560e01b8152600490fd5b60405163a9059cbb60e01b60208201526001600160a01b03909216602483015260448083019390935291815260808101916001600160401b03831182841017611bb857612f9c92604052613891565b60ff60008051602061395d833981519152541661315257565b60405163d93c066560e01b8152600490fd5b3360009081527f395f4e35a18c2b5e556b3b2ff855307e76c0b3cc1ca71e19a70e83037e08e7b360205260409020547f10dac8c06a04bec0b551627dad28bc00d6516b0caacd1c7b345fcdb5211334e49060ff16156131c05750565b6044906040519063e2517d3f60e01b82523360048301526024820152fd5b3360009081527f448256db8f8fb95ee3eaaf89c1051414494e85cebb6057fcf996cc3d0ccfb45660205260409020547f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9299060ff16156131c05750565b3360009081527f75442b0a96088b5456bc4ed01394c96a4feec0f883c9494257d76b96ab1c9b6b60205260409020547f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a9060ff16156131c05750565b3360009081527fb7db2dd08fcb62d0c9e08c51941cae53c267786a0b75803fb7960902fc8ef97d602052604081205460ff16156131c05750565b8060005260008051602061393d83398151915260205260406000203360005260205260ff60406000205416156131c05750565b600954808211613409575060006201518042048152600a602052604081205461332c8382613065565b906008548092116133e157505080546040516370a0823160e01b815230600482015290602090829060249082906001600160a01b03165afa9182156133d557809261339d575b505080821161337f575050565b604492506040519163cf47918160e01b835260048301526024820152fd5b9091506020823d6020116133cd575b816133b960209383612f39565b810103126133ca5750513880613372565b80fd5b3d91506133ac565b604051903d90823e3d90fd5b906133ee84604493613065565b9060405191639c8983d960e01b835260048301526024820152fd5b6044925060405191639c8983d960e01b835260048301526024820152fd5b6040516323b872dd60e01b60208201526001600160a01b03928316602482015292909116604483015260648083019390935291815260a08101918183106001600160401b03841117611bb857612f9c92604052613891565b6001600160a01b031660008181527fb7db2dd08fcb62d0c9e08c51941cae53c267786a0b75803fb7960902fc8ef97d602052604081205490919060008051602061393d8339815191529060ff16613508578280526020526040822081835260205260408220600160ff19825416179055339160008051602061391d8339815191528180a4600190565b505090565b6001600160a01b031660008181527f75442b0a96088b5456bc4ed01394c96a4feec0f883c9494257d76b96ab1c9b6b60205260408120549091907f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a9060008051602061393d8339815191529060ff166135b7578184526020526040832082845260205260408320600160ff1982541617905560008051602061391d833981519152339380a4600190565b50505090565b6001600160a01b031660008181527f395f4e35a18c2b5e556b3b2ff855307e76c0b3cc1ca71e19a70e83037e08e7b360205260408120549091907f10dac8c06a04bec0b551627dad28bc00d6516b0caacd1c7b345fcdb5211334e49060008051602061393d8339815191529060ff166135b7578184526020526040832082845260205260408320600160ff1982541617905560008051602061391d833981519152339380a4600190565b6001600160a01b031660008181527f448256db8f8fb95ee3eaaf89c1051414494e85cebb6057fcf996cc3d0ccfb45660205260408120549091907f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9299060008051602061393d8339815191529060ff166135b7578184526020526040832082845260205260408320600160ff1982541617905560008051602061391d833981519152339380a4600190565b9060009180835260008051602061393d83398151915280602052604084209260018060a01b03169283855260205260ff604085205416156000146135b7578184526020526040832082845260205260408320600160ff1982541617905560008051602061391d833981519152339380a4600190565b9060009180835260008051602061393d83398151915280602052604084209260018060a01b03169283855260205260ff6040852054166000146135b757818452602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4600190565b6001600160a01b039081166000818152600b60205260409020805493919290918482161580613885575b61383f575b5050505050565b1680936001600160601b0360a01b161790557fd777a1c61bd7162692fd6e6733af90c5c8828bf2e57caaba876193c1f65f125c6020604051428152a33880808080613838565b50838282161415613833565b906000602091828151910182855af1156105f6576000513d6138e457506001600160a01b0381163b155b6138c25750565b604051635274afe760e01b81526001600160a01b039091166004820152602490fd5b600114156138bb565b60ff60008051602061399d8339815191525460401c161561390a57565b604051631afcd79f60e31b8152600490fdfe2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800cd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f033009b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00f0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00a264697066735822122011e946a6e86208834bbfe8737d5fe49eaadeb5f277d48e84a958ebc1b49daa7264736f6c63430008180033",
  "devdoc": {
    "details": "资金金库合约 - 负责USDT和ETH的存储和提取  功能特性: - USDT/ETH存款和提取 - ETH直接支付购买产品并铸造NFT - 多重签名控制 - 紧急暂停机制 - 角色权限控制 - 事件日志完整记录",
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC-20 token failed."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "batchDeposit(uint256[],bytes32[])": {
        "details": "批量存入USDT (Gas优化)",
        "params": {
          "amounts": "存入金额数组",
          "orderIds": "订单ID数组"
        }
      },
      "claimPeriodReward(uint256)": {
        "details": "领取期间奖励"
      },
      "claimReferralCommission()": {
        "details": "领取推荐佣金"
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "deposit(uint256,bytes32)": {
        "details": "用户存入USDT",
        "params": {
          "amount": "存入金额",
          "orderId": "订单ID (链下生成)"
        }
      },
      "emergencyWithdraw()": {
        "details": "紧急提取全部余额 (向后兼容)"
      },
      "emergencyWithdraw(address,uint256)": {
        "details": "紧急提取 (绕过限制)",
        "params": {
          "amount": "提取金额",
          "to": "接收地址"
        }
      },
      "getBalance()": {
        "details": "获取合约USDT余额"
      },
      "getCurrentPriceInfo()": {
        "details": "获取当前ETH价格信息"
      },
      "getETHBalance()": {
        "details": "获取合约ETH余额"
      },
      "getPeriodRewardInfo(uint256)": {
        "details": "获取期间奖励信息"
      },
      "getProductInfo(uint8)": {
        "details": "获取产品信息"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getTodayWithdrawn()": {
        "details": "获取今日已提取金额"
      },
      "getTotalETHDeposits()": {
        "details": "获取总ETH存款"
      },
      "getUserDeposits(address)": {
        "details": "获取用户存款余额"
      },
      "getUserETHDeposits(address)": {
        "details": "获取用户ETH存款余额"
      },
      "getUserInvestments(address)": {
        "details": "获取用户投资余额 (向后兼容)"
      },
      "getUserReferralInfo(address)": {
        "details": "获取用户推荐信息"
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address,address,address[])": {
        "details": "初始化合约",
        "params": {
          "_admin": "管理员地址",
          "_operators": "操作员地址数组",
          "_usdtToken": "USDT代币合约地址"
        }
      },
      "pause()": {
        "details": "暂停合约"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "purchaseProduct(uint8,uint256)": {
        "details": "购买产品",
        "params": {
          "amount": "投资金额",
          "productType": "产品类型"
        }
      },
      "purchaseProductWithETH(uint8)": {
        "details": "使用ETH购买产品",
        "params": {
          "productType": "产品类型"
        }
      },
      "purchaseProductWithReferral(uint8,uint256,address)": {
        "details": "购买产品（带推荐）",
        "params": {
          "amount": "投资金额",
          "productType": "产品类型",
          "referrer": "推荐人地址"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setQACard(address)": {
        "details": "设置QACard合约地址"
      },
      "setReferralCommissionRate(uint256)": {
        "details": "设置推荐佣金比例"
      },
      "setReferrer(address)": {
        "details": "设置推荐人（外部调用）"
      },
      "setWithdrawLimits(uint256,uint256)": {
        "details": "设置提取限制",
        "params": {
          "_dailyLimit": "每日提取限制",
          "_singleLimit": "单次提取限制"
        }
      },
      "startRewardPeriod(uint256)": {
        "details": "启动新的奖励期间"
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "unpause()": {
        "details": "恢复合约"
      },
      "updateDailyWithdrawalLimit(uint256)": {
        "details": "更新每日提取限制 (向后兼容)",
        "params": {
          "_dailyLimit": "每日提取限制"
        }
      },
      "updateETHPrice(uint256)": {
        "details": "更新ETH价格"
      },
      "updateProduct(uint8,string,uint256,uint256,uint256,uint256,bool)": {
        "details": "更新产品信息"
      },
      "withdraw(address,uint256,bytes32)": {
        "details": "运营提取USDT",
        "params": {
          "amount": "提取金额",
          "reason": "提取原因",
          "to": "接收地址"
        }
      },
      "withdraw(uint256)": {
        "details": "运营提取USDT (向后兼容)",
        "params": {
          "amount": "提取金额"
        }
      },
      "withdrawETH(address,uint256)": {
        "details": "提取ETH"
      }
    },
    "title": "Treasury",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10494,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "usdtToken",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC20)3725"
      },
      {
        "astId": 10497,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "qaCard",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(QACard)10436"
      },
      {
        "astId": 10501,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "userDeposits",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10505,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "userEthDeposits",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10511,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "products",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_enum(ProductType)10478,t_struct(ProductInfo)10491_storage)"
      },
      {
        "astId": 10513,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "totalDeposits",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 10515,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "totalEthDeposits",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 10517,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "totalWithdrawals",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 10519,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "dailyWithdrawLimit",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 10521,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "singleWithdrawLimit",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 10525,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "dailyWithdrawn",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 10529,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "userReferrers",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 10533,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "referralCommissions",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10537,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "totalReferrals",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10539,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "referralCommissionRate",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 10541,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "totalRewardPool",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 10545,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "periodRewards",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 10551,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "userRewardsClaimed",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 10553,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "currentRewardPeriod",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 10555,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "rewardPeriodDuration",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 10557,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "lastRewardTime",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 10559,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "ethToUsdtRate",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 10561,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "lastPriceUpdate",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      },
      {
        "astId": 10563,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "priceValidityPeriod",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)3725": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(QACard)10436": {
        "encoding": "inplace",
        "label": "contract QACard",
        "numberOfBytes": "20"
      },
      "t_enum(ProductType)10478": {
        "encoding": "inplace",
        "label": "enum Treasury.ProductType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(ProductType)10478,t_struct(ProductInfo)10491_storage)": {
        "encoding": "mapping",
        "key": "t_enum(ProductType)10478",
        "label": "mapping(enum Treasury.ProductType => struct Treasury.ProductInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(ProductInfo)10491_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ProductInfo)10491_storage": {
        "encoding": "inplace",
        "label": "struct Treasury.ProductInfo",
        "members": [
          {
            "astId": 10480,
            "contract": "contracts/Treasury.sol:Treasury",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 10482,
            "contract": "contracts/Treasury.sol:Treasury",
            "label": "minInvestment",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 10484,
            "contract": "contracts/Treasury.sol:Treasury",
            "label": "maxInvestment",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 10486,
            "contract": "contracts/Treasury.sol:Treasury",
            "label": "apr",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 10488,
            "contract": "contracts/Treasury.sol:Treasury",
            "label": "duration",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 10490,
            "contract": "contracts/Treasury.sol:Treasury",
            "label": "isActive",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}