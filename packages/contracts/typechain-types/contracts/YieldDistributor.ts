/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface YieldDistributorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "DISTRIBUTOR_ROLE"
      | "OPERATOR_ROLE"
      | "PAUSER_ROLE"
      | "batchDistributeYield"
      | "claimAllAvailable"
      | "claimYield"
      | "completeBatchDistribution"
      | "dailyDistributed"
      | "distributionBatches"
      | "distributionFee"
      | "emergencyWithdraw"
      | "getBatchInfo"
      | "getContractStats"
      | "getRoleAdmin"
      | "getUserUnclaimedRecords"
      | "getUserYieldInfo"
      | "getYieldRecord"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "isDailyDistributed"
      | "maxBatchSize"
      | "minDistributionAmount"
      | "pause"
      | "paused"
      | "qaCard"
      | "renounceRole"
      | "revokeRole"
      | "supportsInterface"
      | "totalClaimed"
      | "totalDistributed"
      | "totalRecordCount"
      | "unpause"
      | "updateDistributionConfig"
      | "usdtToken"
      | "userYieldInfo"
      | "yieldRecords"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BatchDistributionCompleted"
      | "BatchDistributionStarted"
      | "DistributionConfigUpdated"
      | "EmergencyWithdraw"
      | "Initialized"
      | "Paused"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "Unpaused"
      | "YieldClaimed"
      | "YieldDistributed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DISTRIBUTOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batchDistributeYield",
    values: [AddressLike[], BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimAllAvailable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimYield",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "completeBatchDistribution",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "dailyDistributed",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributionBatches",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "distributionFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBatchInfo",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserUnclaimedRecords",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserYieldInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getYieldRecord",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, AddressLike, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "isDailyDistributed",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "maxBatchSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minDistributionAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "qaCard", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalClaimed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalDistributed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalRecordCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateDistributionConfig",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "usdtToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userYieldInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "yieldRecords",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DISTRIBUTOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAUSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchDistributeYield",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimAllAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimYield", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "completeBatchDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dailyDistributed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributionBatches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBatchInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserUnclaimedRecords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserYieldInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getYieldRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isDailyDistributed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxBatchSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minDistributionAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "qaCard", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDistributed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRecordCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateDistributionConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdtToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userYieldInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "yieldRecords",
    data: BytesLike
  ): Result;
}

export namespace BatchDistributionCompletedEvent {
  export type InputTuple = [
    batchId: BytesLike,
    completedAt: BigNumberish,
    success: boolean
  ];
  export type OutputTuple = [
    batchId: string,
    completedAt: bigint,
    success: boolean
  ];
  export interface OutputObject {
    batchId: string;
    completedAt: bigint;
    success: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BatchDistributionStartedEvent {
  export type InputTuple = [
    batchId: BytesLike,
    totalAmount: BigNumberish,
    recordCount: BigNumberish,
    operator: AddressLike
  ];
  export type OutputTuple = [
    batchId: string,
    totalAmount: bigint,
    recordCount: bigint,
    operator: string
  ];
  export interface OutputObject {
    batchId: string;
    totalAmount: bigint;
    recordCount: bigint;
    operator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DistributionConfigUpdatedEvent {
  export type InputTuple = [
    maxBatchSize: BigNumberish,
    minDistributionAmount: BigNumberish,
    distributionFee: BigNumberish
  ];
  export type OutputTuple = [
    maxBatchSize: bigint,
    minDistributionAmount: bigint,
    distributionFee: bigint
  ];
  export interface OutputObject {
    maxBatchSize: bigint;
    minDistributionAmount: bigint;
    distributionFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyWithdrawEvent {
  export type InputTuple = [
    token: AddressLike,
    to: AddressLike,
    amount: BigNumberish,
    operator: AddressLike
  ];
  export type OutputTuple = [
    token: string,
    to: string,
    amount: bigint,
    operator: string
  ];
  export interface OutputObject {
    token: string;
    to: string;
    amount: bigint;
    operator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace YieldClaimedEvent {
  export type InputTuple = [
    user: AddressLike,
    recordIds: BigNumberish[],
    totalAmount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    recordIds: bigint[],
    totalAmount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    user: string;
    recordIds: bigint[];
    totalAmount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace YieldDistributedEvent {
  export type InputTuple = [
    user: AddressLike,
    recordId: BigNumberish,
    amount: BigNumberish,
    positionId: BigNumberish,
    batchId: BytesLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    recordId: bigint,
    amount: bigint,
    positionId: bigint,
    batchId: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    user: string;
    recordId: bigint;
    amount: bigint;
    positionId: bigint;
    batchId: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface YieldDistributor extends BaseContract {
  connect(runner?: ContractRunner | null): YieldDistributor;
  waitForDeployment(): Promise<this>;

  interface: YieldDistributorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DISTRIBUTOR_ROLE: TypedContractMethod<[], [string], "view">;

  OPERATOR_ROLE: TypedContractMethod<[], [string], "view">;

  PAUSER_ROLE: TypedContractMethod<[], [string], "view">;

  batchDistributeYield: TypedContractMethod<
    [
      users: AddressLike[],
      amounts: BigNumberish[],
      positionIds: BigNumberish[],
      batchId: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  claimAllAvailable: TypedContractMethod<[], [void], "nonpayable">;

  claimYield: TypedContractMethod<
    [recordIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  completeBatchDistribution: TypedContractMethod<
    [batchId: BytesLike],
    [void],
    "nonpayable"
  >;

  dailyDistributed: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;

  distributionBatches: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, bigint, bigint, bigint, string, boolean] & {
        batchId: string;
        totalAmount: bigint;
        totalRecords: bigint;
        completedAt: bigint;
        operator: string;
        isCompleted: boolean;
      }
    ],
    "view"
  >;

  distributionFee: TypedContractMethod<[], [bigint], "view">;

  emergencyWithdraw: TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getBatchInfo: TypedContractMethod<
    [batchId: BytesLike],
    [
      [bigint, bigint, bigint, string, boolean] & {
        totalAmount: bigint;
        totalRecords: bigint;
        completedAt: bigint;
        operator: string;
        isCompleted: boolean;
      }
    ],
    "view"
  >;

  getContractStats: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        _totalRecordCount: bigint;
        _totalDistributed: bigint;
        _totalClaimed: bigint;
        _contractBalance: bigint;
        _activeRecords: bigint;
      }
    ],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getUserUnclaimedRecords: TypedContractMethod<
    [user: AddressLike, limit: BigNumberish],
    [[bigint[], bigint[]] & { recordIds: bigint[]; amounts: bigint[] }],
    "view"
  >;

  getUserYieldInfo: TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        totalEarned: bigint;
        totalClaimed: bigint;
        availableToClean: bigint;
        lastClaimAt: bigint;
        recordCount: bigint;
      }
    ],
    "view"
  >;

  getYieldRecord: TypedContractMethod<
    [recordId: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, string, boolean, bigint] & {
        user: string;
        amount: bigint;
        positionId: bigint;
        distributionDate: bigint;
        blockNumber: bigint;
        batchId: string;
        claimed: boolean;
        claimedAt: bigint;
      }
    ],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      _usdtToken: AddressLike,
      _qaCard: AddressLike,
      _admin: AddressLike,
      _distributors: AddressLike[]
    ],
    [void],
    "nonpayable"
  >;

  isDailyDistributed: TypedContractMethod<
    [user: AddressLike, day: BigNumberish],
    [boolean],
    "view"
  >;

  maxBatchSize: TypedContractMethod<[], [bigint], "view">;

  minDistributionAmount: TypedContractMethod<[], [bigint], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  qaCard: TypedContractMethod<[], [string], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  totalClaimed: TypedContractMethod<[], [bigint], "view">;

  totalDistributed: TypedContractMethod<[], [bigint], "view">;

  totalRecordCount: TypedContractMethod<[], [bigint], "view">;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateDistributionConfig: TypedContractMethod<
    [
      _maxBatchSize: BigNumberish,
      _minDistributionAmount: BigNumberish,
      _distributionFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  usdtToken: TypedContractMethod<[], [string], "view">;

  userYieldInfo: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        totalEarned: bigint;
        totalClaimed: bigint;
        availableToClean: bigint;
        lastClaimAt: bigint;
      }
    ],
    "view"
  >;

  yieldRecords: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, string, boolean, bigint] & {
        user: string;
        amount: bigint;
        positionId: bigint;
        distributionDate: bigint;
        blockNumber: bigint;
        batchId: string;
        claimed: boolean;
        claimedAt: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DISTRIBUTOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "OPERATOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PAUSER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "batchDistributeYield"
  ): TypedContractMethod<
    [
      users: AddressLike[],
      amounts: BigNumberish[],
      positionIds: BigNumberish[],
      batchId: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimAllAvailable"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimYield"
  ): TypedContractMethod<[recordIds: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "completeBatchDistribution"
  ): TypedContractMethod<[batchId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "dailyDistributed"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "distributionBatches"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, bigint, bigint, bigint, string, boolean] & {
        batchId: string;
        totalAmount: bigint;
        totalRecords: bigint;
        completedAt: bigint;
        operator: string;
        isCompleted: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "distributionFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getBatchInfo"
  ): TypedContractMethod<
    [batchId: BytesLike],
    [
      [bigint, bigint, bigint, string, boolean] & {
        totalAmount: bigint;
        totalRecords: bigint;
        completedAt: bigint;
        operator: string;
        isCompleted: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getContractStats"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        _totalRecordCount: bigint;
        _totalDistributed: bigint;
        _totalClaimed: bigint;
        _contractBalance: bigint;
        _activeRecords: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getUserUnclaimedRecords"
  ): TypedContractMethod<
    [user: AddressLike, limit: BigNumberish],
    [[bigint[], bigint[]] & { recordIds: bigint[]; amounts: bigint[] }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserYieldInfo"
  ): TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        totalEarned: bigint;
        totalClaimed: bigint;
        availableToClean: bigint;
        lastClaimAt: bigint;
        recordCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getYieldRecord"
  ): TypedContractMethod<
    [recordId: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, string, boolean, bigint] & {
        user: string;
        amount: bigint;
        positionId: bigint;
        distributionDate: bigint;
        blockNumber: bigint;
        batchId: string;
        claimed: boolean;
        claimedAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _usdtToken: AddressLike,
      _qaCard: AddressLike,
      _admin: AddressLike,
      _distributors: AddressLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isDailyDistributed"
  ): TypedContractMethod<
    [user: AddressLike, day: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "maxBatchSize"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minDistributionAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "qaCard"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "totalClaimed"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalDistributed"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalRecordCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateDistributionConfig"
  ): TypedContractMethod<
    [
      _maxBatchSize: BigNumberish,
      _minDistributionAmount: BigNumberish,
      _distributionFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "usdtToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "userYieldInfo"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        totalEarned: bigint;
        totalClaimed: bigint;
        availableToClean: bigint;
        lastClaimAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "yieldRecords"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, string, boolean, bigint] & {
        user: string;
        amount: bigint;
        positionId: bigint;
        distributionDate: bigint;
        blockNumber: bigint;
        batchId: string;
        claimed: boolean;
        claimedAt: bigint;
      }
    ],
    "view"
  >;

  getEvent(
    key: "BatchDistributionCompleted"
  ): TypedContractEvent<
    BatchDistributionCompletedEvent.InputTuple,
    BatchDistributionCompletedEvent.OutputTuple,
    BatchDistributionCompletedEvent.OutputObject
  >;
  getEvent(
    key: "BatchDistributionStarted"
  ): TypedContractEvent<
    BatchDistributionStartedEvent.InputTuple,
    BatchDistributionStartedEvent.OutputTuple,
    BatchDistributionStartedEvent.OutputObject
  >;
  getEvent(
    key: "DistributionConfigUpdated"
  ): TypedContractEvent<
    DistributionConfigUpdatedEvent.InputTuple,
    DistributionConfigUpdatedEvent.OutputTuple,
    DistributionConfigUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyWithdraw"
  ): TypedContractEvent<
    EmergencyWithdrawEvent.InputTuple,
    EmergencyWithdrawEvent.OutputTuple,
    EmergencyWithdrawEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "YieldClaimed"
  ): TypedContractEvent<
    YieldClaimedEvent.InputTuple,
    YieldClaimedEvent.OutputTuple,
    YieldClaimedEvent.OutputObject
  >;
  getEvent(
    key: "YieldDistributed"
  ): TypedContractEvent<
    YieldDistributedEvent.InputTuple,
    YieldDistributedEvent.OutputTuple,
    YieldDistributedEvent.OutputObject
  >;

  filters: {
    "BatchDistributionCompleted(bytes32,uint256,bool)": TypedContractEvent<
      BatchDistributionCompletedEvent.InputTuple,
      BatchDistributionCompletedEvent.OutputTuple,
      BatchDistributionCompletedEvent.OutputObject
    >;
    BatchDistributionCompleted: TypedContractEvent<
      BatchDistributionCompletedEvent.InputTuple,
      BatchDistributionCompletedEvent.OutputTuple,
      BatchDistributionCompletedEvent.OutputObject
    >;

    "BatchDistributionStarted(bytes32,uint256,uint256,address)": TypedContractEvent<
      BatchDistributionStartedEvent.InputTuple,
      BatchDistributionStartedEvent.OutputTuple,
      BatchDistributionStartedEvent.OutputObject
    >;
    BatchDistributionStarted: TypedContractEvent<
      BatchDistributionStartedEvent.InputTuple,
      BatchDistributionStartedEvent.OutputTuple,
      BatchDistributionStartedEvent.OutputObject
    >;

    "DistributionConfigUpdated(uint256,uint256,uint256)": TypedContractEvent<
      DistributionConfigUpdatedEvent.InputTuple,
      DistributionConfigUpdatedEvent.OutputTuple,
      DistributionConfigUpdatedEvent.OutputObject
    >;
    DistributionConfigUpdated: TypedContractEvent<
      DistributionConfigUpdatedEvent.InputTuple,
      DistributionConfigUpdatedEvent.OutputTuple,
      DistributionConfigUpdatedEvent.OutputObject
    >;

    "EmergencyWithdraw(address,address,uint256,address)": TypedContractEvent<
      EmergencyWithdrawEvent.InputTuple,
      EmergencyWithdrawEvent.OutputTuple,
      EmergencyWithdrawEvent.OutputObject
    >;
    EmergencyWithdraw: TypedContractEvent<
      EmergencyWithdrawEvent.InputTuple,
      EmergencyWithdrawEvent.OutputTuple,
      EmergencyWithdrawEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "YieldClaimed(address,uint256[],uint256,uint256)": TypedContractEvent<
      YieldClaimedEvent.InputTuple,
      YieldClaimedEvent.OutputTuple,
      YieldClaimedEvent.OutputObject
    >;
    YieldClaimed: TypedContractEvent<
      YieldClaimedEvent.InputTuple,
      YieldClaimedEvent.OutputTuple,
      YieldClaimedEvent.OutputObject
    >;

    "YieldDistributed(address,uint256,uint256,uint256,bytes32,uint256)": TypedContractEvent<
      YieldDistributedEvent.InputTuple,
      YieldDistributedEvent.OutputTuple,
      YieldDistributedEvent.OutputObject
    >;
    YieldDistributed: TypedContractEvent<
      YieldDistributedEvent.InputTuple,
      YieldDistributedEvent.OutputTuple,
      YieldDistributedEvent.OutputObject
    >;
  };
}
